{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/static/img/compositionEvent-compatibility.png","path":"static/img/compositionEvent-compatibility.png","modified":1,"renderable":0},{"_id":"source/static/img/google-autocompleted.png","path":"static/img/google-autocompleted.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-instance.png","path":"static/img/vue-instance.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-reactivity.png","path":"static/img/vue-reactivity.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-tool-disabled.png","path":"static/img/vue-tool-disabled.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-tool-on.png","path":"static/img/vue-tool-on.png","modified":1,"renderable":0},{"_id":"source/static/img/vue1-watcher.png","path":"static/img/vue1-watcher.png","modified":1,"renderable":0},{"_id":"source/static/img/vue2-lifecycle.png","path":"static/img/vue2-lifecycle.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-logo.png","path":"static/img/yarn-logo.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-2.png","path":"static/img/yarn-vue-2.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-3.png","path":"static/img/yarn-vue-3.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-4.png","path":"static/img/yarn-vue-4.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-5.png","path":"static/img/yarn-vue-5.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-6.png","path":"static/img/yarn-vue-6.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/static/img/5xruby-vue.png","path":"static/img/5xruby-vue.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-migration-demo.png","path":"static/img/vue-migration-demo.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-package-json.png","path":"static/img/vue-package-json.png","modified":1,"renderable":0},{"_id":"source/static/img/vue-tool-screenshot.png","path":"static/img/vue-tool-screenshot.png","modified":1,"renderable":0},{"_id":"source/static/img/vue2-watcher.png","path":"static/img/vue2-watcher.png","modified":1,"renderable":0},{"_id":"source/static/img/yarn-vue-1.png","path":"static/img/yarn-vue-1.png","modified":1,"renderable":0},{"_id":"source/static/img/composition-demo.png","path":"static/img/composition-demo.png","modified":1,"renderable":0},{"_id":"source/static/img/vue2-rendering-flow.png","path":"static/img/vue2-rendering-flow.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"c750c39f716a50ea77d23b1f77e82fe7e365c1ec","modified":1481166286000},{"_id":"source/CNAME","hash":"1104bf052238ea5883b201b90d66e5d67efac246","modified":1489571974000},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1467191779000},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1467191779000},{"_id":"themes/maupassant/README.md","hash":"67dad08ed6cda720ed42f9a1b0e2f31465b39c3a","modified":1467271271000},{"_id":"themes/maupassant/_config.yml","hash":"09e2bb9bb3f7fedbf56c396cc07a1f9b5acf8c78","modified":1467271123000},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1467191779000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1467171778000},{"_id":"source/_posts/Vue-2-0-升級小幫手-Vue-migration-helper.md","hash":"c04832d56b78a706c89a858405887be11fb004ae","modified":1489571974000},{"_id":"source/_posts/VueJS-V1-與-V2-元件實體之差異.md","hash":"bd06ea9ed3e6e3b694af7f70ae53d92baecd89e0","modified":1489571974000},{"_id":"source/_posts/VueJS-各種資料綁定-data-binding-的方式.md","hash":"572d8443fbacb5ad546c891bb8df836d8ace21aa","modified":1489571974000},{"_id":"source/_posts/a-brief-talk-on-google-map-heat-map-api.md","hash":"7c8ca9a4067e82619ac7e243521b57290f82840b","modified":1489571974000},{"_id":"source/_posts/added-to-the-google-map-images-d3-2.md","hash":"9b97737c9e8bb783631a94ac7d563b2a35060faf","modified":1489571974000},{"_id":"source/_posts/address-information-is-obtained-through-google-map-geocoder-with-the-latitude-and-longitude.md","hash":"8a58583b69eb6a89b444072cb0cff44cb679cdcf","modified":1489571974000},{"_id":"source/_posts/ecmascript-5-strict-mode.md","hash":"46d66fa89656633afad9f9fbd05cca67299398cc","modified":1489571974000},{"_id":"source/_posts/google-map-infowindow-bubble-detection-box-is-opened.md","hash":"9df9214eba25f87c6a89afb356428199c77f7762","modified":1489571974000},{"_id":"source/_posts/join-the-d3-in-google-map-image.md","hash":"dae3b14dccf08ad13b09a6aa5f6092a58eb0b49d","modified":1489571974000},{"_id":"source/_posts/js-note-twd97-convert-to-longitude-and-latitude.md","hash":"36f3281ec088753acf962564c849ed60efbdb1d7","modified":1489571974000},{"_id":"source/_posts/modern-webconf-2015-with-my-theme-d3-optimizing-two-or-three-things.md","hash":"c84b06cda59de6e2404f691e552d9367aae2a7ab","modified":1489571974000},{"_id":"source/_posts/note-blocking-android-chrome-page-drop-down-automatically-restructure-page.md","hash":"234962ffa847d0c0f16098b78b5bc492857e1cb4","modified":1489571974000},{"_id":"source/_posts/note-javascript-variables-declared-with-the-scope-scope.md","hash":"16b64eb5582e34e4780037fcc3d579dcc9250c97","modified":1489571974000},{"_id":"source/_posts/note-jquery-and-d3js-some-of-these-differences.md","hash":"ca217ec01edd8e8815422235e94809c36d9a3787","modified":1489571974000},{"_id":"source/_posts/note-shapefile-to-geojson.md","hash":"e8710527da5ca50b2c3e2ad8a4639bf6aee5a910","modified":1489571974000},{"_id":"source/_posts/php-html5-canvas-resulting-base64-datauri-images-will-be-uploaded-to-the-server-side-processing.md","hash":"8eabe1d551357e3f65d4a3fecaba5885b3c007d8","modified":1489571974000},{"_id":"source/_posts/snippet-d3js-donuts-chart-the-transition-effect.md","hash":"7294a3e0aee079124262a4f9e3e1c05abfbcca25","modified":1489571974000},{"_id":"source/_posts/taipei-d3js-meetup-gathering-to-share-experiences.md","hash":"395cbc3779d1454c7075875575e099adc13bf2bf","modified":1489571974000},{"_id":"source/_posts/through-the-google-maps-api-geojson-data.md","hash":"d6cc8eef5462335534865653dbcad500197db93d","modified":1489571974000},{"_id":"source/_posts/use-d3js-to-create-responsive-histogram.md","hash":"4d6232541bf15ecb5b1ac8c25a1a8338aeec3c21","modified":1489571974000},{"_id":"source/_posts/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map.md","hash":"94c505ab4397f9041d069e5608a31c551dff9bbe","modified":1489571974000},{"_id":"source/_posts/using-google-fusion-table-without-writing-code-or-topic-maps.md","hash":"bc49d44de9abbb091f32c34a3e6e14bfd53bf987","modified":1489571974000},{"_id":"source/_posts/vuejs-in-v-for-through-the-filter-in-the-list-complete-search-and-page-functions.md","hash":"5a945182fbef5c3097bed49fe933c611e73e58e2","modified":1489571974000},{"_id":"source/_posts/利用-yarn-安裝-vue-cli.md","hash":"4b9bfcd37d630429085851a65fb591f1f0f48f49","modified":1489571974000},{"_id":"source/_posts/筆記-透過-Composition-Events-增強非拉丁語系輸入法對輸入框的支援.md","hash":"1c61e8014d4ac5bc3eb2b735d303328f67483077","modified":1489571974000},{"_id":"source/_posts/透過-VueCLI-建置專案時，自動切換-devtools-的-debug-環境.md","hash":"1edc45b4084d9662c1ca1154c4fac63883ad1d84","modified":1489571974000},{"_id":"source/categories/index.md","hash":"615f9ff8b2b2dcdb84f1600cc5075e67f8019cbc","modified":1489571974000},{"_id":"source/static/.DS_Store","hash":"79c80425dd7bc9f749d11225ec3b5bba0fac45f0","modified":1475234022000},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1467191779000},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1467191779000},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1467191776000},{"_id":"themes/maupassant/.git/index","hash":"187cfc08317996a953516970886f0f651258ee09","modified":1467191779000},{"_id":"themes/maupassant/.git/packed-refs","hash":"e3cb7fdef9a716ec7720ef1fc4fe71e6e900895e","modified":1467191779000},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1467191779000},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1467191779000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1467191779000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1467191779000},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1467191779000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1467191779000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1467191779000},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1467191779000},{"_id":"themes/maupassant/layout/base.jade","hash":"6af2f0978ba3bd75b5d1ca4120fcaf0b9bdaf74d","modified":1467271923000},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1467191779000},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1467191779000},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1467191779000},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1467191779000},{"_id":"source/static/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1481166582000},{"_id":"source/static/img/compositionEvent-compatibility.png","hash":"eb7701a699bb6cae2901aa66ff942cffb995bdc4","modified":1489571974000},{"_id":"source/static/img/google-autocompleted.png","hash":"6afb1789b0572c0b0af836872500065666782e29","modified":1489571974000},{"_id":"source/static/img/vue-instance.png","hash":"90cc0020a7b6bf26c714d50ce72e0cdfa2bebc0c","modified":1489571974000},{"_id":"source/static/img/vue-reactivity.png","hash":"cc11f04eb3226ae15573c4a6c91a93ae3338e13a","modified":1489571974000},{"_id":"source/static/img/vue-tool-disabled.png","hash":"bca3119389a7eee3d61c949493b110885dade808","modified":1489571974000},{"_id":"source/static/img/vue-tool-on.png","hash":"783ac3c68abb2d722ed28488d771bc0fe304203d","modified":1489571974000},{"_id":"source/static/img/vue1-watcher.png","hash":"71f8f2ffcbc1b59c0635fa1c77bfa02cf5219a26","modified":1489571974000},{"_id":"source/static/img/vue2-lifecycle.png","hash":"5c4875824adfbf897232017efc322ac5107b72dd","modified":1489571974000},{"_id":"source/static/img/yarn-logo.png","hash":"37ac6b11f2da560c24b2195ecc141f9093f806a8","modified":1489571974000},{"_id":"source/static/img/yarn-vue-2.png","hash":"164efdf202160cb21de7ad8eab44d4d3b6f6c0eb","modified":1489571974000},{"_id":"source/static/img/yarn-vue-3.png","hash":"56c04d7534e6d68edf36d6d12d919e169299418a","modified":1489571974000},{"_id":"source/static/img/yarn-vue-4.png","hash":"6981b67c28786849c004021fd9c984239e79c043","modified":1489571974000},{"_id":"source/static/img/yarn-vue-5.png","hash":"3eb27872cff06b67b005f3031ab7d38a344f9496","modified":1489571974000},{"_id":"source/static/img/yarn-vue-6.png","hash":"70a71ebe5c3afb6569b6287f8ce7f818d9c31408","modified":1489571974000},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1467191776000},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1467191776000},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1467191776000},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"8a8e5843a194b38cbd7d657565753b98e568a9c7","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1467191779000},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"c53ac5e5d44fa99705ae0e212435095e493ea65e","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1467191779000},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1467191779000},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1467191779000},{"_id":"themes/maupassant/source/css/style.scss","hash":"147241104d5c796ca67e2b179e349143f5344ebf","modified":1476327759000},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1467191779000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1467191779000},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1467191779000},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1467191779000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1467191779000},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1467191779000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1467191779000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1467191779000},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1467191779000},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1467191779000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1467191779000},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1467191779000},{"_id":"source/static/img/5xruby-vue.png","hash":"a3d30de2724ad3b1e31dbd4bbd27014933b514dd","modified":1489571974000},{"_id":"source/static/img/vue-migration-demo.png","hash":"c00ff2817aebd076818c0c9b1de8b18fa934d8a7","modified":1489571974000},{"_id":"source/static/img/vue-package-json.png","hash":"359b2723b2d51a289f57b41b689e6889d7e0e74a","modified":1489571974000},{"_id":"source/static/img/vue-tool-screenshot.png","hash":"4f53a9def091507349ef0408699f6d6b0396fb4a","modified":1489571974000},{"_id":"source/static/img/vue2-watcher.png","hash":"2cc49b8867932db950bb7d991b719e5ec6a6db4f","modified":1489571974000},{"_id":"source/static/img/yarn-vue-1.png","hash":"b33602f47f4f28883716dc12040d748924236af8","modified":1489571974000},{"_id":"source/static/img/composition-demo.png","hash":"52f5a390441d4e9930d640f73d2a89341fecb48c","modified":1489571974000},{"_id":"themes/maupassant/.git/objects/pack/pack-f1cac40526ae7e702e56b11e5a761caf7c6aeafc.idx","hash":"a0df65946914546fe003f60cd8885302ff68b91d","modified":1467191779000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"8f5cebc785d2fe0fb16a1cb94260b56963d4c19b","modified":1467191779000},{"_id":"source/static/img/vue2-rendering-flow.png","hash":"3ab495c0c8edc46c099ecf75834b87d54cd8adea","modified":1489571974000},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"8a8e5843a194b38cbd7d657565753b98e568a9c7","modified":1467191779000},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1467191779000},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"8a8e5843a194b38cbd7d657565753b98e568a9c7","modified":1467191779000},{"_id":"themes/maupassant/.git/objects/pack/pack-f1cac40526ae7e702e56b11e5a761caf7c6aeafc.pack","hash":"395de45216c9066e8ad0dd3491f57b206b8177ae","modified":1467191779000},{"_id":"public/categories/index.html","hash":"68349fcaaba852b48a13e92aec3040ddd8e1e793","modified":1489572141971},{"_id":"public/posts/2016/12/08/透過-VueCLI-建置專案時，自動切換-devtools-的-debug-環境/index.html","hash":"505c8190492837f47b3cec280ae03b095c4bb642","modified":1489572141971},{"_id":"public/posts/2016/10/13/利用-yarn-安裝-vue-cli/index.html","hash":"d85874a9204bcae29bf6285946465baac329536e","modified":1489572141971},{"_id":"public/posts/2016/10/11/筆記-透過-Composition-Events-增強非拉丁語系輸入法對輸入框的支援/index.html","hash":"daabb23c9becc50789ecc2f6cdf4e799b43a5e38","modified":1489572141971},{"_id":"public/posts/2016/09/30/Vue-2-0-升級小幫手-Vue-migration-helper/index.html","hash":"c7973bef423c06d125e7a229e1fd2a851dab60ad","modified":1489572141971},{"_id":"public/posts/2015/09/30/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map/index.html","hash":"889a2f29d5d09b103eeaf8408d9c380b5f1f8778","modified":1489572141971},{"_id":"public/posts/2015/06/18/taipei-d3js-meetup-gathering-to-share-experiences/index.html","hash":"53ecd33b9581cc7d5e64a4fca21fdd350ed797c6","modified":1489572141972},{"_id":"public/posts/2015/05/17/modern-webconf-2015-with-my-theme-d3-optimizing-two-or-three-things/index.html","hash":"9a7ee2fba85de9c39b02315f3de769f110cac561","modified":1489572141972},{"_id":"public/posts/2015/05/11/note-blocking-android-chrome-page-drop-down-automatically-restructure-page/index.html","hash":"065c821e14d092d9e38e7b24ebc165da2a88d233","modified":1489572141972},{"_id":"public/posts/2015/05/05/note-shapefile-to-geojson/index.html","hash":"79d18ad6b3b6ef967800a111cb20b93545ec0d09","modified":1489572141972},{"_id":"public/posts/2015/05/04/snippet-d3js-donuts-chart-the-transition-effect/index.html","hash":"abf2f80cfe2a647b41deddccf11fd078c7872a62","modified":1489572141972},{"_id":"public/posts/2015/04/22/note-jquery-and-d3js-some-of-these-differences/index.html","hash":"c7e18d09725faf8a4014722b30fb791314a32c7b","modified":1489572141972},{"_id":"public/posts/2014/08/08/google-map-infowindow-bubble-detection-box-is-opened/index.html","hash":"def2da880ef639aa5b0bbfa19cccc8e983f2231a","modified":1489572141972},{"_id":"public/archives/index.html","hash":"75b1a5737d62e6a3c66d916db52f5f0afa24c330","modified":1489572141972},{"_id":"public/archives/page/2/index.html","hash":"f44a70d6e52f8c7bf16a73e9fc9ce5046d0dab5c","modified":1489572141972},{"_id":"public/archives/page/3/index.html","hash":"dd2d4307a64c6598e5bc61554a2ec8d8f62bb31a","modified":1489572141972},{"_id":"public/archives/page/4/index.html","hash":"9fa9144f1b8c6c4e54d1c8ffb2ac87fcc0a9903a","modified":1489572141972},{"_id":"public/archives/page/5/index.html","hash":"e756b3d299f247cb91d9ddba78a9b4954a7662a4","modified":1489572141972},{"_id":"public/archives/2011/index.html","hash":"6f6ae128cf5797179172c7db9e8f1c448440d279","modified":1489572141972},{"_id":"public/archives/2011/11/index.html","hash":"6f6ae128cf5797179172c7db9e8f1c448440d279","modified":1489572141972},{"_id":"public/archives/2013/index.html","hash":"1a02aee595f584840110cb0362a4b98a3df0237e","modified":1489572141972},{"_id":"public/archives/2013/09/index.html","hash":"1a02aee595f584840110cb0362a4b98a3df0237e","modified":1489572141972},{"_id":"public/archives/2014/index.html","hash":"517cc7538e0457e448d082b9212e1a1cef4ad792","modified":1489572141972},{"_id":"public/archives/2014/08/index.html","hash":"517cc7538e0457e448d082b9212e1a1cef4ad792","modified":1489572141972},{"_id":"public/archives/2015/index.html","hash":"cf48ce541e73122c5d00be6b76af55b7f7b98815","modified":1489572141972},{"_id":"public/archives/2015/page/2/index.html","hash":"30130e4df4d13349d6cd190daf02c333060b85fe","modified":1489572141972},{"_id":"public/archives/2015/page/3/index.html","hash":"7ff76dd6943adfee92c47cac7dd7a3fc3364e039","modified":1489572141972},{"_id":"public/archives/2015/04/index.html","hash":"faab1983955190f377afe049169588490b7398ef","modified":1489572141973},{"_id":"public/archives/2015/05/index.html","hash":"713900012f365ffe5822f0ec126172f34667ba4a","modified":1489572141973},{"_id":"public/archives/2015/06/index.html","hash":"0d51c9f2c0d0429c9eefa91bb7e1604616e8159f","modified":1489572141973},{"_id":"public/archives/2015/07/index.html","hash":"ecf74748a99dd3e362fd2a251717696c5ac55dfa","modified":1489572141973},{"_id":"public/archives/2015/09/index.html","hash":"fdb8ff685f63a615d1a96a04b42d9348fc86641f","modified":1489572141973},{"_id":"public/archives/2015/10/index.html","hash":"823614cf307a49670247b7a9f1399cbcb4cb947c","modified":1489572141973},{"_id":"public/archives/2015/12/index.html","hash":"fab7e438df28853a551564b626a615bdfe6fff3c","modified":1489572141973},{"_id":"public/archives/2016/index.html","hash":"9bdd306a076420d2e119287b23075888f18887f1","modified":1489572141973},{"_id":"public/archives/2016/page/2/index.html","hash":"15e3ae3a9ef00ad995f4729813355c9f6403e4cc","modified":1489572141973},{"_id":"public/archives/2016/05/index.html","hash":"8b4bffffaad65c47015aabc565e1be9fd6e19d81","modified":1489572141973},{"_id":"public/archives/2016/09/index.html","hash":"81b2e0b369e557c341279b90386b8cc5ed25f523","modified":1489572141973},{"_id":"public/archives/2016/10/index.html","hash":"3dd347209a7a1ab809f463418154fc730058aaee","modified":1489572141973},{"_id":"public/archives/2016/12/index.html","hash":"45ab65d2c5a0bf0df212eb4f634119cc63bfcc32","modified":1489572141973},{"_id":"public/categories/vue-js/index.html","hash":"20359d9b63a780e1670dd0d54c73a354a5c0f46a","modified":1489572141973},{"_id":"public/categories/Google-Map/index.html","hash":"4f59ea91a413cacd8761fab839694263dbc091f6","modified":1489572141973},{"_id":"public/categories/D3-js/index.html","hash":"ce3402978c2628040f6de94f50e0a9a830007ebd","modified":1489572141973},{"_id":"public/categories/ECMAScript/index.html","hash":"a56abd43bf0719e4fa6c061e2e2d5fb56e5b301c","modified":1489572141973},{"_id":"public/categories/GIS/index.html","hash":"f257eee14b0592fc0fbd45a068ded209278fe789","modified":1489572141973},{"_id":"public/categories/ModernWebConf/index.html","hash":"ab9bdd324758fd9ddb2230713ac01da8786abd81","modified":1489572141973},{"_id":"public/categories/android/index.html","hash":"c98b215a0bc5e3ad736a94db10d1f44097e56f50","modified":1489572141973},{"_id":"public/categories/javascript/index.html","hash":"6382ac36092b28fc0a2655cfe7ab6df5ec43aabd","modified":1489572141973},{"_id":"public/categories/GeoJSON/index.html","hash":"a31c0dcdffffdbd6705319503eda2bf663e83489","modified":1489572141973},{"_id":"public/categories/HTML/index.html","hash":"ed9892f0120d3cdffd50e6c1233850d0633190dc","modified":1489572141973},{"_id":"public/categories/OpenData/index.html","hash":"98d2c4717662f1d6646f50e3872d28c8967e73a7","modified":1489572141973},{"_id":"public/index.html","hash":"db54d48ba9320bb8e1295b3e01db6267f237e285","modified":1489572141974},{"_id":"public/page/2/index.html","hash":"a50410e05a7a9819d2eacb6e4bb9b888d80e5834","modified":1489572141974},{"_id":"public/page/3/index.html","hash":"8297dc30c8900edf351e9ff5dc06bb2ddb667ce7","modified":1489572141974},{"_id":"public/page/4/index.html","hash":"45f2209075a7e894ccc7d26c5569a6eafa366eb4","modified":1489572141974},{"_id":"public/page/5/index.html","hash":"ffa0cca710a1c1faa2798e3900451316b27ca510","modified":1489572141974},{"_id":"public/tags/vue-js/index.html","hash":"20359d9b63a780e1670dd0d54c73a354a5c0f46a","modified":1489572141974},{"_id":"public/tags/google-map/index.html","hash":"976006d9fd986a1d775536f22ed1ca8edaa97fd4","modified":1489572141974},{"_id":"public/tags/google-map/page/2/index.html","hash":"ce8c03557325eb64ff6fa72682469758a79f34c7","modified":1489572141974},{"_id":"public/tags/Heatmap/index.html","hash":"ca551d5dcaacf8d74cf6d0d89a98fe77f3eb9805","modified":1489572141974},{"_id":"public/tags/d3-js/index.html","hash":"e01f84c1393d6b89a7f78948f0ba902b9cbc0b7d","modified":1489572141974},{"_id":"public/tags/Geocoder/index.html","hash":"522e9c2e1e4f150cd489b6c242ceb1c0cee08853","modified":1489572141974},{"_id":"public/tags/infoWindow/index.html","hash":"4aa2092ffe948c94ee7846a3d8cb3cb4d9d2bdc1","modified":1489572141974},{"_id":"public/tags/javascript/index.html","hash":"3b2122f6f54ccc846be7c97335b552b406778b0f","modified":1489572141974},{"_id":"public/tags/ecmascript/index.html","hash":"54e60a845e868873185c43e5ab9e02c6c7cc6899","modified":1489572141974},{"_id":"public/tags/twd97/index.html","hash":"e997cf0b9c8f447249a03b0bb6277db44dc92d60","modified":1489572141974},{"_id":"public/tags/gis/index.html","hash":"4032fb293a9305f24eec22c82375c247a9fb407c","modified":1489572141974},{"_id":"public/tags/opendata/index.html","hash":"634268e3bfded2209a6e882c34056e45dbd21b88","modified":1489572141974},{"_id":"public/tags/android/index.html","hash":"c98b215a0bc5e3ad736a94db10d1f44097e56f50","modified":1489572141974},{"_id":"public/tags/chrome/index.html","hash":"b9cc02e8c1e6ce900fbdeae19bb893058b9cb965","modified":1489572141974},{"_id":"public/tags/mobile/index.html","hash":"22c3dffa8456b378647014c58f73b8f2363350ef","modified":1489572141974},{"_id":"public/tags/jQuery/index.html","hash":"556073aeb1fad0473784b5dead8f319deaea9b10","modified":1489572141974},{"_id":"public/tags/html/index.html","hash":"3638a2f8c375d6bb82d050249dd1695518adaade","modified":1489572141974},{"_id":"public/tags/html5/index.html","hash":"707c3913eb088a629a4b0c0002ff572e2e356c2b","modified":1489572141974},{"_id":"public/tags/canvas/index.html","hash":"d14b5462d02a735f71dc967561704dd6df0a7a6b","modified":1489572141974},{"_id":"public/tags/php/index.html","hash":"a785618352ad33e8486211d9185fab9e05ec513a","modified":1489572141974},{"_id":"public/tags/D3-js/index.html","hash":"a1bf9c9c47a3b57ba69d6f335787faad998e3ea5","modified":1489572141974},{"_id":"public/tags/donut-chart/index.html","hash":"14605471927db30021003ecb88098cc4b8d276eb","modified":1489572141974},{"_id":"public/tags/GeoJSON/index.html","hash":"fa79946bd8d4c49607e8512c040e165f500536fe","modified":1489572141974},{"_id":"public/tags/rwd/index.html","hash":"88cfbf4259e25b979e4dcbb9712477b35d96aad3","modified":1489572141974},{"_id":"public/tags/Fusion-Table/index.html","hash":"4ee8190fa204f06be628738a818b2f1d38dc86fe","modified":1489572141974},{"_id":"public/tags/webpack/index.html","hash":"f98e468bb7ffcdae06ff04328b26e98d6ed5619c","modified":1489572141975},{"_id":"public/tags/devtools/index.html","hash":"6a0d964636b569e71142be83e5ca709ee9df11f2","modified":1489572141975},{"_id":"public/tags/events/index.html","hash":"ddb56412671803afe7052dd8389c6568718ad2d3","modified":1489572141975},{"_id":"public/posts/2016/10/05/VueJS-各種資料綁定-data-binding-的方式/index.html","hash":"913056b921490e13b56b6955932de6728b5f71f2","modified":1489572141975},{"_id":"public/posts/2016/10/03/VueJS-V1-與-V2-元件實體之差異/index.html","hash":"4b1d6b6687293ca4c5f34f4adfa636752577f6d6","modified":1489572141975},{"_id":"public/posts/2016/05/30/vuejs-in-v-for-through-the-filter-in-the-list-complete-search-and-page-functions/index.html","hash":"bb1f4b8e5e9f82332a6d44f089df8be110930702","modified":1489572141975},{"_id":"public/posts/2015/12/20/use-d3js-to-create-responsive-histogram/index.html","hash":"a7b6d754686c82e38b53c416214cf7bddd604bc7","modified":1489572141975},{"_id":"public/posts/2015/10/15/using-google-fusion-table-without-writing-code-or-topic-maps/index.html","hash":"533a7ccdd0e8d3a0d3db08c88e0874a404b43e5d","modified":1489572141975},{"_id":"public/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/index.html","hash":"1e72c30d1e21956b4328056448a9b68e5b491e23","modified":1489572141975},{"_id":"public/posts/2015/06/11/js-note-twd97-convert-to-longitude-and-latitude/index.html","hash":"1a08f8b3f9807a8cb1cad9c32fc39134f5c4f31d","modified":1489572141975},{"_id":"public/posts/2015/05/20/added-to-the-google-map-images-d3-2/index.html","hash":"e2c04bb85b59a1c71416e137a38db4b2899502db","modified":1489572141975},{"_id":"public/posts/2015/05/19/join-the-d3-in-google-map-image/index.html","hash":"e9f241d58c1cae6c1021b406374d4d54674462c0","modified":1489572141975},{"_id":"public/posts/2015/04/29/a-brief-talk-on-google-map-heat-map-api/index.html","hash":"e51dab4b06a5fc3fedb9867e8e8fa74a00ec5d3d","modified":1489572141975},{"_id":"public/posts/2015/04/28/through-the-google-maps-api-geojson-data/index.html","hash":"dc57b759f1f7b0fc21860388f4495f8160a13a47","modified":1489572141975},{"_id":"public/posts/2015/04/27/address-information-is-obtained-through-google-map-geocoder-with-the-latitude-and-longitude/index.html","hash":"f0c6a614ba46a34393e8ce2891baef699cc9d171","modified":1489572141975},{"_id":"public/posts/2013/09/08/php-html5-canvas-resulting-base64-datauri-images-will-be-uploaded-to-the-server-side-processing/index.html","hash":"173bf3ab9203c87c447be747dadaa7fe5380337a","modified":1489572141975},{"_id":"public/posts/2011/11/28/ecmascript-5-strict-mode/index.html","hash":"a6417153d5efac5fbd7b78869ef5b96fe54910b0","modified":1489572141975},{"_id":"public/CNAME","hash":"1104bf052238ea5883b201b90d66e5d67efac246","modified":1489572141996},{"_id":"public/static/img/compositionEvent-compatibility.png","hash":"eb7701a699bb6cae2901aa66ff942cffb995bdc4","modified":1489572141996},{"_id":"public/static/img/google-autocompleted.png","hash":"6afb1789b0572c0b0af836872500065666782e29","modified":1489572141996},{"_id":"public/static/img/vue-instance.png","hash":"90cc0020a7b6bf26c714d50ce72e0cdfa2bebc0c","modified":1489572141996},{"_id":"public/static/img/vue-reactivity.png","hash":"cc11f04eb3226ae15573c4a6c91a93ae3338e13a","modified":1489572141996},{"_id":"public/static/img/vue-tool-disabled.png","hash":"bca3119389a7eee3d61c949493b110885dade808","modified":1489572141996},{"_id":"public/static/img/vue-tool-on.png","hash":"783ac3c68abb2d722ed28488d771bc0fe304203d","modified":1489572141996},{"_id":"public/static/img/vue1-watcher.png","hash":"71f8f2ffcbc1b59c0635fa1c77bfa02cf5219a26","modified":1489572141996},{"_id":"public/static/img/vue2-lifecycle.png","hash":"5c4875824adfbf897232017efc322ac5107b72dd","modified":1489572141996},{"_id":"public/static/img/yarn-logo.png","hash":"37ac6b11f2da560c24b2195ecc141f9093f806a8","modified":1489572141996},{"_id":"public/static/img/yarn-vue-2.png","hash":"164efdf202160cb21de7ad8eab44d4d3b6f6c0eb","modified":1489572141996},{"_id":"public/static/img/yarn-vue-3.png","hash":"56c04d7534e6d68edf36d6d12d919e169299418a","modified":1489572141996},{"_id":"public/static/img/yarn-vue-4.png","hash":"6981b67c28786849c004021fd9c984239e79c043","modified":1489572141996},{"_id":"public/static/img/yarn-vue-5.png","hash":"3eb27872cff06b67b005f3031ab7d38a344f9496","modified":1489572141996},{"_id":"public/static/img/yarn-vue-6.png","hash":"70a71ebe5c3afb6569b6287f8ce7f818d9c31408","modified":1489572141996},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489572141996},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489572141996},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489572141997},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489572141997},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489572141997},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489572141997},{"_id":"public/static/img/5xruby-vue.png","hash":"a3d30de2724ad3b1e31dbd4bbd27014933b514dd","modified":1489572142037},{"_id":"public/static/img/vue-package-json.png","hash":"359b2723b2d51a289f57b41b689e6889d7e0e74a","modified":1489572142041},{"_id":"public/static/img/vue-migration-demo.png","hash":"c00ff2817aebd076818c0c9b1de8b18fa934d8a7","modified":1489572142041},{"_id":"public/static/img/vue-tool-screenshot.png","hash":"4f53a9def091507349ef0408699f6d6b0396fb4a","modified":1489572142041},{"_id":"public/static/img/yarn-vue-1.png","hash":"b33602f47f4f28883716dc12040d748924236af8","modified":1489572142041},{"_id":"public/static/img/vue2-watcher.png","hash":"2cc49b8867932db950bb7d991b719e5ec6a6db4f","modified":1489572142041},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1489572142049},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1489572142049},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1489572142049},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1489572142049},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1489572142049},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1489572142049},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1489572142049},{"_id":"public/css/style.css","hash":"2fdc17a97b031cd61feff903f35673554840d73c","modified":1489572142049},{"_id":"public/static/img/composition-demo.png","hash":"52f5a390441d4e9930d640f73d2a89341fecb48c","modified":1489572142051},{"_id":"public/static/img/vue2-rendering-flow.png","hash":"3ab495c0c8edc46c099ecf75834b87d54cd8adea","modified":1489572142053}],"Category":[{"name":"vue.js","_id":"cj0assjo000032kt4xf8qnjtr"},{"name":"Google Map","_id":"cj0assjof000k2kt42rc1bp40"},{"name":"D3.js","_id":"cj0assjoh000q2kt4yeayg1cp"},{"name":"ECMAScript","_id":"cj0assjoo00172kt4yqwx46f8"},{"name":"GIS","_id":"cj0assjot001l2kt4mxlkhhny"},{"name":"ModernWebConf","_id":"cj0assjoz001u2kt4ym24jhhi"},{"name":"android","_id":"cj0assjp100222kt4his7gpih"},{"name":"javascript","_id":"cj0assjp300292kt4t416rbci"},{"name":"GeoJSON","_id":"cj0assjp5002d2kt4iriwcc3k"},{"name":"HTML","_id":"cj0assjp6002k2kt481nkv5a6"},{"name":"OpenData","_id":"cj0assjp6002o2kt4c5cbwp6q"}],"Data":[],"Page":[{"title":"categories","date":"2016-06-29T03:51:13.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-29 11:51:13\n---\n","updated":"2017-03-15T09:59:34.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj0assjnx00012kt4ak7hu825","content":"","excerpt":"","more":""}],"Post":[{"title":"VueJS 2.0 升級小幫手: Vue migration helper","date":"2016-09-30T14:38:01.000Z","comments":1,"_content":"\nVue JS 自今年四月 (2016/04) 發佈 Vue 2.0 preview 版本至今也有五個月了，在新舊版本的交替之中，開發者最關心的一定是「**我的專案能不能升到 Vue 2.0**」、「**升上去會不會爆**」、「**專案該用那個版本來開發**」，<del>「聽說隔壁那個 ng 升級幾乎等於砍掉重練」</del> 之類的問題。\n\n不過幸好，Vue 1.0 與 Vue 2.0 有 90% 的 API 是相同的，過去在 Vue 1.x 的核心概念到 Vue 2.0 一樣可以沿用，而且又多了些新特性。\n\n這裡有一份官方的[升級建議](http://rc.vuejs.org/guide/migration.html \"Migration from Vue 1.x\")，有點長，如果沒有耐心讀的話，沒關係，這裡介紹你好物: <br> **<span style=\"color: #f00;\">Vue migration helper</span>**。\n\n傳說中的升級小幫手 Vue migration helper: https://github.com/vuejs/vue-migration-helper\n\n使用方式很簡單，打開 terminal 透過 npm 安裝後，在你的專案目錄下執行 vue-migration-helper，小幫手就會幫你掃描整份專案，然後給你修改的建議了。\n\n完整的安裝與使用方式：\n```\n# install\n$ npm install --global git://github.com/vuejs/vue-migration-helper.git\n\n# navigate to a Vue 1.x project directory\n$ cd path/to/my-vue-project\n\n# scan all files in the current directory\n$ vue-migration-helper\n```\n\n拿之前的某份範例試試，就像這樣：\n\n<del>花惹發</del>，滿坑滿谷的升級建議\n![migration](/static/img/vue-migration-demo.png)\n\n依照 migration helper 給的建議一一修正後，再次執行專案，檢查一下 console，是否有噴錯，如果沒有錯誤，那麼專案的升級也就差不多了。\n\n不過要注意，目前 Vue migration helper 還在 beta 階段，如果未來要再更新至新版的話，直接再次執行 `npm install --global git://github.com/vuejs/vue-migration-helper.git` 重新安裝一次就好。\n\n最後，鄉親啊，如果你正要開啟新專案，建議現在就可以直接從 Vue 2.0 進入喔！\n","source":"_posts/Vue-2-0-升級小幫手-Vue-migration-helper.md","raw":"---\ntitle: 'VueJS 2.0 升級小幫手: Vue migration helper'\ndate: 2016-09-30 22:38:01\ncomments: true\ncategories: [vue.js]\ntags: [vue.js]\n---\n\nVue JS 自今年四月 (2016/04) 發佈 Vue 2.0 preview 版本至今也有五個月了，在新舊版本的交替之中，開發者最關心的一定是「**我的專案能不能升到 Vue 2.0**」、「**升上去會不會爆**」、「**專案該用那個版本來開發**」，<del>「聽說隔壁那個 ng 升級幾乎等於砍掉重練」</del> 之類的問題。\n\n不過幸好，Vue 1.0 與 Vue 2.0 有 90% 的 API 是相同的，過去在 Vue 1.x 的核心概念到 Vue 2.0 一樣可以沿用，而且又多了些新特性。\n\n這裡有一份官方的[升級建議](http://rc.vuejs.org/guide/migration.html \"Migration from Vue 1.x\")，有點長，如果沒有耐心讀的話，沒關係，這裡介紹你好物: <br> **<span style=\"color: #f00;\">Vue migration helper</span>**。\n\n傳說中的升級小幫手 Vue migration helper: https://github.com/vuejs/vue-migration-helper\n\n使用方式很簡單，打開 terminal 透過 npm 安裝後，在你的專案目錄下執行 vue-migration-helper，小幫手就會幫你掃描整份專案，然後給你修改的建議了。\n\n完整的安裝與使用方式：\n```\n# install\n$ npm install --global git://github.com/vuejs/vue-migration-helper.git\n\n# navigate to a Vue 1.x project directory\n$ cd path/to/my-vue-project\n\n# scan all files in the current directory\n$ vue-migration-helper\n```\n\n拿之前的某份範例試試，就像這樣：\n\n<del>花惹發</del>，滿坑滿谷的升級建議\n![migration](/static/img/vue-migration-demo.png)\n\n依照 migration helper 給的建議一一修正後，再次執行專案，檢查一下 console，是否有噴錯，如果沒有錯誤，那麼專案的升級也就差不多了。\n\n不過要注意，目前 Vue migration helper 還在 beta 階段，如果未來要再更新至新版的話，直接再次執行 `npm install --global git://github.com/vuejs/vue-migration-helper.git` 重新安裝一次就好。\n\n最後，鄉親啊，如果你正要開啟新專案，建議現在就可以直接從 Vue 2.0 進入喔！\n","slug":"Vue-2-0-升級小幫手-Vue-migration-helper","published":1,"updated":"2017-03-15T09:59:34.000Z","layout":"post","photos":[],"link":"","_id":"cj0assjnu00002kt4x1m03pt2","content":"<p>Vue JS 自今年四月 (2016/04) 發佈 Vue 2.0 preview 版本至今也有五個月了，在新舊版本的交替之中，開發者最關心的一定是「<strong>我的專案能不能升到 Vue 2.0</strong>」、「<strong>升上去會不會爆</strong>」、「<strong>專案該用那個版本來開發</strong>」，<del>「聽說隔壁那個 ng 升級幾乎等於砍掉重練」</del> 之類的問題。</p>\n<p>不過幸好，Vue 1.0 與 Vue 2.0 有 90% 的 API 是相同的，過去在 Vue 1.x 的核心概念到 Vue 2.0 一樣可以沿用，而且又多了些新特性。</p>\n<p>這裡有一份官方的<a href=\"http://rc.vuejs.org/guide/migration.html\" title=\"Migration from Vue 1.x\" target=\"_blank\" rel=\"external\">升級建議</a>，有點長，如果沒有耐心讀的話，沒關係，這裡介紹你好物: <br> <strong><span style=\"color: #f00;\">Vue migration helper</span></strong>。</p>\n<p>傳說中的升級小幫手 Vue migration helper: <a href=\"https://github.com/vuejs/vue-migration-helper\" target=\"_blank\" rel=\"external\">https://github.com/vuejs/vue-migration-helper</a></p>\n<p>使用方式很簡單，打開 terminal 透過 npm 安裝後，在你的專案目錄下執行 vue-migration-helper，小幫手就會幫你掃描整份專案，然後給你修改的建議了。</p>\n<p>完整的安裝與使用方式：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># install</div><div class=\"line\">$ npm install --global git://github.com/vuejs/vue-migration-helper.git</div><div class=\"line\"></div><div class=\"line\"># navigate to a Vue 1.x project directory</div><div class=\"line\">$ cd path/to/my-vue-project</div><div class=\"line\"></div><div class=\"line\"># scan all files in the current directory</div><div class=\"line\">$ vue-migration-helper</div></pre></td></tr></table></figure></p>\n<p>拿之前的某份範例試試，就像這樣：</p>\n<p><del>花惹發</del>，滿坑滿谷的升級建議\n<img src=\"/static/img/vue-migration-demo.png\" alt=\"migration\"></p>\n<p>依照 migration helper 給的建議一一修正後，再次執行專案，檢查一下 console，是否有噴錯，如果沒有錯誤，那麼專案的升級也就差不多了。</p>\n<p>不過要注意，目前 Vue migration helper 還在 beta 階段，如果未來要再更新至新版的話，直接再次執行 <code>npm install --global git://github.com/vuejs/vue-migration-helper.git</code> 重新安裝一次就好。</p>\n<p>最後，鄉親啊，如果你正要開啟新專案，建議現在就可以直接從 Vue 2.0 進入喔！</p>\n","excerpt":"","more":"<p>Vue JS 自今年四月 (2016/04) 發佈 Vue 2.0 preview 版本至今也有五個月了，在新舊版本的交替之中，開發者最關心的一定是「<strong>我的專案能不能升到 Vue 2.0</strong>」、「<strong>升上去會不會爆</strong>」、「<strong>專案該用那個版本來開發</strong>」，<del>「聽說隔壁那個 ng 升級幾乎等於砍掉重練」</del> 之類的問題。</p>\n<p>不過幸好，Vue 1.0 與 Vue 2.0 有 90% 的 API 是相同的，過去在 Vue 1.x 的核心概念到 Vue 2.0 一樣可以沿用，而且又多了些新特性。</p>\n<p>這裡有一份官方的<a href=\"http://rc.vuejs.org/guide/migration.html\" title=\"Migration from Vue 1.x\">升級建議</a>，有點長，如果沒有耐心讀的話，沒關係，這裡介紹你好物: <br> <strong><span style=\"color: #f00;\">Vue migration helper</span></strong>。</p>\n<p>傳說中的升級小幫手 Vue migration helper: <a href=\"https://github.com/vuejs/vue-migration-helper\">https://github.com/vuejs/vue-migration-helper</a></p>\n<p>使用方式很簡單，打開 terminal 透過 npm 安裝後，在你的專案目錄下執行 vue-migration-helper，小幫手就會幫你掃描整份專案，然後給你修改的建議了。</p>\n<p>完整的安裝與使用方式：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"># install</div><div class=\"line\">$ npm install --global git://github.com/vuejs/vue-migration-helper.git</div><div class=\"line\"></div><div class=\"line\"># navigate to a Vue 1.x project directory</div><div class=\"line\">$ cd path/to/my-vue-project</div><div class=\"line\"></div><div class=\"line\"># scan all files in the current directory</div><div class=\"line\">$ vue-migration-helper</div></pre></td></tr></table></figure></p>\n<p>拿之前的某份範例試試，就像這樣：</p>\n<p><del>花惹發</del>，滿坑滿谷的升級建議\n<img src=\"/static/img/vue-migration-demo.png\" alt=\"migration\"></p>\n<p>依照 migration helper 給的建議一一修正後，再次執行專案，檢查一下 console，是否有噴錯，如果沒有錯誤，那麼專案的升級也就差不多了。</p>\n<p>不過要注意，目前 Vue migration helper 還在 beta 階段，如果未來要再更新至新版的話，直接再次執行 <code>npm install --global git://github.com/vuejs/vue-migration-helper.git</code> 重新安裝一次就好。</p>\n<p>最後，鄉親啊，如果你正要開啟新專案，建議現在就可以直接從 Vue 2.0 進入喔！</p>\n"},{"title":"[VueJS] V1 與 V2 元件實體之差異","date":"2016-10-03T10:20:01.000Z","comments":1,"_content":"\n狂賀！ [Vue 2.0](https://github.com/vuejs/vue/releases/tag/v2.0.0 \"Vue 2.0\") 終於正式發佈！\n\n關於 Vue 2.0 的新特性，作者也在官方 Blog - [Vue 2.0 is Here!](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.n0m3yjfmp \"Vue 2.0 is Here!\") ([中文翻譯](http://jiongks.name/blog/vue-2-is-here/ \"Vue 2.0 来了！\")) 一文中敘述地相當詳細，這裡就不多說。\n\n如果你也與我一樣是從 V1 就開始接觸的開發者，一定都知道 VueJS 最核心的一部分是 Component，而 Component 是由實體 (Vue Instance) 來實作。\n在這篇文章，我們就來談談 Vue 1.x 與 2.x 元件實體的差異。\n\n<hr>\n\n### Vue 2.0 元件實體註冊\n\n<img alt=\"tree of components\" src=\"/static/img/Vue-instance.png\">\n\n像上面這樣的網站，我們可以將它抽象化為一棵「元件樹」，而每個元件樹都會有個根節點，或稱為根實體 (root Vue instance)。\n\n那麼，每個 Vue 元件樹的根實體其實是透過 `Vue` 這個建構函式所產生：\n\n``` javascript\nvar vm = new Vue({\n  // options\n});\n```\n\n將 Vue 元件與實體 DOM 結合的方式有兩種，一種是直接寫在 `el` option 內：\n\n``` javascript\nvar vm = new Vue({\n  el: '#app'\n});\n```\n\n而另一種方式則是透過 `$mount` 來指定節點：\n``` javascript\nvar vm = new Vue({\n  // options without 'el'\n});\n\nvm.$mount('#app');\n```\n\n這部分跟 Vue 1.x 的註冊是完全一樣的，但是需要注意的是，在 vue 1.x 允許開發者以 `<body>` 或 `<html>` 作為根實體的掛載點，\n但<span style=\"color: #f00\">到了 VueJS 2.0 後，只能透過 **獨立的節點掛載** </span>，如: div 等。 否則會產生錯誤，警告訊息如下：\n\n```\n“Do not mount Vue to <html> or <body> - mount to normal elements instead.“\n```\n\n換成用獨立的 DOM 節點，如 `<div id=\"app\"></div>`，就可以正常運作了。\n\n<hr>\n\n### Vue 2.0 元件實體的生命週期\n\n<img alt=\"Vue 2.0 Lifecycle Diagram\" title=\"Vue 2.0 Lifecycle Diagram\" src=\"/static/img/vue2-lifecycle.png\" height=\"400\">\n<span style=\"font-size: 12px;\">圖片來源： [Vue 2.0 Guide: Instance Lifecycle Hooks](http://vuejs.org/guide/instance.html#Instance-Lifecycle-Hooks)</span>\n\n基本上 Vue 2.0 實體生命週期中，大部分的階段都與 Vue 1.x 是一樣的，最大的不同在於 lifecycle hook 名稱的改變，以及在元件被掛載 `mounted` 之後，還新增了 `beforeUpdate` 以及 `updated` 這兩組偵測更新的 hook。\n\nvue 1.x 的 `init` 變成 `beforeCreate` ， `beforeCompiled` 改為 `beforeMount`。 而原本的 `complied` 與 `ready` 則是統一收斂成 `mounted`。\n\n另外需要注意的是，<span style=\"color: #f00\">**若元件本身是透過 server-side rendering 的話，除了 `beforeCreate` 以及 `created` 以外的所有 hook 都不會被呼叫**</span>  [(參考資料)](https://vuejs.org/api/#Options-Lifecycle-Hooks)。\n\n有關元件 V-DOM 的重新渲染與更新後面再提，其他部分則與 Vue 1.x 大同小異。\n\n<hr>\n### Vue 2.0 元件與模板的編譯 - Render Function\n\n在大部分情況下，透過元件的 `template` 屬性，或是直接寫在 HTML 中就已經足夠操作你的元件了。\n不過若是你想完全透過 JavaScript 來操作你的元件，那麼可以使用 render 這個 function 直接來寫底層的 virtual-DOM 來取代 `template` 屬性。\nVueJS 2.0 的 virtual DOM 機制，是採用 [snabbdom](https://github.com/snabbdom/snabbdom \"snabbdom\") 這個 virtual DOM 的 library 來實作的。\n\n可以使用 `createElement` 這個 function 來建立你的元件內容：\n``` javascript\n// @returns {VNode}\ncreateElement(\n  // {String | Object | Function}\n  // An HTML tag name, component options, or function\n  // returning one of these. Required.\n  'div',\n  // {Object}\n  // A data object corresponding to the attributes\n  // you would use in a template. Optional.\n  {\n    // (see details in the next section below)\n  },\n  // {String | Array}\n  // Children VNodes. Optional.\n  [\n    createElement('h1', 'hello world')\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foo'\n      }\n    }),\n    'bar'\n  ]\n)\n```\n\n官方也提供了一個完整的 render function 範例：\n``` javascript\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n當然，你可能跟我一樣覺得一層又一層的 `createElement` 看了總是讓人厭煩，你也可以透過這個 Plugin: [babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)，來做 JSX 語法的轉換，如果你曾是 react 應用程式的開發者，應該對 JSX 語法不陌生。 寫起來會像這樣：\n\n``` javascript\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n在預設情況中，VueJS 2.0 會將 `template` 內的 HTML 透過 parse 轉換成 AST，再自動轉換優化成 render function 去建立 virtual DOM。 在建立 virtual DOM 之後，透過 observe 機制與資料進行綁定，再 compile 成實體的 DOM 並渲染至網頁上：\n\n<img src=\"/static/img/vue2-rendering-flow.png\">\n<span style=\"font-size: 12px;\">參考資料與圖片來源： [Next Vue.js 2.0 by kazupon](https://speakerdeck.com/kazupon/next-vue-dot-js-2-dot-0)</span>\n\n\n前面說過，VueJS 2.0 會將 `template` 內的 HTML 自動編譯成 render function，下面這是官方文件以 `Vue.compile` 提供的 demo：\n\n``` html\n<!-- template -->\n<div>\n  <h1>I'm a template!</h1>\n  <p v-if=\"message\">\n    {{ message }}\n  </p>\n  <p v-else>\n    No message.\n  </p>\n</div>\n```\n\n``` javascript\n// render:\nfunction anonymous() {\n  with(this){return _h('div',[_m(0),(message)?_h('p',[_s(message)]):_h('p',[\"No message.\"])])}\n}\n```\n\n``` javascript\n// staticRenderFns:\n_m(0): function anonymous() {\n  with(this){return _h('h1',[\"I'm a template!\"])}\n}\n```\n\n\n<hr>\n### Vue 2.0 元件的追蹤變化\n\n最後，我們來看看元件內狀態的追蹤變化。有寫過 VueJS 1.x 的朋友應該知道，元件實體內有個 option 叫 `data`，\n這個 `data` 物件就是用來存放元件內狀態/資料的地方。\n\n與 Vue 1.x 相同的地方是，`data` 物件透過 `Object.defineProperty()` 來為元件內各屬性設定 「getter」與「setter」。\n就在 data 屬性被存取修改時，會透過 getter/setter 來通知物件內屬性的變化，當先前設定好的 setter 被呼叫的時候，會去觸發 watcher 重新計算，也就會導致 DOM 的更新與重新渲染。\n\n\n與 Vue 1.x 不同的是，Vue 1.x 是透過 directive 來重新渲染 DOM 內容：\n\n<img src=\"/static/img/vue1-watcher.png\">\n\n而 Vue 2.0 在通知 watcher 更新時，會去呼叫前面介紹的 「render function」與更新後的 data 去做更新後再次渲染，概念與 1.x 大致相同。\n但更新 DOM 的手法不同，減少了不必要的比對，也因此大幅度提升了效能。\n\n<img src=\"/static/img/vue2-watcher.png\">\n","source":"_posts/VueJS-V1-與-V2-元件實體之差異.md","raw":"---\ntitle: '[VueJS] V1 與 V2 元件實體之差異'\ndate: 2016-10-03 18:20:01\ncomments: true\ncategories: [vue.js]\ntags: [vue.js]\n---\n\n狂賀！ [Vue 2.0](https://github.com/vuejs/vue/releases/tag/v2.0.0 \"Vue 2.0\") 終於正式發佈！\n\n關於 Vue 2.0 的新特性，作者也在官方 Blog - [Vue 2.0 is Here!](https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.n0m3yjfmp \"Vue 2.0 is Here!\") ([中文翻譯](http://jiongks.name/blog/vue-2-is-here/ \"Vue 2.0 来了！\")) 一文中敘述地相當詳細，這裡就不多說。\n\n如果你也與我一樣是從 V1 就開始接觸的開發者，一定都知道 VueJS 最核心的一部分是 Component，而 Component 是由實體 (Vue Instance) 來實作。\n在這篇文章，我們就來談談 Vue 1.x 與 2.x 元件實體的差異。\n\n<hr>\n\n### Vue 2.0 元件實體註冊\n\n<img alt=\"tree of components\" src=\"/static/img/Vue-instance.png\">\n\n像上面這樣的網站，我們可以將它抽象化為一棵「元件樹」，而每個元件樹都會有個根節點，或稱為根實體 (root Vue instance)。\n\n那麼，每個 Vue 元件樹的根實體其實是透過 `Vue` 這個建構函式所產生：\n\n``` javascript\nvar vm = new Vue({\n  // options\n});\n```\n\n將 Vue 元件與實體 DOM 結合的方式有兩種，一種是直接寫在 `el` option 內：\n\n``` javascript\nvar vm = new Vue({\n  el: '#app'\n});\n```\n\n而另一種方式則是透過 `$mount` 來指定節點：\n``` javascript\nvar vm = new Vue({\n  // options without 'el'\n});\n\nvm.$mount('#app');\n```\n\n這部分跟 Vue 1.x 的註冊是完全一樣的，但是需要注意的是，在 vue 1.x 允許開發者以 `<body>` 或 `<html>` 作為根實體的掛載點，\n但<span style=\"color: #f00\">到了 VueJS 2.0 後，只能透過 **獨立的節點掛載** </span>，如: div 等。 否則會產生錯誤，警告訊息如下：\n\n```\n“Do not mount Vue to <html> or <body> - mount to normal elements instead.“\n```\n\n換成用獨立的 DOM 節點，如 `<div id=\"app\"></div>`，就可以正常運作了。\n\n<hr>\n\n### Vue 2.0 元件實體的生命週期\n\n<img alt=\"Vue 2.0 Lifecycle Diagram\" title=\"Vue 2.0 Lifecycle Diagram\" src=\"/static/img/vue2-lifecycle.png\" height=\"400\">\n<span style=\"font-size: 12px;\">圖片來源： [Vue 2.0 Guide: Instance Lifecycle Hooks](http://vuejs.org/guide/instance.html#Instance-Lifecycle-Hooks)</span>\n\n基本上 Vue 2.0 實體生命週期中，大部分的階段都與 Vue 1.x 是一樣的，最大的不同在於 lifecycle hook 名稱的改變，以及在元件被掛載 `mounted` 之後，還新增了 `beforeUpdate` 以及 `updated` 這兩組偵測更新的 hook。\n\nvue 1.x 的 `init` 變成 `beforeCreate` ， `beforeCompiled` 改為 `beforeMount`。 而原本的 `complied` 與 `ready` 則是統一收斂成 `mounted`。\n\n另外需要注意的是，<span style=\"color: #f00\">**若元件本身是透過 server-side rendering 的話，除了 `beforeCreate` 以及 `created` 以外的所有 hook 都不會被呼叫**</span>  [(參考資料)](https://vuejs.org/api/#Options-Lifecycle-Hooks)。\n\n有關元件 V-DOM 的重新渲染與更新後面再提，其他部分則與 Vue 1.x 大同小異。\n\n<hr>\n### Vue 2.0 元件與模板的編譯 - Render Function\n\n在大部分情況下，透過元件的 `template` 屬性，或是直接寫在 HTML 中就已經足夠操作你的元件了。\n不過若是你想完全透過 JavaScript 來操作你的元件，那麼可以使用 render 這個 function 直接來寫底層的 virtual-DOM 來取代 `template` 屬性。\nVueJS 2.0 的 virtual DOM 機制，是採用 [snabbdom](https://github.com/snabbdom/snabbdom \"snabbdom\") 這個 virtual DOM 的 library 來實作的。\n\n可以使用 `createElement` 這個 function 來建立你的元件內容：\n``` javascript\n// @returns {VNode}\ncreateElement(\n  // {String | Object | Function}\n  // An HTML tag name, component options, or function\n  // returning one of these. Required.\n  'div',\n  // {Object}\n  // A data object corresponding to the attributes\n  // you would use in a template. Optional.\n  {\n    // (see details in the next section below)\n  },\n  // {String | Array}\n  // Children VNodes. Optional.\n  [\n    createElement('h1', 'hello world')\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foo'\n      }\n    }),\n    'bar'\n  ]\n)\n```\n\n官方也提供了一個完整的 render function 範例：\n``` javascript\nvar getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})\n```\n\n當然，你可能跟我一樣覺得一層又一層的 `createElement` 看了總是讓人厭煩，你也可以透過這個 Plugin: [babel-plugin-transform-vue-jsx](https://github.com/vuejs/babel-plugin-transform-vue-jsx)，來做 JSX 語法的轉換，如果你曾是 react 應用程式的開發者，應該對 JSX 語法不陌生。 寫起來會像這樣：\n\n``` javascript\nimport AnchoredHeading from './AnchoredHeading.vue'\n\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      <AnchoredHeading level={1}>\n        <span>Hello</span> world!\n      </AnchoredHeading>\n    )\n  }\n})\n```\n在預設情況中，VueJS 2.0 會將 `template` 內的 HTML 透過 parse 轉換成 AST，再自動轉換優化成 render function 去建立 virtual DOM。 在建立 virtual DOM 之後，透過 observe 機制與資料進行綁定，再 compile 成實體的 DOM 並渲染至網頁上：\n\n<img src=\"/static/img/vue2-rendering-flow.png\">\n<span style=\"font-size: 12px;\">參考資料與圖片來源： [Next Vue.js 2.0 by kazupon](https://speakerdeck.com/kazupon/next-vue-dot-js-2-dot-0)</span>\n\n\n前面說過，VueJS 2.0 會將 `template` 內的 HTML 自動編譯成 render function，下面這是官方文件以 `Vue.compile` 提供的 demo：\n\n``` html\n<!-- template -->\n<div>\n  <h1>I'm a template!</h1>\n  <p v-if=\"message\">\n    {{ message }}\n  </p>\n  <p v-else>\n    No message.\n  </p>\n</div>\n```\n\n``` javascript\n// render:\nfunction anonymous() {\n  with(this){return _h('div',[_m(0),(message)?_h('p',[_s(message)]):_h('p',[\"No message.\"])])}\n}\n```\n\n``` javascript\n// staticRenderFns:\n_m(0): function anonymous() {\n  with(this){return _h('h1',[\"I'm a template!\"])}\n}\n```\n\n\n<hr>\n### Vue 2.0 元件的追蹤變化\n\n最後，我們來看看元件內狀態的追蹤變化。有寫過 VueJS 1.x 的朋友應該知道，元件實體內有個 option 叫 `data`，\n這個 `data` 物件就是用來存放元件內狀態/資料的地方。\n\n與 Vue 1.x 相同的地方是，`data` 物件透過 `Object.defineProperty()` 來為元件內各屬性設定 「getter」與「setter」。\n就在 data 屬性被存取修改時，會透過 getter/setter 來通知物件內屬性的變化，當先前設定好的 setter 被呼叫的時候，會去觸發 watcher 重新計算，也就會導致 DOM 的更新與重新渲染。\n\n\n與 Vue 1.x 不同的是，Vue 1.x 是透過 directive 來重新渲染 DOM 內容：\n\n<img src=\"/static/img/vue1-watcher.png\">\n\n而 Vue 2.0 在通知 watcher 更新時，會去呼叫前面介紹的 「render function」與更新後的 data 去做更新後再次渲染，概念與 1.x 大致相同。\n但更新 DOM 的手法不同，減少了不必要的比對，也因此大幅度提升了效能。\n\n<img src=\"/static/img/vue2-watcher.png\">\n","slug":"VueJS-V1-與-V2-元件實體之差異","published":1,"updated":"2017-03-15T09:59:34.000Z","layout":"post","photos":[],"link":"","_id":"cj0assjny00022kt4gw0r83p4","content":"<p>狂賀！ <a href=\"https://github.com/vuejs/vue/releases/tag/v2.0.0\" title=\"Vue 2.0\" target=\"_blank\" rel=\"external\">Vue 2.0</a> 終於正式發佈！</p>\n<p>關於 Vue 2.0 的新特性，作者也在官方 Blog - <a href=\"https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.n0m3yjfmp\" title=\"Vue 2.0 is Here!\" target=\"_blank\" rel=\"external\">Vue 2.0 is Here!</a> (<a href=\"http://jiongks.name/blog/vue-2-is-here/\" title=\"Vue 2.0 来了！\" target=\"_blank\" rel=\"external\">中文翻譯</a>) 一文中敘述地相當詳細，這裡就不多說。</p>\n<p>如果你也與我一樣是從 V1 就開始接觸的開發者，一定都知道 VueJS 最核心的一部分是 Component，而 Component 是由實體 (Vue Instance) 來實作。\n在這篇文章，我們就來談談 Vue 1.x 與 2.x 元件實體的差異。</p>\n<hr>\n\n<h3 id=\"Vue-2-0-元件實體註冊\"><a href=\"#Vue-2-0-元件實體註冊\" class=\"headerlink\" title=\"Vue 2.0 元件實體註冊\"></a>Vue 2.0 元件實體註冊</h3><p><img alt=\"tree of components\" src=\"/static/img/Vue-instance.png\"></p>\n<p>像上面這樣的網站，我們可以將它抽象化為一棵「元件樹」，而每個元件樹都會有個根節點，或稱為根實體 (root Vue instance)。</p>\n<p>那麼，每個 Vue 元件樹的根實體其實是透過 <code>Vue</code> 這個建構函式所產生：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>將 Vue 元件與實體 DOM 結合的方式有兩種，一種是直接寫在 <code>el</code> option 內：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>而另一種方式則是透過 <code>$mount</code> 來指定節點：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options without 'el'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">vm.$mount(<span class=\"string\">'#app'</span>);</div></pre></td></tr></table></figure></p>\n<p>這部分跟 Vue 1.x 的註冊是完全一樣的，但是需要注意的是，在 vue 1.x 允許開發者以 <code>&lt;body&gt;</code> 或 <code>&lt;html&gt;</code> 作為根實體的掛載點，\n但<span style=\"color: #f00\">到了 VueJS 2.0 後，只能透過 <strong>獨立的節點掛載</strong> </span>，如: div 等。 否則會產生錯誤，警告訊息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">“Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.“</div></pre></td></tr></table></figure>\n<p>換成用獨立的 DOM 節點，如 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，就可以正常運作了。</p>\n<hr>\n\n<h3 id=\"Vue-2-0-元件實體的生命週期\"><a href=\"#Vue-2-0-元件實體的生命週期\" class=\"headerlink\" title=\"Vue 2.0 元件實體的生命週期\"></a>Vue 2.0 元件實體的生命週期</h3><p><img alt=\"Vue 2.0 Lifecycle Diagram\" title=\"Vue 2.0 Lifecycle Diagram\" src=\"/static/img/vue2-lifecycle.png\" height=\"400\">\n<span style=\"font-size: 12px;\">圖片來源： <a href=\"http://vuejs.org/guide/instance.html#Instance-Lifecycle-Hooks\" target=\"_blank\" rel=\"external\">Vue 2.0 Guide: Instance Lifecycle Hooks</a></span></p>\n<p>基本上 Vue 2.0 實體生命週期中，大部分的階段都與 Vue 1.x 是一樣的，最大的不同在於 lifecycle hook 名稱的改變，以及在元件被掛載 <code>mounted</code> 之後，還新增了 <code>beforeUpdate</code> 以及 <code>updated</code> 這兩組偵測更新的 hook。</p>\n<p>vue 1.x 的 <code>init</code> 變成 <code>beforeCreate</code> ， <code>beforeCompiled</code> 改為 <code>beforeMount</code>。 而原本的 <code>complied</code> 與 <code>ready</code> 則是統一收斂成 <code>mounted</code>。</p>\n<p>另外需要注意的是，<span style=\"color: #f00\"><strong>若元件本身是透過 server-side rendering 的話，除了 <code>beforeCreate</code> 以及 <code>created</code> 以外的所有 hook 都不會被呼叫</strong></span>  <a href=\"https://vuejs.org/api/#Options-Lifecycle-Hooks\" target=\"_blank\" rel=\"external\">(參考資料)</a>。</p>\n<p>有關元件 V-DOM 的重新渲染與更新後面再提，其他部分則與 Vue 1.x 大同小異。</p>\n<p><hr></p>\n<h3 id=\"Vue-2-0-元件與模板的編譯-Render-Function\"><a href=\"#Vue-2-0-元件與模板的編譯-Render-Function\" class=\"headerlink\" title=\"Vue 2.0 元件與模板的編譯 - Render Function\"></a>Vue 2.0 元件與模板的編譯 - Render Function</h3><p>在大部分情況下，透過元件的 <code>template</code> 屬性，或是直接寫在 HTML 中就已經足夠操作你的元件了。\n不過若是你想完全透過 JavaScript 來操作你的元件，那麼可以使用 render 這個 function 直接來寫底層的 virtual-DOM 來取代 <code>template</code> 屬性。\nVueJS 2.0 的 virtual DOM 機制，是採用 <a href=\"https://github.com/snabbdom/snabbdom\" title=\"snabbdom\" target=\"_blank\" rel=\"external\">snabbdom</a> 這個 virtual DOM 的 library 來實作的。</p>\n<p>可以使用 <code>createElement</code> 這個 function 來建立你的元件內容：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// @returns &#123;VNode&#125;</span></div><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Object | Function&#125;</span></div><div class=\"line\">  <span class=\"comment\">// An HTML tag name, component options, or function</span></div><div class=\"line\">  <span class=\"comment\">// returning one of these. Required.</span></div><div class=\"line\">  <span class=\"string\">'div'</span>,</div><div class=\"line\">  <span class=\"comment\">// &#123;Object&#125;</span></div><div class=\"line\">  <span class=\"comment\">// A data object corresponding to the attributes</span></div><div class=\"line\">  <span class=\"comment\">// you would use in a template. Optional.</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// (see details in the next section below)</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Array&#125;</span></div><div class=\"line\">  <span class=\"comment\">// Children VNodes. Optional.</span></div><div class=\"line\">  [</div><div class=\"line\">    createElement(<span class=\"string\">'h1'</span>, <span class=\"string\">'hello world'</span>)</div><div class=\"line\">    createElement(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">someProp</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"string\">'bar'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>官方也提供了一個完整的 render function 範例：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.children</div><div class=\"line\">      ? getChildrenTextContent(node.children)</div><div class=\"line\">      : node.text</div><div class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// create kebabCase id</span></div><div class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</div><div class=\"line\">      [</div><div class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</div><div class=\"line\">          <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: headingId,</div><div class=\"line\">            <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + headingId</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      ]</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>當然，你可能跟我一樣覺得一層又一層的 <code>createElement</code> 看了總是讓人厭煩，你也可以透過這個 Plugin: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\" target=\"_blank\" rel=\"external\">babel-plugin-transform-vue-jsx</a>，來做 JSX 語法的轉換，如果你曾是 react 應用程式的開發者，應該對 JSX 語法不陌生。 寫起來會像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;AnchoredHeading level=&#123;1&#125;&gt;</div><div class=\"line\">        &lt;span&gt;Hello&lt;/span&gt; world!</div><div class=\"line\">      &lt;/AnchoredHeading&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在預設情況中，VueJS 2.0 會將 <code>template</code> 內的 HTML 透過 parse 轉換成 AST，再自動轉換優化成 render function 去建立 virtual DOM。 在建立 virtual DOM 之後，透過 observe 機制與資料進行綁定，再 compile 成實體的 DOM 並渲染至網頁上：</p>\n<p><img src=\"/static/img/vue2-rendering-flow.png\">\n<span style=\"font-size: 12px;\">參考資料與圖片來源： <a href=\"https://speakerdeck.com/kazupon/next-vue-dot-js-2-dot-0\" target=\"_blank\" rel=\"external\">Next Vue.js 2.0 by kazupon</a></span></p>\n<p>前面說過，VueJS 2.0 會將 <code>template</code> 內的 HTML 自動編譯成 render function，下面這是官方文件以 <code>Vue.compile</code> 提供的 demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- template --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm a template!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">    No message.</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// render:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _h(<span class=\"string\">'div'</span>,[_m(<span class=\"number\">0</span>),(message)?_h(<span class=\"string\">'p'</span>,[_s(message)]):_h(<span class=\"string\">'p'</span>,[<span class=\"string\">\"No message.\"</span>])])&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// staticRenderFns:</span></div><div class=\"line\">_m(<span class=\"number\">0</span>): <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _h(<span class=\"string\">'h1'</span>,[<span class=\"string\">\"I'm a template!\"</span>])&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><hr></p>\n<h3 id=\"Vue-2-0-元件的追蹤變化\"><a href=\"#Vue-2-0-元件的追蹤變化\" class=\"headerlink\" title=\"Vue 2.0 元件的追蹤變化\"></a>Vue 2.0 元件的追蹤變化</h3><p>最後，我們來看看元件內狀態的追蹤變化。有寫過 VueJS 1.x 的朋友應該知道，元件實體內有個 option 叫 <code>data</code>，\n這個 <code>data</code> 物件就是用來存放元件內狀態/資料的地方。</p>\n<p>與 Vue 1.x 相同的地方是，<code>data</code> 物件透過 <code>Object.defineProperty()</code> 來為元件內各屬性設定 「getter」與「setter」。\n就在 data 屬性被存取修改時，會透過 getter/setter 來通知物件內屬性的變化，當先前設定好的 setter 被呼叫的時候，會去觸發 watcher 重新計算，也就會導致 DOM 的更新與重新渲染。</p>\n<p>與 Vue 1.x 不同的是，Vue 1.x 是透過 directive 來重新渲染 DOM 內容：</p>\n<p><img src=\"/static/img/vue1-watcher.png\"></p>\n<p>而 Vue 2.0 在通知 watcher 更新時，會去呼叫前面介紹的 「render function」與更新後的 data 去做更新後再次渲染，概念與 1.x 大致相同。\n但更新 DOM 的手法不同，減少了不必要的比對，也因此大幅度提升了效能。</p>\n<p><img src=\"/static/img/vue2-watcher.png\"></p>\n","excerpt":"","more":"<p>狂賀！ <a href=\"https://github.com/vuejs/vue/releases/tag/v2.0.0\" title=\"Vue 2.0\">Vue 2.0</a> 終於正式發佈！</p>\n<p>關於 Vue 2.0 的新特性，作者也在官方 Blog - <a href=\"https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.n0m3yjfmp\" title=\"Vue 2.0 is Here!\">Vue 2.0 is Here!</a> (<a href=\"http://jiongks.name/blog/vue-2-is-here/\" title=\"Vue 2.0 来了！\">中文翻譯</a>) 一文中敘述地相當詳細，這裡就不多說。</p>\n<p>如果你也與我一樣是從 V1 就開始接觸的開發者，一定都知道 VueJS 最核心的一部分是 Component，而 Component 是由實體 (Vue Instance) 來實作。\n在這篇文章，我們就來談談 Vue 1.x 與 2.x 元件實體的差異。</p>\n<hr>\n\n<h3 id=\"Vue-2-0-元件實體註冊\"><a href=\"#Vue-2-0-元件實體註冊\" class=\"headerlink\" title=\"Vue 2.0 元件實體註冊\"></a>Vue 2.0 元件實體註冊</h3><p><img alt=\"tree of components\" src=\"/static/img/Vue-instance.png\"></p>\n<p>像上面這樣的網站，我們可以將它抽象化為一棵「元件樹」，而每個元件樹都會有個根節點，或稱為根實體 (root Vue instance)。</p>\n<p>那麼，每個 Vue 元件樹的根實體其實是透過 <code>Vue</code> 這個建構函式所產生：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>將 Vue 元件與實體 DOM 結合的方式有兩種，一種是直接寫在 <code>el</code> option 內：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#app'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>而另一種方式則是透過 <code>$mount</code> 來指定節點：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"comment\">// options without 'el'</span></div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">vm.$mount(<span class=\"string\">'#app'</span>);</div></pre></td></tr></table></figure></p>\n<p>這部分跟 Vue 1.x 的註冊是完全一樣的，但是需要注意的是，在 vue 1.x 允許開發者以 <code>&lt;body&gt;</code> 或 <code>&lt;html&gt;</code> 作為根實體的掛載點，\n但<span style=\"color: #f00\">到了 VueJS 2.0 後，只能透過 <strong>獨立的節點掛載</strong> </span>，如: div 等。 否則會產生錯誤，警告訊息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">“Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.“</div></pre></td></tr></table></figure>\n<p>換成用獨立的 DOM 節點，如 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，就可以正常運作了。</p>\n<hr>\n\n<h3 id=\"Vue-2-0-元件實體的生命週期\"><a href=\"#Vue-2-0-元件實體的生命週期\" class=\"headerlink\" title=\"Vue 2.0 元件實體的生命週期\"></a>Vue 2.0 元件實體的生命週期</h3><p><img alt=\"Vue 2.0 Lifecycle Diagram\" title=\"Vue 2.0 Lifecycle Diagram\" src=\"/static/img/vue2-lifecycle.png\" height=\"400\">\n<span style=\"font-size: 12px;\">圖片來源： <a href=\"http://vuejs.org/guide/instance.html#Instance-Lifecycle-Hooks\">Vue 2.0 Guide: Instance Lifecycle Hooks</a></span></p>\n<p>基本上 Vue 2.0 實體生命週期中，大部分的階段都與 Vue 1.x 是一樣的，最大的不同在於 lifecycle hook 名稱的改變，以及在元件被掛載 <code>mounted</code> 之後，還新增了 <code>beforeUpdate</code> 以及 <code>updated</code> 這兩組偵測更新的 hook。</p>\n<p>vue 1.x 的 <code>init</code> 變成 <code>beforeCreate</code> ， <code>beforeCompiled</code> 改為 <code>beforeMount</code>。 而原本的 <code>complied</code> 與 <code>ready</code> 則是統一收斂成 <code>mounted</code>。</p>\n<p>另外需要注意的是，<span style=\"color: #f00\"><strong>若元件本身是透過 server-side rendering 的話，除了 <code>beforeCreate</code> 以及 <code>created</code> 以外的所有 hook 都不會被呼叫</strong></span>  <a href=\"https://vuejs.org/api/#Options-Lifecycle-Hooks\">(參考資料)</a>。</p>\n<p>有關元件 V-DOM 的重新渲染與更新後面再提，其他部分則與 Vue 1.x 大同小異。</p>\n<p><hr></p>\n<h3 id=\"Vue-2-0-元件與模板的編譯-Render-Function\"><a href=\"#Vue-2-0-元件與模板的編譯-Render-Function\" class=\"headerlink\" title=\"Vue 2.0 元件與模板的編譯 - Render Function\"></a>Vue 2.0 元件與模板的編譯 - Render Function</h3><p>在大部分情況下，透過元件的 <code>template</code> 屬性，或是直接寫在 HTML 中就已經足夠操作你的元件了。\n不過若是你想完全透過 JavaScript 來操作你的元件，那麼可以使用 render 這個 function 直接來寫底層的 virtual-DOM 來取代 <code>template</code> 屬性。\nVueJS 2.0 的 virtual DOM 機制，是採用 <a href=\"https://github.com/snabbdom/snabbdom\" title=\"snabbdom\">snabbdom</a> 這個 virtual DOM 的 library 來實作的。</p>\n<p>可以使用 <code>createElement</code> 這個 function 來建立你的元件內容：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// @returns &#123;VNode&#125;</span></div><div class=\"line\">createElement(</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Object | Function&#125;</span></div><div class=\"line\">  <span class=\"comment\">// An HTML tag name, component options, or function</span></div><div class=\"line\">  <span class=\"comment\">// returning one of these. Required.</span></div><div class=\"line\">  <span class=\"string\">'div'</span>,</div><div class=\"line\">  <span class=\"comment\">// &#123;Object&#125;</span></div><div class=\"line\">  <span class=\"comment\">// A data object corresponding to the attributes</span></div><div class=\"line\">  <span class=\"comment\">// you would use in a template. Optional.</span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">// (see details in the next section below)</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">// &#123;String | Array&#125;</span></div><div class=\"line\">  <span class=\"comment\">// Children VNodes. Optional.</span></div><div class=\"line\">  [</div><div class=\"line\">    createElement(<span class=\"string\">'h1'</span>, <span class=\"string\">'hello world'</span>)</div><div class=\"line\">    createElement(MyComponent, &#123;</div><div class=\"line\">      <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">someProp</span>: <span class=\"string\">'foo'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;),</div><div class=\"line\">    <span class=\"string\">'bar'</span></div><div class=\"line\">  ]</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>官方也提供了一個完整的 render function 範例：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> getChildrenTextContent = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">children</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> children.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> node.children</div><div class=\"line\">      ? getChildrenTextContent(node.children)</div><div class=\"line\">      : node.text</div><div class=\"line\">  &#125;).join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">Vue.component(<span class=\"string\">'anchored-heading'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">createElement</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// create kebabCase id</span></div><div class=\"line\">    <span class=\"keyword\">var</span> headingId = getChildrenTextContent(<span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      .toLowerCase()</div><div class=\"line\">      .replace(<span class=\"regexp\">/\\W+/g</span>, <span class=\"string\">'-'</span>)</div><div class=\"line\">      .replace(<span class=\"regexp\">/(^\\-|\\-$)/g</span>, <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> createElement(</div><div class=\"line\">      <span class=\"string\">'h'</span> + <span class=\"keyword\">this</span>.level,</div><div class=\"line\">      [</div><div class=\"line\">        createElement(<span class=\"string\">'a'</span>, &#123;</div><div class=\"line\">          <span class=\"attr\">attrs</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">name</span>: headingId,</div><div class=\"line\">            <span class=\"attr\">href</span>: <span class=\"string\">'#'</span> + headingId</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;, <span class=\"keyword\">this</span>.$slots.default)</div><div class=\"line\">      ]</div><div class=\"line\">    )</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">props</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">level</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">type</span>: <span class=\"built_in\">Number</span>,</div><div class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>當然，你可能跟我一樣覺得一層又一層的 <code>createElement</code> 看了總是讓人厭煩，你也可以透過這個 Plugin: <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\">babel-plugin-transform-vue-jsx</a>，來做 JSX 語法的轉換，如果你曾是 react 應用程式的開發者，應該對 JSX 語法不陌生。 寫起來會像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> AnchoredHeading <span class=\"keyword\">from</span> <span class=\"string\">'./AnchoredHeading.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">'#demo'</span>,</div><div class=\"line\">  render (h) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;AnchoredHeading level=&#123;1&#125;&gt;</div><div class=\"line\">        &lt;span&gt;Hello&lt;/span&gt; world!</div><div class=\"line\">      &lt;/AnchoredHeading&gt;</div><div class=\"line\">    )</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>在預設情況中，VueJS 2.0 會將 <code>template</code> 內的 HTML 透過 parse 轉換成 AST，再自動轉換優化成 render function 去建立 virtual DOM。 在建立 virtual DOM 之後，透過 observe 機制與資料進行綁定，再 compile 成實體的 DOM 並渲染至網頁上：</p>\n<p><img src=\"/static/img/vue2-rendering-flow.png\">\n<span style=\"font-size: 12px;\">參考資料與圖片來源： <a href=\"https://speakerdeck.com/kazupon/next-vue-dot-js-2-dot-0\">Next Vue.js 2.0 by kazupon</a></span></p>\n<p>前面說過，VueJS 2.0 會將 <code>template</code> 內的 HTML 自動編譯成 render function，下面這是官方文件以 <code>Vue.compile</code> 提供的 demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- template --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>I'm a template!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"message\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123; message &#125;&#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span></div><div class=\"line\">    No message.</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// render:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _h(<span class=\"string\">'div'</span>,[_m(<span class=\"number\">0</span>),(message)?_h(<span class=\"string\">'p'</span>,[_s(message)]):_h(<span class=\"string\">'p'</span>,[<span class=\"string\">\"No message.\"</span>])])&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// staticRenderFns:</span></div><div class=\"line\">_m(<span class=\"number\">0</span>): <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">anonymous</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">with</span>(<span class=\"keyword\">this</span>)&#123;<span class=\"keyword\">return</span> _h(<span class=\"string\">'h1'</span>,[<span class=\"string\">\"I'm a template!\"</span>])&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><hr></p>\n<h3 id=\"Vue-2-0-元件的追蹤變化\"><a href=\"#Vue-2-0-元件的追蹤變化\" class=\"headerlink\" title=\"Vue 2.0 元件的追蹤變化\"></a>Vue 2.0 元件的追蹤變化</h3><p>最後，我們來看看元件內狀態的追蹤變化。有寫過 VueJS 1.x 的朋友應該知道，元件實體內有個 option 叫 <code>data</code>，\n這個 <code>data</code> 物件就是用來存放元件內狀態/資料的地方。</p>\n<p>與 Vue 1.x 相同的地方是，<code>data</code> 物件透過 <code>Object.defineProperty()</code> 來為元件內各屬性設定 「getter」與「setter」。\n就在 data 屬性被存取修改時，會透過 getter/setter 來通知物件內屬性的變化，當先前設定好的 setter 被呼叫的時候，會去觸發 watcher 重新計算，也就會導致 DOM 的更新與重新渲染。</p>\n<p>與 Vue 1.x 不同的是，Vue 1.x 是透過 directive 來重新渲染 DOM 內容：</p>\n<p><img src=\"/static/img/vue1-watcher.png\"></p>\n<p>而 Vue 2.0 在通知 watcher 更新時，會去呼叫前面介紹的 「render function」與更新後的 data 去做更新後再次渲染，概念與 1.x 大致相同。\n但更新 DOM 的手法不同，減少了不必要的比對，也因此大幅度提升了效能。</p>\n<p><img src=\"/static/img/vue2-watcher.png\"></p>\n"},{"title":"VueJS 各種資料綁定 (data binding) 的方式","date":"2016-10-05T01:04:34.000Z","comments":1,"_content":"\n大部分資料是從這裡來的: [Vue 1.0.0 binding syntax cheatsheet](https://github.com/vuejs/vue/wiki/1.0.0-binding-syntax-cheatsheet)，再加上對 Vue 2.0 補充的部分。\n\n``` html\n<!-- normal directive -->\n<div v-if=\"ok\"></div>\n\n<!-- directive with argument -->\n<button v-on:click=\"onClick\"></button>\n\n<!-- v-on with argument + key modifier -->\n<input v-on:keyup.enter=\"handleEnter\">\n\n<!-- literal modifier: pass literal string to directive for Vue 1.x, -->\n<!-- but deprecated in 2.0 -->\n<a v-link.literal=\"/a/b/c\"></a>\n\n<!-- binding an attribute with v-bind -->\n<img v-bind:src=\"imgSrc\">\n<a v-bind:href=\"baseURL + '/path'\">\n\n<!-- shorthand: colon for v-bind -->\n<img :src=\"imgSrc\">\n<a :href=\"baseURL + '/path'\">\n\n<!-- shorthand: @ for v-on -->\n<button @click=\"onClick\"></button>\n\n<!-- key modifier -->\n<input @keyup.enter=\"handleEnter\">\n\n<!-- stop/prevent modifier -->\n<button @click.stop=\"onClick\"></button>\n<form @submit.prevent></form>\n\n<!-- props for Vue 1.x -->\n<!-- .once and .sync are deprecated in 2.0 -->\n<my-comp\n  prop=\"literal string\"\n  v-bind:prop=\"defaultOneWay\"\n  v-bind:prop.sync=\"twoWay\"\n  v-bind:prop.once=\"oneTime\">\n</my-comp>\n\n<!-- props with one time binding for Vue 2.0 -->\n<my-comp\n  prop=\"literal string\"\n  v-bind:prop=\"defaultOneWay\"\n  v-once>\n</my-comp>\n\n<!-- component with props and custom events, in shorthand -->\n<item-list\n  :items=\"items\"\n  :open.sync=\"isListOpen\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n\n<!-- v-el and v-ref now just use the argument -->\n\n<!-- registers vm.$refs.child for Vue 1.x -->\n<comp v-ref:child></comp>\n\n<!-- registers vm.$refs.child for Vue 2.0 -->\n<comp ref:child></comp>\n\n<!-- registers vm.$els.node for Vue 1.x, but deprecated in 2.0 -->\n<div v-el:node></div>\n```","source":"_posts/VueJS-各種資料綁定-data-binding-的方式.md","raw":"---\ntitle: VueJS 各種資料綁定 (data binding) 的方式\ndate: 2016-10-05 09:04:34\ncomments: true\ncategories: [vue.js]\ntags: [vue.js]\n---\n\n大部分資料是從這裡來的: [Vue 1.0.0 binding syntax cheatsheet](https://github.com/vuejs/vue/wiki/1.0.0-binding-syntax-cheatsheet)，再加上對 Vue 2.0 補充的部分。\n\n``` html\n<!-- normal directive -->\n<div v-if=\"ok\"></div>\n\n<!-- directive with argument -->\n<button v-on:click=\"onClick\"></button>\n\n<!-- v-on with argument + key modifier -->\n<input v-on:keyup.enter=\"handleEnter\">\n\n<!-- literal modifier: pass literal string to directive for Vue 1.x, -->\n<!-- but deprecated in 2.0 -->\n<a v-link.literal=\"/a/b/c\"></a>\n\n<!-- binding an attribute with v-bind -->\n<img v-bind:src=\"imgSrc\">\n<a v-bind:href=\"baseURL + '/path'\">\n\n<!-- shorthand: colon for v-bind -->\n<img :src=\"imgSrc\">\n<a :href=\"baseURL + '/path'\">\n\n<!-- shorthand: @ for v-on -->\n<button @click=\"onClick\"></button>\n\n<!-- key modifier -->\n<input @keyup.enter=\"handleEnter\">\n\n<!-- stop/prevent modifier -->\n<button @click.stop=\"onClick\"></button>\n<form @submit.prevent></form>\n\n<!-- props for Vue 1.x -->\n<!-- .once and .sync are deprecated in 2.0 -->\n<my-comp\n  prop=\"literal string\"\n  v-bind:prop=\"defaultOneWay\"\n  v-bind:prop.sync=\"twoWay\"\n  v-bind:prop.once=\"oneTime\">\n</my-comp>\n\n<!-- props with one time binding for Vue 2.0 -->\n<my-comp\n  prop=\"literal string\"\n  v-bind:prop=\"defaultOneWay\"\n  v-once>\n</my-comp>\n\n<!-- component with props and custom events, in shorthand -->\n<item-list\n  :items=\"items\"\n  :open.sync=\"isListOpen\"\n  @ready=\"onItemsReady\"\n  @update=\"onItemsUpdate\">\n</item-list>\n\n<!-- v-el and v-ref now just use the argument -->\n\n<!-- registers vm.$refs.child for Vue 1.x -->\n<comp v-ref:child></comp>\n\n<!-- registers vm.$refs.child for Vue 2.0 -->\n<comp ref:child></comp>\n\n<!-- registers vm.$els.node for Vue 1.x, but deprecated in 2.0 -->\n<div v-el:node></div>\n```","slug":"VueJS-各種資料綁定-data-binding-的方式","published":1,"updated":"2017-03-15T09:59:34.000Z","layout":"post","photos":[],"link":"","_id":"cj0assjo200052kt4rbxodey9","content":"<p>大部分資料是從這裡來的: <a href=\"https://github.com/vuejs/vue/wiki/1.0.0-binding-syntax-cheatsheet\" target=\"_blank\" rel=\"external\">Vue 1.0.0 binding syntax cheatsheet</a>，再加上對 Vue 2.0 補充的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- normal directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- directive with argument --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on with argument + key modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"handleEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- literal modifier: pass literal string to directive for Vue 1.x, --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- but deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link.literal</span>=<span class=\"string\">\"/a/b/c\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an attribute with v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"baseURL + '/path'\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand: colon for v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"baseURL + '/path'\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand: @ for v-on --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"handleEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop/prevent modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- props for Vue 1.x --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- .once and .sync are deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span></span></div><div class=\"line\">  <span class=\"attr\">prop</span>=<span class=\"string\">\"literal string\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop</span>=<span class=\"string\">\"defaultOneWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop.sync</span>=<span class=\"string\">\"twoWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop.once</span>=<span class=\"string\">\"oneTime\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- props with one time binding for Vue 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span></span></div><div class=\"line\">  <span class=\"attr\">prop</span>=<span class=\"string\">\"literal string\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop</span>=<span class=\"string\">\"defaultOneWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-once</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- component with props and custom events, in shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></span></div><div class=\"line\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></div><div class=\"line\">  <span class=\"attr\">:open.sync</span>=<span class=\"string\">\"isListOpen\"</span></div><div class=\"line\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></div><div class=\"line\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-el and v-ref now just use the argument --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$refs.child for Vue 1.x --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-ref:child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$refs.child for Vue 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">ref:child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$els.node for Vue 1.x, but deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-el:node</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>大部分資料是從這裡來的: <a href=\"https://github.com/vuejs/vue/wiki/1.0.0-binding-syntax-cheatsheet\">Vue 1.0.0 binding syntax cheatsheet</a>，再加上對 Vue 2.0 補充的部分。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- normal directive --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"ok\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- directive with argument --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-on with argument + key modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-on:keyup.enter</span>=<span class=\"string\">\"handleEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- literal modifier: pass literal string to directive for Vue 1.x, --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- but deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-link.literal</span>=<span class=\"string\">\"/a/b/c\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- binding an attribute with v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-bind:href</span>=<span class=\"string\">\"baseURL + '/path'\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand: colon for v-bind --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"imgSrc\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">:href</span>=<span class=\"string\">\"baseURL + '/path'\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- shorthand: @ for v-on --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- key modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">\"handleEnter\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- stop/prevent modifier --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">\"onClick\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> @<span class=\"attr\">submit.prevent</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- props for Vue 1.x --&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- .once and .sync are deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span></div><div class=\"line\">  <span class=\"attr\">prop</span>=<span class=\"string\">\"literal string\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop</span>=<span class=\"string\">\"defaultOneWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop.sync</span>=<span class=\"string\">\"twoWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop.once</span>=<span class=\"string\">\"oneTime\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- props with one time binding for Vue 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-comp</span></div><div class=\"line\">  <span class=\"attr\">prop</span>=<span class=\"string\">\"literal string\"</span></div><div class=\"line\">  <span class=\"attr\">v-bind:prop</span>=<span class=\"string\">\"defaultOneWay\"</span></div><div class=\"line\">  <span class=\"attr\">v-once</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">my-comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- component with props and custom events, in shorthand --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item-list</span></div><div class=\"line\">  <span class=\"attr\">:items</span>=<span class=\"string\">\"items\"</span></div><div class=\"line\">  <span class=\"attr\">:open.sync</span>=<span class=\"string\">\"isListOpen\"</span></div><div class=\"line\">  @<span class=\"attr\">ready</span>=<span class=\"string\">\"onItemsReady\"</span></div><div class=\"line\">  @<span class=\"attr\">update</span>=<span class=\"string\">\"onItemsUpdate\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">item-list</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- v-el and v-ref now just use the argument --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$refs.child for Vue 1.x --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">v-ref:child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$refs.child for Vue 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">comp</span> <span class=\"attr\">ref:child</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- registers vm.$els.node for Vue 1.x, but deprecated in 2.0 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-el:node</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>"},{"layout":"post","title":"淺談 Google map Heat map API ","date":"2015-04-29T00:01:00.000Z","comments":1,"_content":"前陣子因為工作的需要，稍微研究了一下 Google Map 提供的 HeatMap (熱點圖/熱圖) API，實作方面也滿容易的，在這裡就簡單做個紀錄。\n\n**HeatMap** (以下稱熱圖) 是用來表示**資料數值強度與位置的可視化**，Google 熱圖 API 在預設情況下，高強度的數值會以紅色表示，低強度的數值則是以綠色來表示。\n\n![螢幕快照 2015-04-29 下午3.37.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/gg6DtVUASmSRqxaw8gpk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.37.46.png)\n圖片來源: https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\n\n有了簡單的認知後，那麼就來說明如何透過 Google Map API 在 Google Map 載入熱圖。\n\n首先是在載入 Google Maps API 時，必須加入 **visualization** 這個 library。在後面加入 `libraries=visualization` 即可，要是想再加入其他 library 可用 `,` 逗號隔開。如果沒有載入 visualization 這個 library，熱圖會無法顯示。\n\n``` html\n<script type=\"text/javascript\"\n  src=\"https://maps.googleapis.com/maps/api/js?libraries=visualization&sensor=true_or_false\">\n</script>\n```\n\n再來，因爲熱圖其實是一連串 **座標點** 與 **數值** 的集合，所以我們要先準備好一個陣列來存放 LatLng 物件的集合：\n\n``` javascript\n// 存放 google.maps.LatLng 物件的陣列\nvar heatmapData = [\n  new google.maps.LatLng(37.782, -122.447),\n  new google.maps.LatLng(37.782, -122.445),\n\t// 以下略 ...\n];\n\n// 產生一個 Heatmap Layer\nvar heatmap = new google.maps.visualization.HeatmapLayer({\n  data: heatmapData\n});\n\n// 將 heatmap 圖層加入至 map\nheatmap.setMap(map);\n```\n\n如果想要改變熱圖樣式的話也很簡單，有兩種方式，第一種是在 `new google.maps.visualization.HeatmapLayer` 時加入樣式的設定，如：\n\n``` javascript\nvar heatmap = new google.maps.visualization.HeatmapLayer({\n  data: heatmapData,\n  gradient: ['transparent', '#f00', '#0f0', '#00f'],\t// 指定顏色範圍 ex:透明, 紅, 綠, 藍\n  radius: 10,\t\t\t\t// 每個點的半徑 (單位 px)\n  opacity: 0.5\t\t\t// 熱圖圖層透明度 (0 ~ 1)\n});\n```\n\n或是想改變已載入熱圖的樣式，可以透過 `heatmap.set()` :\n``` javascript\n// 改變範圍顏色\nheatmap.set('gradient', ['transparent', '#f00', '#0f0', '#00f']);\n\n// 改變透明度\nheatmap.set('opacity', 0.5);\n```\n\n完整範例可以參考 Google Heat Map 文件：\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\n\n接著，同場加映。\n\n如果今天我們有一份完整的 GeoJSON (關於 GeoJSON 可參考[前篇 GeoJSON 介紹](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data))文件，是否可以直接生成熱圖？ 當然沒問題。\n\n我們只要將取得的 GeoJSON 解析出來，並存入陣列內就可以輕鬆地生成熱圖。\n\n這是 GeoJSON 範例的格式，可以看出來這是一個 Point，而且有個屬性 valueCount，值為 5。\n``` javascript\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [121.52803907522677, 25.036051507818932]\n  },\n  \"properties\": { \"valueCount\": 5 }\n}\n```\n\n``` javascript\n// 畫熱圖\nfunction draw_heatmap(results) {\n  var heatmapData = [];\n\n  for (var i = 0; i < results.features.length; i++) {\n    // 取得座標\n    var coords = results.features[i].geometry.coordinates;\n    // 要注意： LatLng 物件的經緯度順序與 GeoJSON 的座標順序相反\n    var latLng = new google.maps.LatLng(coords[1], coords[0]);\n\n    var weightedLoc = {\n      // 位置\n      location: latLng,\n      // 單位強度，這裏由 GeoJSON 內的 valueCount 屬性取得\n      weight: results.features[i].properties.valueCount\n    };\n\n    heatmapData.push(weightedLoc);\n  }\n\n\t// 生成熱圖圖層\n  var heatmap = new google.maps.visualization.HeatmapLayer({\n    data: heatmapData,\n    dissipating: true,\n    map: map,\n    radius: 40,\n    gradient: ['transparent', '#f00', '#0f0', '#00f']\n  });\n}\n```\n\n![螢幕快照 2015-04-29 下午3.50.00.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/jE7EkvSumXUFaRKArSMw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.50.00.png)\nDEMO: http://jsbin.com/xafagi/1/\n\n\n如果想要 debug 確認生成的熱圖是否正確，因為我們是利用 GeoJSON 產生熱圖，所以我們可以透過 `map.data.addGeoJson( geoJson );` 來加入 marker 供我們確認。\n![螢幕快照 2015-04-29 下午3.59.13.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/iU5KQsFgRQKTwgEjNraG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.59.13.png)\nDEMO: http://jsbin.com/xafagi/2/\n\n\n參考資料：\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\nhttps://developers.google.com/maps/documentation/javascript/heatmaplayer","source":"_posts/a-brief-talk-on-google-map-heat-map-api.md","raw":"---\nlayout: post\ntitle: '淺談 Google map Heat map API '\ndate: 2015-04-29 08:01\ncomments: true\ncategories: [Google Map]\ntags: [google map, Heatmap]\n---\n前陣子因為工作的需要，稍微研究了一下 Google Map 提供的 HeatMap (熱點圖/熱圖) API，實作方面也滿容易的，在這裡就簡單做個紀錄。\n\n**HeatMap** (以下稱熱圖) 是用來表示**資料數值強度與位置的可視化**，Google 熱圖 API 在預設情況下，高強度的數值會以紅色表示，低強度的數值則是以綠色來表示。\n\n![螢幕快照 2015-04-29 下午3.37.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/gg6DtVUASmSRqxaw8gpk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.37.46.png)\n圖片來源: https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\n\n有了簡單的認知後，那麼就來說明如何透過 Google Map API 在 Google Map 載入熱圖。\n\n首先是在載入 Google Maps API 時，必須加入 **visualization** 這個 library。在後面加入 `libraries=visualization` 即可，要是想再加入其他 library 可用 `,` 逗號隔開。如果沒有載入 visualization 這個 library，熱圖會無法顯示。\n\n``` html\n<script type=\"text/javascript\"\n  src=\"https://maps.googleapis.com/maps/api/js?libraries=visualization&sensor=true_or_false\">\n</script>\n```\n\n再來，因爲熱圖其實是一連串 **座標點** 與 **數值** 的集合，所以我們要先準備好一個陣列來存放 LatLng 物件的集合：\n\n``` javascript\n// 存放 google.maps.LatLng 物件的陣列\nvar heatmapData = [\n  new google.maps.LatLng(37.782, -122.447),\n  new google.maps.LatLng(37.782, -122.445),\n\t// 以下略 ...\n];\n\n// 產生一個 Heatmap Layer\nvar heatmap = new google.maps.visualization.HeatmapLayer({\n  data: heatmapData\n});\n\n// 將 heatmap 圖層加入至 map\nheatmap.setMap(map);\n```\n\n如果想要改變熱圖樣式的話也很簡單，有兩種方式，第一種是在 `new google.maps.visualization.HeatmapLayer` 時加入樣式的設定，如：\n\n``` javascript\nvar heatmap = new google.maps.visualization.HeatmapLayer({\n  data: heatmapData,\n  gradient: ['transparent', '#f00', '#0f0', '#00f'],\t// 指定顏色範圍 ex:透明, 紅, 綠, 藍\n  radius: 10,\t\t\t\t// 每個點的半徑 (單位 px)\n  opacity: 0.5\t\t\t// 熱圖圖層透明度 (0 ~ 1)\n});\n```\n\n或是想改變已載入熱圖的樣式，可以透過 `heatmap.set()` :\n``` javascript\n// 改變範圍顏色\nheatmap.set('gradient', ['transparent', '#f00', '#0f0', '#00f']);\n\n// 改變透明度\nheatmap.set('opacity', 0.5);\n```\n\n完整範例可以參考 Google Heat Map 文件：\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\n\n接著，同場加映。\n\n如果今天我們有一份完整的 GeoJSON (關於 GeoJSON 可參考[前篇 GeoJSON 介紹](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data))文件，是否可以直接生成熱圖？ 當然沒問題。\n\n我們只要將取得的 GeoJSON 解析出來，並存入陣列內就可以輕鬆地生成熱圖。\n\n這是 GeoJSON 範例的格式，可以看出來這是一個 Point，而且有個屬性 valueCount，值為 5。\n``` javascript\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [121.52803907522677, 25.036051507818932]\n  },\n  \"properties\": { \"valueCount\": 5 }\n}\n```\n\n``` javascript\n// 畫熱圖\nfunction draw_heatmap(results) {\n  var heatmapData = [];\n\n  for (var i = 0; i < results.features.length; i++) {\n    // 取得座標\n    var coords = results.features[i].geometry.coordinates;\n    // 要注意： LatLng 物件的經緯度順序與 GeoJSON 的座標順序相反\n    var latLng = new google.maps.LatLng(coords[1], coords[0]);\n\n    var weightedLoc = {\n      // 位置\n      location: latLng,\n      // 單位強度，這裏由 GeoJSON 內的 valueCount 屬性取得\n      weight: results.features[i].properties.valueCount\n    };\n\n    heatmapData.push(weightedLoc);\n  }\n\n\t// 生成熱圖圖層\n  var heatmap = new google.maps.visualization.HeatmapLayer({\n    data: heatmapData,\n    dissipating: true,\n    map: map,\n    radius: 40,\n    gradient: ['transparent', '#f00', '#0f0', '#00f']\n  });\n}\n```\n\n![螢幕快照 2015-04-29 下午3.50.00.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/jE7EkvSumXUFaRKArSMw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.50.00.png)\nDEMO: http://jsbin.com/xafagi/1/\n\n\n如果想要 debug 確認生成的熱圖是否正確，因為我們是利用 GeoJSON 產生熱圖，所以我們可以透過 `map.data.addGeoJson( geoJson );` 來加入 marker 供我們確認。\n![螢幕快照 2015-04-29 下午3.59.13.png](http://user-image.logdown.io/user/3292/blog/3340/post/262458/iU5KQsFgRQKTwgEjNraG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.59.13.png)\nDEMO: http://jsbin.com/xafagi/2/\n\n\n參考資料：\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\nhttps://developers.google.com/maps/documentation/javascript/heatmaplayer","slug":"a-brief-talk-on-google-map-heat-map-api","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjo400062kt440lzovw2","content":"<p>前陣子因為工作的需要，稍微研究了一下 Google Map 提供的 HeatMap (熱點圖/熱圖) API，實作方面也滿容易的，在這裡就簡單做個紀錄。</p>\n<p><strong>HeatMap</strong> (以下稱熱圖) 是用來表示<strong>資料數值強度與位置的可視化</strong>，Google 熱圖 API 在預設情況下，高強度的數值會以紅色表示，低強度的數值則是以綠色來表示。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/gg6DtVUASmSRqxaw8gpk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.37.46.png\" alt=\"螢幕快照 2015-04-29 下午3.37.46.png\">\n圖片來源: <a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a></p>\n<p>有了簡單的認知後，那麼就來說明如何透過 Google Map API 在 Google Map 載入熱圖。</p>\n<p>首先是在載入 Google Maps API 時，必須加入 <strong>visualization</strong> 這個 library。在後面加入 <code>libraries=visualization</code> 即可，要是想再加入其他 library 可用 <code>,</code> 逗號隔開。如果沒有載入 visualization 這個 library，熱圖會無法顯示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span></span></div><div class=\"line\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?libraries=visualization&amp;sensor=true_or_false\"</span>&gt;<span class=\"undefined\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來，因爲熱圖其實是一連串 <strong>座標點</strong> 與 <strong>數值</strong> 的集合，所以我們要先準備好一個陣列來存放 LatLng 物件的集合：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 存放 google.maps.LatLng 物件的陣列</span></div><div class=\"line\"><span class=\"keyword\">var</span> heatmapData = [</div><div class=\"line\">  <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">37.782</span>, <span class=\"number\">-122.447</span>),</div><div class=\"line\">  <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">37.782</span>, <span class=\"number\">-122.445</span>),</div><div class=\"line\">true<span class=\"comment\">// 以下略 ...</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 產生一個 Heatmap Layer</span></div><div class=\"line\"><span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: heatmapData</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將 heatmap 圖層加入至 map</span></div><div class=\"line\">heatmap.setMap(map);</div></pre></td></tr></table></figure>\n<p>如果想要改變熱圖樣式的話也很簡單，有兩種方式，第一種是在 <code>new google.maps.visualization.HeatmapLayer</code> 時加入樣式的設定，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: heatmapData,</div><div class=\"line\">  <span class=\"attr\">gradient</span>: [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>],\t<span class=\"comment\">// 指定顏色範圍 ex:透明, 紅, 綠, 藍</span></div><div class=\"line\">  radius: <span class=\"number\">10</span>,\t\t\t\t<span class=\"comment\">// 每個點的半徑 (單位 px)</span></div><div class=\"line\">  opacity: <span class=\"number\">0.5</span>\t\t\t<span class=\"comment\">// 熱圖圖層透明度 (0 ~ 1)</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>或是想改變已載入熱圖的樣式，可以透過 <code>heatmap.set()</code> :\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 改變範圍顏色</span></div><div class=\"line\">heatmap.set(<span class=\"string\">'gradient'</span>, [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改變透明度</span></div><div class=\"line\">heatmap.set(<span class=\"string\">'opacity'</span>, <span class=\"number\">0.5</span>);</div></pre></td></tr></table></figure></p>\n<p>完整範例可以參考 Google Heat Map 文件：\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a></p>\n<p>接著，同場加映。</p>\n<p>如果今天我們有一份完整的 GeoJSON (關於 GeoJSON 可參考<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\">前篇 GeoJSON 介紹</a>)文件，是否可以直接生成熱圖？ 當然沒問題。</p>\n<p>我們只要將取得的 GeoJSON 解析出來，並存入陣列內就可以輕鬆地生成熱圖。</p>\n<p>這是 GeoJSON 範例的格式，可以看出來這是一個 Point，而且有個屬性 valueCount，值為 5。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">  <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\">      <span class=\"string\">\"coordinates\"</span>: [<span class=\"number\">121.52803907522677</span>, <span class=\"number\">25.036051507818932</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123; <span class=\"string\">\"valueCount\"</span>: <span class=\"number\">5</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 畫熱圖</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw_heatmap</span>(<span class=\"params\">results</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> heatmapData = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; results.features.length; i++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 取得座標</span></div><div class=\"line\">    <span class=\"keyword\">var</span> coords = results.features[i].geometry.coordinates;</div><div class=\"line\">    <span class=\"comment\">// 要注意： LatLng 物件的經緯度順序與 GeoJSON 的座標順序相反</span></div><div class=\"line\">    <span class=\"keyword\">var</span> latLng = <span class=\"keyword\">new</span> google.maps.LatLng(coords[<span class=\"number\">1</span>], coords[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> weightedLoc = &#123;</div><div class=\"line\">      <span class=\"comment\">// 位置</span></div><div class=\"line\">      location: latLng,</div><div class=\"line\">      <span class=\"comment\">// 單位強度，這裏由 GeoJSON 內的 valueCount 屬性取得</span></div><div class=\"line\">      weight: results.features[i].properties.valueCount</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    heatmapData.push(weightedLoc);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"comment\">// 生成熱圖圖層</span></div><div class=\"line\">  <span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: heatmapData,</div><div class=\"line\">    <span class=\"attr\">dissipating</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">map</span>: map,</div><div class=\"line\">    <span class=\"attr\">radius</span>: <span class=\"number\">40</span>,</div><div class=\"line\">    <span class=\"attr\">gradient</span>: [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/jE7EkvSumXUFaRKArSMw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.50.00.png\" alt=\"螢幕快照 2015-04-29 下午3.50.00.png\">\nDEMO: <a href=\"http://jsbin.com/xafagi/1/\" target=\"_blank\" rel=\"external\">http://jsbin.com/xafagi/1/</a></p>\n<p>如果想要 debug 確認生成的熱圖是否正確，因為我們是利用 GeoJSON 產生熱圖，所以我們可以透過 <code>map.data.addGeoJson( geoJson );</code> 來加入 marker 供我們確認。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/iU5KQsFgRQKTwgEjNraG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.59.13.png\" alt=\"螢幕快照 2015-04-29 下午3.59.13.png\">\nDEMO: <a href=\"http://jsbin.com/xafagi/2/\" target=\"_blank\" rel=\"external\">http://jsbin.com/xafagi/2/</a></p>\n<p>參考資料：\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a>\n<a href=\"https://developers.google.com/maps/documentation/javascript/heatmaplayer\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/heatmaplayer</a></p>\n","excerpt":"","more":"<p>前陣子因為工作的需要，稍微研究了一下 Google Map 提供的 HeatMap (熱點圖/熱圖) API，實作方面也滿容易的，在這裡就簡單做個紀錄。</p>\n<p><strong>HeatMap</strong> (以下稱熱圖) 是用來表示<strong>資料數值強度與位置的可視化</strong>，Google 熱圖 API 在預設情況下，高強度的數值會以紅色表示，低強度的數值則是以綠色來表示。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/gg6DtVUASmSRqxaw8gpk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.37.46.png\" alt=\"螢幕快照 2015-04-29 下午3.37.46.png\">\n圖片來源: <a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a></p>\n<p>有了簡單的認知後，那麼就來說明如何透過 Google Map API 在 Google Map 載入熱圖。</p>\n<p>首先是在載入 Google Maps API 時，必須加入 <strong>visualization</strong> 這個 library。在後面加入 <code>libraries=visualization</code> 即可，要是想再加入其他 library 可用 <code>,</code> 逗號隔開。如果沒有載入 visualization 這個 library，熱圖會無法顯示。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span></div><div class=\"line\">  <span class=\"attr\">src</span>=<span class=\"string\">\"https://maps.googleapis.com/maps/api/js?libraries=visualization&amp;sensor=true_or_false\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再來，因爲熱圖其實是一連串 <strong>座標點</strong> 與 <strong>數值</strong> 的集合，所以我們要先準備好一個陣列來存放 LatLng 物件的集合：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 存放 google.maps.LatLng 物件的陣列</span></div><div class=\"line\"><span class=\"keyword\">var</span> heatmapData = [</div><div class=\"line\">  <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">37.782</span>, <span class=\"number\">-122.447</span>),</div><div class=\"line\">  <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">37.782</span>, <span class=\"number\">-122.445</span>),</div><div class=\"line\">true<span class=\"comment\">// 以下略 ...</span></div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 產生一個 Heatmap Layer</span></div><div class=\"line\"><span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: heatmapData</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將 heatmap 圖層加入至 map</span></div><div class=\"line\">heatmap.setMap(map);</div></pre></td></tr></table></figure>\n<p>如果想要改變熱圖樣式的話也很簡單，有兩種方式，第一種是在 <code>new google.maps.visualization.HeatmapLayer</code> 時加入樣式的設定，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: heatmapData,</div><div class=\"line\">  <span class=\"attr\">gradient</span>: [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>],\t<span class=\"comment\">// 指定顏色範圍 ex:透明, 紅, 綠, 藍</span></div><div class=\"line\">  radius: <span class=\"number\">10</span>,\t\t\t\t<span class=\"comment\">// 每個點的半徑 (單位 px)</span></div><div class=\"line\">  opacity: <span class=\"number\">0.5</span>\t\t\t<span class=\"comment\">// 熱圖圖層透明度 (0 ~ 1)</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>或是想改變已載入熱圖的樣式，可以透過 <code>heatmap.set()</code> :\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 改變範圍顏色</span></div><div class=\"line\">heatmap.set(<span class=\"string\">'gradient'</span>, [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改變透明度</span></div><div class=\"line\">heatmap.set(<span class=\"string\">'opacity'</span>, <span class=\"number\">0.5</span>);</div></pre></td></tr></table></figure></p>\n<p>完整範例可以參考 Google Heat Map 文件：\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a></p>\n<p>接著，同場加映。</p>\n<p>如果今天我們有一份完整的 GeoJSON (關於 GeoJSON 可參考<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\">前篇 GeoJSON 介紹</a>)文件，是否可以直接生成熱圖？ 當然沒問題。</p>\n<p>我們只要將取得的 GeoJSON 解析出來，並存入陣列內就可以輕鬆地生成熱圖。</p>\n<p>這是 GeoJSON 範例的格式，可以看出來這是一個 Point，而且有個屬性 valueCount，值為 5。\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">  <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\">      <span class=\"string\">\"coordinates\"</span>: [<span class=\"number\">121.52803907522677</span>, <span class=\"number\">25.036051507818932</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"properties\"</span>: &#123; <span class=\"string\">\"valueCount\"</span>: <span class=\"number\">5</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 畫熱圖</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw_heatmap</span>(<span class=\"params\">results</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> heatmapData = [];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; results.features.length; i++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 取得座標</span></div><div class=\"line\">    <span class=\"keyword\">var</span> coords = results.features[i].geometry.coordinates;</div><div class=\"line\">    <span class=\"comment\">// 要注意： LatLng 物件的經緯度順序與 GeoJSON 的座標順序相反</span></div><div class=\"line\">    <span class=\"keyword\">var</span> latLng = <span class=\"keyword\">new</span> google.maps.LatLng(coords[<span class=\"number\">1</span>], coords[<span class=\"number\">0</span>]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> weightedLoc = &#123;</div><div class=\"line\">      <span class=\"comment\">// 位置</span></div><div class=\"line\">      location: latLng,</div><div class=\"line\">      <span class=\"comment\">// 單位強度，這裏由 GeoJSON 內的 valueCount 屬性取得</span></div><div class=\"line\">      weight: results.features[i].properties.valueCount</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    heatmapData.push(weightedLoc);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"comment\">// 生成熱圖圖層</span></div><div class=\"line\">  <span class=\"keyword\">var</span> heatmap = <span class=\"keyword\">new</span> google.maps.visualization.HeatmapLayer(&#123;</div><div class=\"line\">    <span class=\"attr\">data</span>: heatmapData,</div><div class=\"line\">    <span class=\"attr\">dissipating</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">map</span>: map,</div><div class=\"line\">    <span class=\"attr\">radius</span>: <span class=\"number\">40</span>,</div><div class=\"line\">    <span class=\"attr\">gradient</span>: [<span class=\"string\">'transparent'</span>, <span class=\"string\">'#f00'</span>, <span class=\"string\">'#0f0'</span>, <span class=\"string\">'#00f'</span>]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/jE7EkvSumXUFaRKArSMw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.50.00.png\" alt=\"螢幕快照 2015-04-29 下午3.50.00.png\">\nDEMO: <a href=\"http://jsbin.com/xafagi/1/\">http://jsbin.com/xafagi/1/</a></p>\n<p>如果想要 debug 確認生成的熱圖是否正確，因為我們是利用 GeoJSON 產生熱圖，所以我們可以透過 <code>map.data.addGeoJson( geoJson );</code> 來加入 marker 供我們確認。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262458/iU5KQsFgRQKTwgEjNraG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-29%20%E4%B8%8B%E5%8D%883.59.13.png\" alt=\"螢幕快照 2015-04-29 下午3.59.13.png\">\nDEMO: <a href=\"http://jsbin.com/xafagi/2/\">http://jsbin.com/xafagi/2/</a></p>\n<p>參考資料：\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap\">https://developers.google.com/maps/documentation/javascript/examples/layer-heatmap</a>\n<a href=\"https://developers.google.com/maps/documentation/javascript/heatmaplayer\">https://developers.google.com/maps/documentation/javascript/heatmaplayer</a></p>\n"},{"layout":"post","title":"在 Google Map 加入 D3 圖像 - 2","date":"2015-05-20T07:49:00.000Z","comments":1,"_content":"[上一篇](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image \"在 Google Map 加入 D3 圖像 \")提到了如何在 Google Map 裡面加入 D3 的圖像，這次我們實際將資料套進去吧。\n\n資料來源是上篇提到的[臺北捷運各站進出量統計](http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1)的統計資料，因為台北市政府開放平台並沒有提供 CORS (跨來源資源共享)的服務，沒關係，我們直接將資料下載存成 json 檔案即可。 (範例為 2015/4 進出站人數)\n\n按照慣例，先看結果 - Demo: http://jsbin.com/wexiva/3/\n![螢幕快照 2015-05-20 下午11.54.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/276658/4DhTbWRwSvujvsxZC2Z5_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-20%20%E4%B8%8B%E5%8D%8811.54.46.png)\n\n藍色的是進站人數，橘色的是出站人數。可以看出各站在 4/1 的進出站人數相當平均。\n\n因為這次抓取的資料比較多，所以程式也稍微複雜一點，不過沒關係，概念還是很簡單的。\n不囉唆直接看 code.\n\n\n``` javascript\nvar map;\nvar overlay = new google.maps.OverlayView();\nvar sta_in = [], sta_out = [], mrtData;\n\n// 讀取資料, sta_in = 2015 年四月進站人數, sta_out = 2015 年四月出站人數.\n// 資料來源: http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\nd3.csv(\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\",\nfunction(data){\n  mrtData = data;\n\n  // 進站\n  d3.json(\"https://dl.dropboxusercontent.com/u/12537630/mrt-in-april.json\",\n  function(error, json) {\n    sta_in = json.result.results;\n    if( sta_in.length > 0 && sta_out.length > 0 ) { drawMap(); }\n  });\n\n  // 出站\n  d3.json(\"https://dl.dropboxusercontent.com/u/12537630/mrt-out-april.json\",\n  function(error, json) {\n    sta_out = json.result.results;\n    if( sta_in.length > 0 && sta_out.length > 0 ) { drawMap(); }\n  });\n});\n\nfunction drawMap() {\n\n    // 設定圓餅圖長寬, 半徑\n    var width = 35, height = 40, radius = Math.min(width, height) / 2;\n\n    // 透過 d3.scale.category10() 生成顏色\n    var color = d3.scale.category10();\n\n\t\t// d3.layout.pie()\n\t\tvar pie = d3.layout.pie();\n\n    // 設定圓餅內外層半徑, 這裏內層設 0.\n    var arc = d3.svg.arc()\n        .innerRadius(0)\n        .outerRadius(radius);\n\n    overlay.onAdd = function() {\n        var layer = d3.select(this.getPanes().overlayLayer).append(\"div\")\n            .attr(\"class\", \"stations\");\n\n        overlay.draw = function() {\n            var projection = this.getProjection(),\n                padding = 16;\n\n            // 針對每一筆捷運站增加 marker\n            var marker = layer.selectAll(\"svg\")\n                .data(d3.entries(mrtData))\n                .each(transform)\n                .enter().append(\"svg\")\n                .each(transform)\n                .attr({\n                    'class': \"marker\",\n                    \"width\": width,\n                    \"height\": height,\n                    \"transform\": \"translate(\" + width / 2 + \",\" + height / 2 + \")\",\n                });\n\n            // 將取得的進出站資料透過 .data( pie([ 進站人數, 出站人數 ]) ) 指定到圓餅圖中。\n            // sta_in[0] 代表 4/1 進站人數, sta_out[0] 代表 4/1 出站人數.\n            var g = marker.selectAll(\"g\")\n                .data(function(d, i) {\n                    return pie([parseInt(sta_in[0][d.value.name].replace(',', ''), 10), parseInt(sta_out[0][d.value.name].replace(',', ''), 10)]);\n                })\n                .enter()\n                .append(\"g\");\n\n            // 著色\n            g.append(\"path\")\n                .attr({\n                  \"fill\": function(d, i) { return color(i); },\n                  \"d\", arc,\n                  \"transform\": \"translate(\" + width / 2 + \",\" + height / 2 + \")\"\n                });\n\n            // 加入標籤\n            marker.append(\"text\")\n                .attr(\"x\", padding + 7)\n                .attr(\"y\", padding)\n                .attr(\"dy\", \".31em\")\n                .text(function(d) {\n                    return d.value.name;\n                });\n\n            function transform(d) {\n                d = new google.maps.LatLng(d.value.lat, d.value.lng);\n                d = projection.fromLatLngToDivPixel(d);\n                return d3.select(this)\n                    .style(\"left\", (d.x - padding) + \"px\")\n                    .style(\"top\", (d.y - padding) + \"px\");\n            }\n        };\n\n    };\n    overlay.setMap(map);\n}\n\n```\n\n\n#### 本系列文章列表:\n- [在 Google Map 加入 D3 圖像 (1)](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image)\n- [在 Google Map 加入 D3 圖像 (2)](http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2)\n\n***","source":"_posts/added-to-the-google-map-images-d3-2.md","raw":"---\nlayout: post\ntitle: '在 Google Map 加入 D3 圖像 - 2'\ndate: 2015-05-20 15:49\ncomments: true\ncategories: [D3.js]\ntags: [google map, d3.js]\n---\n[上一篇](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image \"在 Google Map 加入 D3 圖像 \")提到了如何在 Google Map 裡面加入 D3 的圖像，這次我們實際將資料套進去吧。\n\n資料來源是上篇提到的[臺北捷運各站進出量統計](http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1)的統計資料，因為台北市政府開放平台並沒有提供 CORS (跨來源資源共享)的服務，沒關係，我們直接將資料下載存成 json 檔案即可。 (範例為 2015/4 進出站人數)\n\n按照慣例，先看結果 - Demo: http://jsbin.com/wexiva/3/\n![螢幕快照 2015-05-20 下午11.54.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/276658/4DhTbWRwSvujvsxZC2Z5_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-20%20%E4%B8%8B%E5%8D%8811.54.46.png)\n\n藍色的是進站人數，橘色的是出站人數。可以看出各站在 4/1 的進出站人數相當平均。\n\n因為這次抓取的資料比較多，所以程式也稍微複雜一點，不過沒關係，概念還是很簡單的。\n不囉唆直接看 code.\n\n\n``` javascript\nvar map;\nvar overlay = new google.maps.OverlayView();\nvar sta_in = [], sta_out = [], mrtData;\n\n// 讀取資料, sta_in = 2015 年四月進站人數, sta_out = 2015 年四月出站人數.\n// 資料來源: http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\nd3.csv(\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\",\nfunction(data){\n  mrtData = data;\n\n  // 進站\n  d3.json(\"https://dl.dropboxusercontent.com/u/12537630/mrt-in-april.json\",\n  function(error, json) {\n    sta_in = json.result.results;\n    if( sta_in.length > 0 && sta_out.length > 0 ) { drawMap(); }\n  });\n\n  // 出站\n  d3.json(\"https://dl.dropboxusercontent.com/u/12537630/mrt-out-april.json\",\n  function(error, json) {\n    sta_out = json.result.results;\n    if( sta_in.length > 0 && sta_out.length > 0 ) { drawMap(); }\n  });\n});\n\nfunction drawMap() {\n\n    // 設定圓餅圖長寬, 半徑\n    var width = 35, height = 40, radius = Math.min(width, height) / 2;\n\n    // 透過 d3.scale.category10() 生成顏色\n    var color = d3.scale.category10();\n\n\t\t// d3.layout.pie()\n\t\tvar pie = d3.layout.pie();\n\n    // 設定圓餅內外層半徑, 這裏內層設 0.\n    var arc = d3.svg.arc()\n        .innerRadius(0)\n        .outerRadius(radius);\n\n    overlay.onAdd = function() {\n        var layer = d3.select(this.getPanes().overlayLayer).append(\"div\")\n            .attr(\"class\", \"stations\");\n\n        overlay.draw = function() {\n            var projection = this.getProjection(),\n                padding = 16;\n\n            // 針對每一筆捷運站增加 marker\n            var marker = layer.selectAll(\"svg\")\n                .data(d3.entries(mrtData))\n                .each(transform)\n                .enter().append(\"svg\")\n                .each(transform)\n                .attr({\n                    'class': \"marker\",\n                    \"width\": width,\n                    \"height\": height,\n                    \"transform\": \"translate(\" + width / 2 + \",\" + height / 2 + \")\",\n                });\n\n            // 將取得的進出站資料透過 .data( pie([ 進站人數, 出站人數 ]) ) 指定到圓餅圖中。\n            // sta_in[0] 代表 4/1 進站人數, sta_out[0] 代表 4/1 出站人數.\n            var g = marker.selectAll(\"g\")\n                .data(function(d, i) {\n                    return pie([parseInt(sta_in[0][d.value.name].replace(',', ''), 10), parseInt(sta_out[0][d.value.name].replace(',', ''), 10)]);\n                })\n                .enter()\n                .append(\"g\");\n\n            // 著色\n            g.append(\"path\")\n                .attr({\n                  \"fill\": function(d, i) { return color(i); },\n                  \"d\", arc,\n                  \"transform\": \"translate(\" + width / 2 + \",\" + height / 2 + \")\"\n                });\n\n            // 加入標籤\n            marker.append(\"text\")\n                .attr(\"x\", padding + 7)\n                .attr(\"y\", padding)\n                .attr(\"dy\", \".31em\")\n                .text(function(d) {\n                    return d.value.name;\n                });\n\n            function transform(d) {\n                d = new google.maps.LatLng(d.value.lat, d.value.lng);\n                d = projection.fromLatLngToDivPixel(d);\n                return d3.select(this)\n                    .style(\"left\", (d.x - padding) + \"px\")\n                    .style(\"top\", (d.y - padding) + \"px\");\n            }\n        };\n\n    };\n    overlay.setMap(map);\n}\n\n```\n\n\n#### 本系列文章列表:\n- [在 Google Map 加入 D3 圖像 (1)](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image)\n- [在 Google Map 加入 D3 圖像 (2)](http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2)\n\n***","slug":"added-to-the-google-map-images-d3-2","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjo600072kt4gtj79jwx","content":"<p><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\" title=\"在 Google Map 加入 D3 圖像 \">上一篇</a>提到了如何在 Google Map 裡面加入 D3 的圖像，這次我們實際將資料套進去吧。</p>\n<p>資料來源是上篇提到的<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\" target=\"_blank\" rel=\"external\">臺北捷運各站進出量統計</a>的統計資料，因為台北市政府開放平台並沒有提供 CORS (跨來源資源共享)的服務，沒關係，我們直接將資料下載存成 json 檔案即可。 (範例為 2015/4 進出站人數)</p>\n<p>按照慣例，先看結果 - Demo: <a href=\"http://jsbin.com/wexiva/3/\" target=\"_blank\" rel=\"external\">http://jsbin.com/wexiva/3/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276658/4DhTbWRwSvujvsxZC2Z5_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-20%20%E4%B8%8B%E5%8D%8811.54.46.png\" alt=\"螢幕快照 2015-05-20 下午11.54.46.png\"></p>\n<p>藍色的是進站人數，橘色的是出站人數。可以看出各站在 4/1 的進出站人數相當平均。</p>\n<p>因為這次抓取的資料比較多，所以程式也稍微複雜一點，不過沒關係，概念還是很簡單的。\n不囉唆直接看 code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map;</div><div class=\"line\"><span class=\"keyword\">var</span> overlay = <span class=\"keyword\">new</span> google.maps.OverlayView();</div><div class=\"line\"><span class=\"keyword\">var</span> sta_in = [], sta_out = [], mrtData;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 讀取資料, sta_in = 2015 年四月進站人數, sta_out = 2015 年四月出站人數.</span></div><div class=\"line\"><span class=\"comment\">// 資料來源: http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1</span></div><div class=\"line\">d3.csv(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\"</span>,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  mrtData = data;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 進站</span></div><div class=\"line\">  d3.json(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt-in-april.json\"</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, json</span>) </span>&#123;</div><div class=\"line\">    sta_in = json.result.results;</div><div class=\"line\">    <span class=\"keyword\">if</span>( sta_in.length &gt; <span class=\"number\">0</span> &amp;&amp; sta_out.length &gt; <span class=\"number\">0</span> ) &#123; drawMap(); &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 出站</span></div><div class=\"line\">  d3.json(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt-out-april.json\"</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, json</span>) </span>&#123;</div><div class=\"line\">    sta_out = json.result.results;</div><div class=\"line\">    <span class=\"keyword\">if</span>( sta_in.length &gt; <span class=\"number\">0</span> &amp;&amp; sta_out.length &gt; <span class=\"number\">0</span> ) &#123; drawMap(); &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定圓餅圖長寬, 半徑</span></div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">35</span>, height = <span class=\"number\">40</span>, radius = <span class=\"built_in\">Math</span>.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 透過 d3.scale.category10() 生成顏色</span></div><div class=\"line\">    <span class=\"keyword\">var</span> color = d3.scale.category10();</div><div class=\"line\"></div><div class=\"line\">truetrue<span class=\"comment\">// d3.layout.pie()</span></div><div class=\"line\">truetrue<span class=\"keyword\">var</span> pie = d3.layout.pie();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定圓餅內外層半徑, 這裏內層設 0.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arc = d3.svg.arc()</div><div class=\"line\">        .innerRadius(<span class=\"number\">0</span>)</div><div class=\"line\">        .outerRadius(radius);</div><div class=\"line\"></div><div class=\"line\">    overlay.onAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> layer = d3.select(<span class=\"keyword\">this</span>.getPanes().overlayLayer).append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"stations\"</span>);</div><div class=\"line\"></div><div class=\"line\">        overlay.draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> projection = <span class=\"keyword\">this</span>.getProjection(),</div><div class=\"line\">                padding = <span class=\"number\">16</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 針對每一筆捷運站增加 marker</span></div><div class=\"line\">            <span class=\"keyword\">var</span> marker = layer.selectAll(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">                .data(d3.entries(mrtData))</div><div class=\"line\">                .each(transform)</div><div class=\"line\">                .enter().append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">                .each(transform)</div><div class=\"line\">                .attr(&#123;</div><div class=\"line\">                    <span class=\"string\">'class'</span>: <span class=\"string\">\"marker\"</span>,</div><div class=\"line\">                    <span class=\"string\">\"width\"</span>: width,</div><div class=\"line\">                    <span class=\"string\">\"height\"</span>: height,</div><div class=\"line\">                    <span class=\"string\">\"transform\"</span>: <span class=\"string\">\"translate(\"</span> + width / <span class=\"number\">2</span> + <span class=\"string\">\",\"</span> + height / <span class=\"number\">2</span> + <span class=\"string\">\")\"</span>,</div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 將取得的進出站資料透過 .data( pie([ 進站人數, 出站人數 ]) ) 指定到圓餅圖中。</span></div><div class=\"line\">            <span class=\"comment\">// sta_in[0] 代表 4/1 進站人數, sta_out[0] 代表 4/1 出站人數.</span></div><div class=\"line\">            <span class=\"keyword\">var</span> g = marker.selectAll(<span class=\"string\">\"g\"</span>)</div><div class=\"line\">                .data(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> pie([<span class=\"built_in\">parseInt</span>(sta_in[<span class=\"number\">0</span>][d.value.name].replace(<span class=\"string\">','</span>, <span class=\"string\">''</span>), <span class=\"number\">10</span>), <span class=\"built_in\">parseInt</span>(sta_out[<span class=\"number\">0</span>][d.value.name].replace(<span class=\"string\">','</span>, <span class=\"string\">''</span>), <span class=\"number\">10</span>)]);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .enter()</div><div class=\"line\">                .append(<span class=\"string\">\"g\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 著色</span></div><div class=\"line\">            g.append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">                .attr(&#123;</div><div class=\"line\">                  <span class=\"string\">\"fill\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) </span>&#123; <span class=\"keyword\">return</span> color(i); &#125;,</div><div class=\"line\">                  <span class=\"string\">\"d\"</span>, arc,</div><div class=\"line\">                  <span class=\"string\">\"transform\"</span>: <span class=\"string\">\"translate(\"</span> + width / <span class=\"number\">2</span> + <span class=\"string\">\",\"</span> + height / <span class=\"number\">2</span> + <span class=\"string\">\")\"</span></div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 加入標籤</span></div><div class=\"line\">            marker.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">                .attr(<span class=\"string\">\"x\"</span>, padding + <span class=\"number\">7</span>)</div><div class=\"line\">                .attr(<span class=\"string\">\"y\"</span>, padding)</div><div class=\"line\">                .attr(<span class=\"string\">\"dy\"</span>, <span class=\"string\">\".31em\"</span>)</div><div class=\"line\">                .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> d.value.name;</div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">                d = <span class=\"keyword\">new</span> google.maps.LatLng(d.value.lat, d.value.lng);</div><div class=\"line\">                d = projection.fromLatLngToDivPixel(d);</div><div class=\"line\">                <span class=\"keyword\">return</span> d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">                    .style(<span class=\"string\">\"left\"</span>, (d.x - padding) + <span class=\"string\">\"px\"</span>)</div><div class=\"line\">                    .style(<span class=\"string\">\"top\"</span>, (d.y - padding) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">    overlay.setMap(map);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"本系列文章列表\"><a href=\"#本系列文章列表\" class=\"headerlink\" title=\"本系列文章列表:\"></a>本系列文章列表:</h4><ul>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\">在 Google Map 加入 D3 圖像 (1)</a></li>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2\">在 Google Map 加入 D3 圖像 (2)</a></li>\n</ul>\n<hr>\n","excerpt":"","more":"<p><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\" title=\"在 Google Map 加入 D3 圖像 \">上一篇</a>提到了如何在 Google Map 裡面加入 D3 的圖像，這次我們實際將資料套進去吧。</p>\n<p>資料來源是上篇提到的<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\">臺北捷運各站進出量統計</a>的統計資料，因為台北市政府開放平台並沒有提供 CORS (跨來源資源共享)的服務，沒關係，我們直接將資料下載存成 json 檔案即可。 (範例為 2015/4 進出站人數)</p>\n<p>按照慣例，先看結果 - Demo: <a href=\"http://jsbin.com/wexiva/3/\">http://jsbin.com/wexiva/3/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276658/4DhTbWRwSvujvsxZC2Z5_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-20%20%E4%B8%8B%E5%8D%8811.54.46.png\" alt=\"螢幕快照 2015-05-20 下午11.54.46.png\"></p>\n<p>藍色的是進站人數，橘色的是出站人數。可以看出各站在 4/1 的進出站人數相當平均。</p>\n<p>因為這次抓取的資料比較多，所以程式也稍微複雜一點，不過沒關係，概念還是很簡單的。\n不囉唆直接看 code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map;</div><div class=\"line\"><span class=\"keyword\">var</span> overlay = <span class=\"keyword\">new</span> google.maps.OverlayView();</div><div class=\"line\"><span class=\"keyword\">var</span> sta_in = [], sta_out = [], mrtData;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 讀取資料, sta_in = 2015 年四月進站人數, sta_out = 2015 年四月出站人數.</span></div><div class=\"line\"><span class=\"comment\">// 資料來源: http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1</span></div><div class=\"line\">d3.csv(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\"</span>,</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  mrtData = data;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 進站</span></div><div class=\"line\">  d3.json(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt-in-april.json\"</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, json</span>) </span>&#123;</div><div class=\"line\">    sta_in = json.result.results;</div><div class=\"line\">    <span class=\"keyword\">if</span>( sta_in.length &gt; <span class=\"number\">0</span> &amp;&amp; sta_out.length &gt; <span class=\"number\">0</span> ) &#123; drawMap(); &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 出站</span></div><div class=\"line\">  d3.json(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt-out-april.json\"</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, json</span>) </span>&#123;</div><div class=\"line\">    sta_out = json.result.results;</div><div class=\"line\">    <span class=\"keyword\">if</span>( sta_in.length &gt; <span class=\"number\">0</span> &amp;&amp; sta_out.length &gt; <span class=\"number\">0</span> ) &#123; drawMap(); &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定圓餅圖長寬, 半徑</span></div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">35</span>, height = <span class=\"number\">40</span>, radius = <span class=\"built_in\">Math</span>.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 透過 d3.scale.category10() 生成顏色</span></div><div class=\"line\">    <span class=\"keyword\">var</span> color = d3.scale.category10();</div><div class=\"line\"></div><div class=\"line\">truetrue<span class=\"comment\">// d3.layout.pie()</span></div><div class=\"line\">truetrue<span class=\"keyword\">var</span> pie = d3.layout.pie();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定圓餅內外層半徑, 這裏內層設 0.</span></div><div class=\"line\">    <span class=\"keyword\">var</span> arc = d3.svg.arc()</div><div class=\"line\">        .innerRadius(<span class=\"number\">0</span>)</div><div class=\"line\">        .outerRadius(radius);</div><div class=\"line\"></div><div class=\"line\">    overlay.onAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> layer = d3.select(<span class=\"keyword\">this</span>.getPanes().overlayLayer).append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">            .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"stations\"</span>);</div><div class=\"line\"></div><div class=\"line\">        overlay.draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> projection = <span class=\"keyword\">this</span>.getProjection(),</div><div class=\"line\">                padding = <span class=\"number\">16</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 針對每一筆捷運站增加 marker</span></div><div class=\"line\">            <span class=\"keyword\">var</span> marker = layer.selectAll(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">                .data(d3.entries(mrtData))</div><div class=\"line\">                .each(transform)</div><div class=\"line\">                .enter().append(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">                .each(transform)</div><div class=\"line\">                .attr(&#123;</div><div class=\"line\">                    <span class=\"string\">'class'</span>: <span class=\"string\">\"marker\"</span>,</div><div class=\"line\">                    <span class=\"string\">\"width\"</span>: width,</div><div class=\"line\">                    <span class=\"string\">\"height\"</span>: height,</div><div class=\"line\">                    <span class=\"string\">\"transform\"</span>: <span class=\"string\">\"translate(\"</span> + width / <span class=\"number\">2</span> + <span class=\"string\">\",\"</span> + height / <span class=\"number\">2</span> + <span class=\"string\">\")\"</span>,</div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 將取得的進出站資料透過 .data( pie([ 進站人數, 出站人數 ]) ) 指定到圓餅圖中。</span></div><div class=\"line\">            <span class=\"comment\">// sta_in[0] 代表 4/1 進站人數, sta_out[0] 代表 4/1 出站人數.</span></div><div class=\"line\">            <span class=\"keyword\">var</span> g = marker.selectAll(<span class=\"string\">\"g\"</span>)</div><div class=\"line\">                .data(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> pie([<span class=\"built_in\">parseInt</span>(sta_in[<span class=\"number\">0</span>][d.value.name].replace(<span class=\"string\">','</span>, <span class=\"string\">''</span>), <span class=\"number\">10</span>), <span class=\"built_in\">parseInt</span>(sta_out[<span class=\"number\">0</span>][d.value.name].replace(<span class=\"string\">','</span>, <span class=\"string\">''</span>), <span class=\"number\">10</span>)]);</div><div class=\"line\">                &#125;)</div><div class=\"line\">                .enter()</div><div class=\"line\">                .append(<span class=\"string\">\"g\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 著色</span></div><div class=\"line\">            g.append(<span class=\"string\">\"path\"</span>)</div><div class=\"line\">                .attr(&#123;</div><div class=\"line\">                  <span class=\"string\">\"fill\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>) </span>&#123; <span class=\"keyword\">return</span> color(i); &#125;,</div><div class=\"line\">                  <span class=\"string\">\"d\"</span>, arc,</div><div class=\"line\">                  <span class=\"string\">\"transform\"</span>: <span class=\"string\">\"translate(\"</span> + width / <span class=\"number\">2</span> + <span class=\"string\">\",\"</span> + height / <span class=\"number\">2</span> + <span class=\"string\">\")\"</span></div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 加入標籤</span></div><div class=\"line\">            marker.append(<span class=\"string\">\"text\"</span>)</div><div class=\"line\">                .attr(<span class=\"string\">\"x\"</span>, padding + <span class=\"number\">7</span>)</div><div class=\"line\">                .attr(<span class=\"string\">\"y\"</span>, padding)</div><div class=\"line\">                .attr(<span class=\"string\">\"dy\"</span>, <span class=\"string\">\".31em\"</span>)</div><div class=\"line\">                .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> d.value.name;</div><div class=\"line\">                &#125;);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">                d = <span class=\"keyword\">new</span> google.maps.LatLng(d.value.lat, d.value.lng);</div><div class=\"line\">                d = projection.fromLatLngToDivPixel(d);</div><div class=\"line\">                <span class=\"keyword\">return</span> d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">                    .style(<span class=\"string\">\"left\"</span>, (d.x - padding) + <span class=\"string\">\"px\"</span>)</div><div class=\"line\">                    .style(<span class=\"string\">\"top\"</span>, (d.y - padding) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">    overlay.setMap(map);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"本系列文章列表\"><a href=\"#本系列文章列表\" class=\"headerlink\" title=\"本系列文章列表:\"></a>本系列文章列表:</h4><ul>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\">在 Google Map 加入 D3 圖像 (1)</a></li>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2\">在 Google Map 加入 D3 圖像 (2)</a></li>\n</ul>\n<hr>\n"},{"layout":"post","title":"透過 Google map Geocoder API 以經緯度轉換地址資訊","date":"2015-04-27T06:34:00.000Z","comments":1,"_content":"前陣子因為需求的關係，需要以經緯度來轉換地址，幸好 Google map API 有提供 Geocoder 可以轉換大略地址的服務。使用方式非常簡單，我們這裡以立法院的經緯度 (25.0439892, 121.5212213) 為例：\n\n``` javascript\nvar geocoder = new google.maps.Geocoder();\n\n// google.maps.LatLng 物件\nvar coord = new google.maps.LatLng(25.0439892, 121.5212213);\n\n// 傳入 latLng 資訊至 geocoder.geocode\ngeocoder.geocode({'latLng': coord }, function(results, status) {\n  if (status === google.maps.GeocoderStatus.OK) {\n    // 如果有資料就會回傳\n    if (results) {\n      console.log(results[0]);\n    }\n  }\n  // 經緯度資訊錯誤\n  else {\n    alert(\"Reverse Geocoding failed because: \" + status);\n  }\n});\n```\n\n我們傳入經緯度資訊 google.maps.LatLng 物件，透過 `geocoder.geocode` 轉換出來的結果會是這樣的：\n\n![螢幕快照 2015-04-27 下午10.42.56.png](http://user-image.logdown.io/user/3292/blog/3340/post/262289/0bIqy71dT8Sb3YwERlEs_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.42.56.png)\n\n如上圖，Google map Geocoder API 會回傳一連串的地址資訊，如果你需要的是已經整合好格式的地址，那麼將上面範例中的`results[0]` 改為 `results[0].formatted_address` 就可以取得「**100台灣台北市中正區青島東路1號**」這樣的地址資訊了。\n\n下面提供一個完整的範例供各位參考：\n``` javascript\nvar map, geocoder, popup;\n\nfunction initMap() {\n    geocoder = new google.maps.Geocoder();\n    popup = new google.maps.InfoWindow();\n\n    // 地圖初始設定\n    var mapOptions = {\n        center: new google.maps.LatLng(25.04674, 121.52168),\n        zoom: 16,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    var mapElement = document.getElementById(\"mapDiv\");\n\n    // Google 地圖初始化\n    map = new google.maps.Map(mapElement, mapOptions);\n\n    // 設定 Google map 繪圖控制項\n    var drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [google.maps.drawing.OverlayType.MARKER]\n        }\n    });\n\n    // 開啟 Google map 繪圖控制項\n    drawingManager.setMap(map);\n\n    // 在地圖中加入 marker\n    google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {\n        // 取得 marker 的經緯座標\n        var markerPosition = marker.getPosition();\n\n        // 將經緯度透過 Google map Geocoder API 反查地址\n        geocoder.geocode({\n          'latLng': markerPosition\n        }, function(results, status) {\n            if (status === google.maps.GeocoderStatus.OK) {\n                if (results) {\n                    // 將取得的資訊傳入 marker 訊息泡泡\n                    showAddress(results[0], marker);\n                }\n            } else {\n                alert(\"Reverse Geocoding failed because: \" + status);\n            }\n        });\n    });\n\n    // 設定 marker 的訊息泡泡\n    function showAddress(result, marker) {\n        map.setCenter(marker.getPosition());\n        // 顯示傳入的地址資訊\n        var popupContent = '<b>地址: </b> ' + result.formatted_address;\n        popup.setContent(popupContent);\n        popup.open(map, marker);\n    }\n}\n```\n\n![螢幕快照 2015-04-27 下午10.52.20.png](http://user-image.logdown.io/user/3292/blog/3340/post/262289/boE1unBmQsCitdOxHG01_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.52.20.png)\n\nDemo: http://jsbin.com/penuqofabe/1/\n\n參考網址: [Google Map 地理編碼服務](https://developers.google.com/maps/documentation/javascript/geocoding?hl=zh-tw)\n","source":"_posts/address-information-is-obtained-through-google-map-geocoder-with-the-latitude-and-longitude.md","raw":"---\nlayout: post\ntitle: '透過 Google map Geocoder API 以經緯度轉換地址資訊'\ndate: 2015-04-27 14:34\ncomments: true\ncategories: [Google Map]\ntags: [google map, Geocoder]\n---\n前陣子因為需求的關係，需要以經緯度來轉換地址，幸好 Google map API 有提供 Geocoder 可以轉換大略地址的服務。使用方式非常簡單，我們這裡以立法院的經緯度 (25.0439892, 121.5212213) 為例：\n\n``` javascript\nvar geocoder = new google.maps.Geocoder();\n\n// google.maps.LatLng 物件\nvar coord = new google.maps.LatLng(25.0439892, 121.5212213);\n\n// 傳入 latLng 資訊至 geocoder.geocode\ngeocoder.geocode({'latLng': coord }, function(results, status) {\n  if (status === google.maps.GeocoderStatus.OK) {\n    // 如果有資料就會回傳\n    if (results) {\n      console.log(results[0]);\n    }\n  }\n  // 經緯度資訊錯誤\n  else {\n    alert(\"Reverse Geocoding failed because: \" + status);\n  }\n});\n```\n\n我們傳入經緯度資訊 google.maps.LatLng 物件，透過 `geocoder.geocode` 轉換出來的結果會是這樣的：\n\n![螢幕快照 2015-04-27 下午10.42.56.png](http://user-image.logdown.io/user/3292/blog/3340/post/262289/0bIqy71dT8Sb3YwERlEs_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.42.56.png)\n\n如上圖，Google map Geocoder API 會回傳一連串的地址資訊，如果你需要的是已經整合好格式的地址，那麼將上面範例中的`results[0]` 改為 `results[0].formatted_address` 就可以取得「**100台灣台北市中正區青島東路1號**」這樣的地址資訊了。\n\n下面提供一個完整的範例供各位參考：\n``` javascript\nvar map, geocoder, popup;\n\nfunction initMap() {\n    geocoder = new google.maps.Geocoder();\n    popup = new google.maps.InfoWindow();\n\n    // 地圖初始設定\n    var mapOptions = {\n        center: new google.maps.LatLng(25.04674, 121.52168),\n        zoom: 16,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    var mapElement = document.getElementById(\"mapDiv\");\n\n    // Google 地圖初始化\n    map = new google.maps.Map(mapElement, mapOptions);\n\n    // 設定 Google map 繪圖控制項\n    var drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: true,\n        drawingControlOptions: {\n            position: google.maps.ControlPosition.TOP_CENTER,\n            drawingModes: [google.maps.drawing.OverlayType.MARKER]\n        }\n    });\n\n    // 開啟 Google map 繪圖控制項\n    drawingManager.setMap(map);\n\n    // 在地圖中加入 marker\n    google.maps.event.addListener(drawingManager, 'markercomplete', function(marker) {\n        // 取得 marker 的經緯座標\n        var markerPosition = marker.getPosition();\n\n        // 將經緯度透過 Google map Geocoder API 反查地址\n        geocoder.geocode({\n          'latLng': markerPosition\n        }, function(results, status) {\n            if (status === google.maps.GeocoderStatus.OK) {\n                if (results) {\n                    // 將取得的資訊傳入 marker 訊息泡泡\n                    showAddress(results[0], marker);\n                }\n            } else {\n                alert(\"Reverse Geocoding failed because: \" + status);\n            }\n        });\n    });\n\n    // 設定 marker 的訊息泡泡\n    function showAddress(result, marker) {\n        map.setCenter(marker.getPosition());\n        // 顯示傳入的地址資訊\n        var popupContent = '<b>地址: </b> ' + result.formatted_address;\n        popup.setContent(popupContent);\n        popup.open(map, marker);\n    }\n}\n```\n\n![螢幕快照 2015-04-27 下午10.52.20.png](http://user-image.logdown.io/user/3292/blog/3340/post/262289/boE1unBmQsCitdOxHG01_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.52.20.png)\n\nDemo: http://jsbin.com/penuqofabe/1/\n\n參考網址: [Google Map 地理編碼服務](https://developers.google.com/maps/documentation/javascript/geocoding?hl=zh-tw)\n","slug":"address-information-is-obtained-through-google-map-geocoder-with-the-latitude-and-longitude","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjo9000b2kt4p15yegnw","content":"<p>前陣子因為需求的關係，需要以經緯度來轉換地址，幸好 Google map API 有提供 Geocoder 可以轉換大略地址的服務。使用方式非常簡單，我們這裡以立法院的經緯度 (25.0439892, 121.5212213) 為例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> google.maps.Geocoder();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// google.maps.LatLng 物件</span></div><div class=\"line\"><span class=\"keyword\">var</span> coord = <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.0439892</span>, <span class=\"number\">121.5212213</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 傳入 latLng 資訊至 geocoder.geocode</span></div><div class=\"line\">geocoder.geocode(&#123;<span class=\"string\">'latLng'</span>: coord &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results, status</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === google.maps.GeocoderStatus.OK) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果有資料就會回傳</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (results) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(results[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 經緯度資訊錯誤</span></div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Reverse Geocoding failed because: \"</span> + status);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我們傳入經緯度資訊 google.maps.LatLng 物件，透過 <code>geocoder.geocode</code> 轉換出來的結果會是這樣的：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262289/0bIqy71dT8Sb3YwERlEs_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.42.56.png\" alt=\"螢幕快照 2015-04-27 下午10.42.56.png\"></p>\n<p>如上圖，Google map Geocoder API 會回傳一連串的地址資訊，如果你需要的是已經整合好格式的地址，那麼將上面範例中的<code>results[0]</code> 改為 <code>results[0].formatted_address</code> 就可以取得「<strong>100台灣台北市中正區青島東路1號</strong>」這樣的地址資訊了。</p>\n<p>下面提供一個完整的範例供各位參考：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map, geocoder, popup;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    geocoder = <span class=\"keyword\">new</span> google.maps.Geocoder();</div><div class=\"line\">    popup = <span class=\"keyword\">new</span> google.maps.InfoWindow();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 地圖初始設定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mapOptions = &#123;</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.04674</span>, <span class=\"number\">121.52168</span>),</div><div class=\"line\">        <span class=\"attr\">zoom</span>: <span class=\"number\">16</span>,</div><div class=\"line\">        <span class=\"attr\">mapTypeId</span>: google.maps.MapTypeId.ROADMAP</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> mapElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mapDiv\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Google 地圖初始化</span></div><div class=\"line\">    map = <span class=\"keyword\">new</span> google.maps.Map(mapElement, mapOptions);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定 Google map 繪圖控制項</span></div><div class=\"line\">    <span class=\"keyword\">var</span> drawingManager = <span class=\"keyword\">new</span> google.maps.drawing.DrawingManager(&#123;</div><div class=\"line\">        <span class=\"attr\">drawingMode</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">drawingControl</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">drawingControlOptions</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">position</span>: google.maps.ControlPosition.TOP_CENTER,</div><div class=\"line\">            <span class=\"attr\">drawingModes</span>: [google.maps.drawing.OverlayType.MARKER]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 開啟 Google map 繪圖控制項</span></div><div class=\"line\">    drawingManager.setMap(map);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在地圖中加入 marker</span></div><div class=\"line\">    google.maps.event.addListener(drawingManager, <span class=\"string\">'markercomplete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">marker</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取得 marker 的經緯座標</span></div><div class=\"line\">        <span class=\"keyword\">var</span> markerPosition = marker.getPosition();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 將經緯度透過 Google map Geocoder API 反查地址</span></div><div class=\"line\">        geocoder.geocode(&#123;</div><div class=\"line\">          <span class=\"string\">'latLng'</span>: markerPosition</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results, status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (status === google.maps.GeocoderStatus.OK) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (results) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 將取得的資訊傳入 marker 訊息泡泡</span></div><div class=\"line\">                    showAddress(results[<span class=\"number\">0</span>], marker);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                alert(<span class=\"string\">\"Reverse Geocoding failed because: \"</span> + status);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定 marker 的訊息泡泡</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAddress</span>(<span class=\"params\">result, marker</span>) </span>&#123;</div><div class=\"line\">        map.setCenter(marker.getPosition());</div><div class=\"line\">        <span class=\"comment\">// 顯示傳入的地址資訊</span></div><div class=\"line\">        <span class=\"keyword\">var</span> popupContent = <span class=\"string\">'&lt;b&gt;地址: &lt;/b&gt; '</span> + result.formatted_address;</div><div class=\"line\">        popup.setContent(popupContent);</div><div class=\"line\">        popup.open(map, marker);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262289/boE1unBmQsCitdOxHG01_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.52.20.png\" alt=\"螢幕快照 2015-04-27 下午10.52.20.png\"></p>\n<p>Demo: <a href=\"http://jsbin.com/penuqofabe/1/\" target=\"_blank\" rel=\"external\">http://jsbin.com/penuqofabe/1/</a></p>\n<p>參考網址: <a href=\"https://developers.google.com/maps/documentation/javascript/geocoding?hl=zh-tw\" target=\"_blank\" rel=\"external\">Google Map 地理編碼服務</a></p>\n","excerpt":"","more":"<p>前陣子因為需求的關係，需要以經緯度來轉換地址，幸好 Google map API 有提供 Geocoder 可以轉換大略地址的服務。使用方式非常簡單，我們這裡以立法院的經緯度 (25.0439892, 121.5212213) 為例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> geocoder = <span class=\"keyword\">new</span> google.maps.Geocoder();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// google.maps.LatLng 物件</span></div><div class=\"line\"><span class=\"keyword\">var</span> coord = <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.0439892</span>, <span class=\"number\">121.5212213</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 傳入 latLng 資訊至 geocoder.geocode</span></div><div class=\"line\">geocoder.geocode(&#123;<span class=\"string\">'latLng'</span>: coord &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results, status</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === google.maps.GeocoderStatus.OK) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果有資料就會回傳</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (results) &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(results[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 經緯度資訊錯誤</span></div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Reverse Geocoding failed because: \"</span> + status);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我們傳入經緯度資訊 google.maps.LatLng 物件，透過 <code>geocoder.geocode</code> 轉換出來的結果會是這樣的：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262289/0bIqy71dT8Sb3YwERlEs_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.42.56.png\" alt=\"螢幕快照 2015-04-27 下午10.42.56.png\"></p>\n<p>如上圖，Google map Geocoder API 會回傳一連串的地址資訊，如果你需要的是已經整合好格式的地址，那麼將上面範例中的<code>results[0]</code> 改為 <code>results[0].formatted_address</code> 就可以取得「<strong>100台灣台北市中正區青島東路1號</strong>」這樣的地址資訊了。</p>\n<p>下面提供一個完整的範例供各位參考：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map, geocoder, popup;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    geocoder = <span class=\"keyword\">new</span> google.maps.Geocoder();</div><div class=\"line\">    popup = <span class=\"keyword\">new</span> google.maps.InfoWindow();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 地圖初始設定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mapOptions = &#123;</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.04674</span>, <span class=\"number\">121.52168</span>),</div><div class=\"line\">        <span class=\"attr\">zoom</span>: <span class=\"number\">16</span>,</div><div class=\"line\">        <span class=\"attr\">mapTypeId</span>: google.maps.MapTypeId.ROADMAP</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> mapElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mapDiv\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Google 地圖初始化</span></div><div class=\"line\">    map = <span class=\"keyword\">new</span> google.maps.Map(mapElement, mapOptions);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定 Google map 繪圖控制項</span></div><div class=\"line\">    <span class=\"keyword\">var</span> drawingManager = <span class=\"keyword\">new</span> google.maps.drawing.DrawingManager(&#123;</div><div class=\"line\">        <span class=\"attr\">drawingMode</span>: <span class=\"literal\">null</span>,</div><div class=\"line\">        <span class=\"attr\">drawingControl</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">drawingControlOptions</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">position</span>: google.maps.ControlPosition.TOP_CENTER,</div><div class=\"line\">            <span class=\"attr\">drawingModes</span>: [google.maps.drawing.OverlayType.MARKER]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 開啟 Google map 繪圖控制項</span></div><div class=\"line\">    drawingManager.setMap(map);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在地圖中加入 marker</span></div><div class=\"line\">    google.maps.event.addListener(drawingManager, <span class=\"string\">'markercomplete'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">marker</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 取得 marker 的經緯座標</span></div><div class=\"line\">        <span class=\"keyword\">var</span> markerPosition = marker.getPosition();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 將經緯度透過 Google map Geocoder API 反查地址</span></div><div class=\"line\">        geocoder.geocode(&#123;</div><div class=\"line\">          <span class=\"string\">'latLng'</span>: markerPosition</div><div class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results, status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (status === google.maps.GeocoderStatus.OK) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (results) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 將取得的資訊傳入 marker 訊息泡泡</span></div><div class=\"line\">                    showAddress(results[<span class=\"number\">0</span>], marker);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                alert(<span class=\"string\">\"Reverse Geocoding failed because: \"</span> + status);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 設定 marker 的訊息泡泡</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showAddress</span>(<span class=\"params\">result, marker</span>) </span>&#123;</div><div class=\"line\">        map.setCenter(marker.getPosition());</div><div class=\"line\">        <span class=\"comment\">// 顯示傳入的地址資訊</span></div><div class=\"line\">        <span class=\"keyword\">var</span> popupContent = <span class=\"string\">'&lt;b&gt;地址: &lt;/b&gt; '</span> + result.formatted_address;</div><div class=\"line\">        popup.setContent(popupContent);</div><div class=\"line\">        popup.open(map, marker);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262289/boE1unBmQsCitdOxHG01_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-27%20%E4%B8%8B%E5%8D%8810.52.20.png\" alt=\"螢幕快照 2015-04-27 下午10.52.20.png\"></p>\n<p>Demo: <a href=\"http://jsbin.com/penuqofabe/1/\">http://jsbin.com/penuqofabe/1/</a></p>\n<p>參考網址: <a href=\"https://developers.google.com/maps/documentation/javascript/geocoding?hl=zh-tw\">Google Map 地理編碼服務</a></p>\n"},{"layout":"post","title":"偵測 Google Map 的 InfoWindow 訊息框是否被開啟 (v3)","date":"2014-08-08T00:58:00.000Z","comments":1,"_content":"\n因為 Google Map 的 InfoWindow 是被新增出來的物件，所以我們可以透過修改 prototype 的方式，替 InfoWindow 增加新的 method。\n\n``` javascript\n  google.maps.InfoWindow.prototype.isOpen = function(){\n    var map = this.getMap();\n    return (map !== null && typeof map !== \"undefined\");\n  }\n\n  var popup = new google.maps.InfoWindow();\n  popup.isOpen();  // will return ture or false.\n\n```\n\n參考資料： http://stackoverflow.com/a/12410385\n","source":"_posts/google-map-infowindow-bubble-detection-box-is-opened.md","raw":"---\nlayout: post\ntitle: '偵測 Google Map 的 InfoWindow 訊息框是否被開啟 (v3)'\ndate: 2014-08-08 08:58\ncomments: true\ncategories: [Google Map]\ntags: [google map, infoWindow]\n---\n\n因為 Google Map 的 InfoWindow 是被新增出來的物件，所以我們可以透過修改 prototype 的方式，替 InfoWindow 增加新的 method。\n\n``` javascript\n  google.maps.InfoWindow.prototype.isOpen = function(){\n    var map = this.getMap();\n    return (map !== null && typeof map !== \"undefined\");\n  }\n\n  var popup = new google.maps.InfoWindow();\n  popup.isOpen();  // will return ture or false.\n\n```\n\n參考資料： http://stackoverflow.com/a/12410385\n","slug":"google-map-infowindow-bubble-detection-box-is-opened","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjob000d2kt40vvsqbxk","content":"<p>因為 Google Map 的 InfoWindow 是被新增出來的物件，所以我們可以透過修改 prototype 的方式，替 InfoWindow 增加新的 method。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">google.maps.InfoWindow.prototype.isOpen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> map = <span class=\"keyword\">this</span>.getMap();</div><div class=\"line\">  <span class=\"keyword\">return</span> (map !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> map !== <span class=\"string\">\"undefined\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> popup = <span class=\"keyword\">new</span> google.maps.InfoWindow();</div><div class=\"line\">popup.isOpen();  <span class=\"comment\">// will return ture or false.</span></div></pre></td></tr></table></figure>\n<p>參考資料： <a href=\"http://stackoverflow.com/a/12410385\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/a/12410385</a></p>\n","excerpt":"","more":"<p>因為 Google Map 的 InfoWindow 是被新增出來的物件，所以我們可以透過修改 prototype 的方式，替 InfoWindow 增加新的 method。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">google.maps.InfoWindow.prototype.isOpen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> map = <span class=\"keyword\">this</span>.getMap();</div><div class=\"line\">  <span class=\"keyword\">return</span> (map !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> map !== <span class=\"string\">\"undefined\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> popup = <span class=\"keyword\">new</span> google.maps.InfoWindow();</div><div class=\"line\">popup.isOpen();  <span class=\"comment\">// will return ture or false.</span></div></pre></td></tr></table></figure>\n<p>參考資料： <a href=\"http://stackoverflow.com/a/12410385\">http://stackoverflow.com/a/12410385</a></p>\n"},{"layout":"post","title":"淺談 ECMAScript 5 嚴格模式 (Strict Mode) ","date":"2011-11-27T18:43:00.000Z","comments":1,"_content":"自 ECMAScript 5 開始，增加了一個 嚴格模式 (Strict Mode) 的新特性。\n\nECMAScript 5 雖然可以跟前一版的 ECMAScript 3 相容 (ECMAScript 4 已廢棄)，但是，當我們宣告為 \"Strict Mode\" 後，那些 ECMAScript 5 不再建議使用的 ECMAScript 3 的舊語法會被全面禁止。\n一旦出現，便會出現錯誤或拋出異常 (Exception)。\n\nStrict Mode 的宣告方式有兩種：\n\n若要在全域範圍內宣告使用 Strict Mode，只需在程式碼的第一行加上下面敘述，如：\n\n``` javascript\n\"use strict\";\n```\n\n也可以在指定的函數內宣告使用 Strict Mode，在函數的第一行加上下面敘述，如：\n\n``` javascript\n// Non-strict code...\nfunction func_UseStrictMode() {\n  \"use strict\";\n   // ... your code ...\n}\n```\n\n因為宣告使用 Strict Mode 時只需要加入一段 \"use strict\"; 敘述式，所以不會對些舊時的瀏覽器造成任何相容性的問題。 再來簡單介紹一下 Strict Mode 與非 Strict Mode 的差異：\n\n**變數：**\nJavaScript 使用變數的時候不一定要先宣告 (若直接使用未宣告的變數會自動變成全域變數，強烈不建議!) ，但在 Strict Mode 下，變數使用前必須要先用 var 宣告後才能拿來用，否則會出現錯誤。\n\n``` javascript\n\"use strict\";\n\ntry {\n  i = 1;\n}\ncatch (err) {\n  alert(err);    // throw exception !\n}\n```\n\n另外，在 Strict Mode 下刪除全域變數、函數，或是函數內的參數都會被認為是錯誤的語法。\n如下：\n\n``` javascript\n\"use strict\";\n\nvar i = 1;\nvar myfunc = function () { };\ndelete i;         // Error !\ndelete myfunc;    // Error !\n\nfunction myfunc2(arg) {\n    delete arg;    // Error !\n}\n```\n\n**屬性**：\n在定義物件的屬性時，屬性名稱不可重複，同一個物件內不能重複定義相同屬性，否則會出現異常：\n\n``` javascript\n\"use strict\";\n{\n  foo: true,\n  foo: false;     // Error\n}\n```\n\n**函數與參數**：\n在 Strict Mode 下，函數的參數 (arguments) 不能有相同名稱的變數，如下：\n\n``` javascript\nfunction func1(arg1, arg2) { }    // OK\nfunction func2(arg, arg) { }      // Error\n```\n\n同時，函數的 arguments 屬性在 Strict Mode 下也是唯讀的：\n\n``` javascript\n\"use strict\";\n\nfunction func(arg) {\n  arguments = [\"...\"];    // not allow, Error.\n}\n```\n\n另外，對 arguments.caller 和 arguments.callee 的存取會出現錯誤。\n\n``` javascript\n\"use strict\";\n\nfunction test(){\n\tfunction inner(){\n  \t// Don't exist, either\n    test.arguments = ...;\t\t// Error\n    inner.caller = ...;\t\t\t// Error\n  }\n}\n```\n\n因此，任何需要用到的匿名函數都必須先命名，例如：\n\n``` javascript\nsetTimeout(function later(){\n\t// do stuff...\n\tsetTimeout( later, 1000 );\n}, 1000 );\n```\n\n最後，當使用 null 或者 undefined 作為 Function.prototype.call 或 Function.prototype.apply 方法的第一個參數時，函數內部的 this 將會指向 global object。\n\n而 Strict mode 將會阻止其執行並拋出異常：\n\n``` javascript\n(function(){ ... }).call( null );\t\t// Exception\n```\n\n**eval**：\neval 是保留的關鍵字，不能作為變數名、函數名、物件的屬性，甚至是變數都不行。\n所以，以下的程式碼**全都是錯誤**的：\n\n``` javascript\n// All generate errors...\nobj.eval = ...\nobj.foo = eval;\nvar eval = ...;\n\nfor ( var eval in ... ) {}\nfunction eval(){}\nfunction test(eval){}\nfunction(eval){}\nnew Function(\"eval\")\n```\n\n另外，在 Strict mode 透過 eval 引入的變數也會無效，如下：\n\n``` javascript\neval(\"var a = false;\");\nprint( typeof a );\t\t\t// undefined.\n```\n\n**with() { }**：\n在 Strict mode 下沒有這個東西了，如果使用的話會被認為語法錯誤。\n\n**其他**：\n在 Strict mode 下，不再支援 8 進位數字。\n實際在 Firefox 8 測試的結果，會出現 \"octal literals and octal escape sequences are deprecated\" 的錯誤：在非 Strict mode 下，010 則是會 alert 出 8 這個數字。\n\n","source":"_posts/ecmascript-5-strict-mode.md","raw":"---\nlayout: post\ntitle: '淺談 ECMAScript 5 嚴格模式 (Strict Mode) '\ndate: 2011-11-28 02:43\ncomments: true\ncategories: [ECMAScript]\ntags: [javascript, ecmascript]\n---\n自 ECMAScript 5 開始，增加了一個 嚴格模式 (Strict Mode) 的新特性。\n\nECMAScript 5 雖然可以跟前一版的 ECMAScript 3 相容 (ECMAScript 4 已廢棄)，但是，當我們宣告為 \"Strict Mode\" 後，那些 ECMAScript 5 不再建議使用的 ECMAScript 3 的舊語法會被全面禁止。\n一旦出現，便會出現錯誤或拋出異常 (Exception)。\n\nStrict Mode 的宣告方式有兩種：\n\n若要在全域範圍內宣告使用 Strict Mode，只需在程式碼的第一行加上下面敘述，如：\n\n``` javascript\n\"use strict\";\n```\n\n也可以在指定的函數內宣告使用 Strict Mode，在函數的第一行加上下面敘述，如：\n\n``` javascript\n// Non-strict code...\nfunction func_UseStrictMode() {\n  \"use strict\";\n   // ... your code ...\n}\n```\n\n因為宣告使用 Strict Mode 時只需要加入一段 \"use strict\"; 敘述式，所以不會對些舊時的瀏覽器造成任何相容性的問題。 再來簡單介紹一下 Strict Mode 與非 Strict Mode 的差異：\n\n**變數：**\nJavaScript 使用變數的時候不一定要先宣告 (若直接使用未宣告的變數會自動變成全域變數，強烈不建議!) ，但在 Strict Mode 下，變數使用前必須要先用 var 宣告後才能拿來用，否則會出現錯誤。\n\n``` javascript\n\"use strict\";\n\ntry {\n  i = 1;\n}\ncatch (err) {\n  alert(err);    // throw exception !\n}\n```\n\n另外，在 Strict Mode 下刪除全域變數、函數，或是函數內的參數都會被認為是錯誤的語法。\n如下：\n\n``` javascript\n\"use strict\";\n\nvar i = 1;\nvar myfunc = function () { };\ndelete i;         // Error !\ndelete myfunc;    // Error !\n\nfunction myfunc2(arg) {\n    delete arg;    // Error !\n}\n```\n\n**屬性**：\n在定義物件的屬性時，屬性名稱不可重複，同一個物件內不能重複定義相同屬性，否則會出現異常：\n\n``` javascript\n\"use strict\";\n{\n  foo: true,\n  foo: false;     // Error\n}\n```\n\n**函數與參數**：\n在 Strict Mode 下，函數的參數 (arguments) 不能有相同名稱的變數，如下：\n\n``` javascript\nfunction func1(arg1, arg2) { }    // OK\nfunction func2(arg, arg) { }      // Error\n```\n\n同時，函數的 arguments 屬性在 Strict Mode 下也是唯讀的：\n\n``` javascript\n\"use strict\";\n\nfunction func(arg) {\n  arguments = [\"...\"];    // not allow, Error.\n}\n```\n\n另外，對 arguments.caller 和 arguments.callee 的存取會出現錯誤。\n\n``` javascript\n\"use strict\";\n\nfunction test(){\n\tfunction inner(){\n  \t// Don't exist, either\n    test.arguments = ...;\t\t// Error\n    inner.caller = ...;\t\t\t// Error\n  }\n}\n```\n\n因此，任何需要用到的匿名函數都必須先命名，例如：\n\n``` javascript\nsetTimeout(function later(){\n\t// do stuff...\n\tsetTimeout( later, 1000 );\n}, 1000 );\n```\n\n最後，當使用 null 或者 undefined 作為 Function.prototype.call 或 Function.prototype.apply 方法的第一個參數時，函數內部的 this 將會指向 global object。\n\n而 Strict mode 將會阻止其執行並拋出異常：\n\n``` javascript\n(function(){ ... }).call( null );\t\t// Exception\n```\n\n**eval**：\neval 是保留的關鍵字，不能作為變數名、函數名、物件的屬性，甚至是變數都不行。\n所以，以下的程式碼**全都是錯誤**的：\n\n``` javascript\n// All generate errors...\nobj.eval = ...\nobj.foo = eval;\nvar eval = ...;\n\nfor ( var eval in ... ) {}\nfunction eval(){}\nfunction test(eval){}\nfunction(eval){}\nnew Function(\"eval\")\n```\n\n另外，在 Strict mode 透過 eval 引入的變數也會無效，如下：\n\n``` javascript\neval(\"var a = false;\");\nprint( typeof a );\t\t\t// undefined.\n```\n\n**with() { }**：\n在 Strict mode 下沒有這個東西了，如果使用的話會被認為語法錯誤。\n\n**其他**：\n在 Strict mode 下，不再支援 8 進位數字。\n實際在 Firefox 8 測試的結果，會出現 \"octal literals and octal escape sequences are deprecated\" 的錯誤：在非 Strict mode 下，010 則是會 alert 出 8 這個數字。\n\n","slug":"ecmascript-5-strict-mode","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoe000h2kt433xvy1e3","content":"<p>自 ECMAScript 5 開始，增加了一個 嚴格模式 (Strict Mode) 的新特性。</p>\n<p>ECMAScript 5 雖然可以跟前一版的 ECMAScript 3 相容 (ECMAScript 4 已廢棄)，但是，當我們宣告為 &quot;Strict Mode&quot; 後，那些 ECMAScript 5 不再建議使用的 ECMAScript 3 的舊語法會被全面禁止。\n一旦出現，便會出現錯誤或拋出異常 (Exception)。</p>\n<p>Strict Mode 的宣告方式有兩種：</p>\n<p>若要在全域範圍內宣告使用 Strict Mode，只需在程式碼的第一行加上下面敘述，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div></pre></td></tr></table></figure>\n<p>也可以在指定的函數內宣告使用 Strict Mode，在函數的第一行加上下面敘述，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Non-strict code...</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_UseStrictMode</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</div><div class=\"line\">   <span class=\"comment\">// ... your code ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因為宣告使用 Strict Mode 時只需要加入一段 &quot;use strict&quot;; 敘述式，所以不會對些舊時的瀏覽器造成任何相容性的問題。 再來簡單介紹一下 Strict Mode 與非 Strict Mode 的差異：</p>\n<p><strong>變數：</strong>\nJavaScript 使用變數的時候不一定要先宣告 (若直接使用未宣告的變數會自動變成全域變數，強烈不建議!) ，但在 Strict Mode 下，變數使用前必須要先用 var 宣告後才能拿來用，否則會出現錯誤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  i = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  alert(err);    <span class=\"comment\">// throw exception !</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，在 Strict Mode 下刪除全域變數、函數，或是函數內的參數都會被認為是錯誤的語法。\n如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\"><span class=\"keyword\">delete</span> i;         <span class=\"comment\">// Error !</span></div><div class=\"line\"><span class=\"keyword\">delete</span> myfunc;    <span class=\"comment\">// Error !</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc2</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> arg;    <span class=\"comment\">// Error !</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>屬性</strong>：\n在定義物件的屬性時，屬性名稱不可重複，同一個物件內不能重複定義相同屬性，否則會出現異常：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"literal\">false</span>;     <span class=\"comment\">// Error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>函數與參數</strong>：\n在 Strict Mode 下，函數的參數 (arguments) 不能有相同名稱的變數，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; &#125;    <span class=\"comment\">// OK</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\">arg, arg</span>) </span>&#123; &#125;      <span class=\"comment\">// Error</span></div></pre></td></tr></table></figure>\n<p>同時，函數的 arguments 屬性在 Strict Mode 下也是唯讀的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">arguments</span> = [<span class=\"string\">\"...\"</span>];    <span class=\"comment\">// not allow, Error.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，對 arguments.caller 和 arguments.callee 的存取會出現錯誤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// Don't exist, either</span></div><div class=\"line\">    test.arguments = ...;\t\t<span class=\"comment\">// Error</span></div><div class=\"line\">    inner.caller = ...;\t\t\t<span class=\"comment\">// Error</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因此，任何需要用到的匿名函數都必須先命名，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">later</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">true<span class=\"comment\">// do stuff...</span></div><div class=\"line\">truesetTimeout( later, <span class=\"number\">1000</span> );</div><div class=\"line\">&#125;, <span class=\"number\">1000</span> );</div></pre></td></tr></table></figure>\n<p>最後，當使用 null 或者 undefined 作為 Function.prototype.call 或 Function.prototype.apply 方法的第一個參數時，函數內部的 this 將會指向 global object。</p>\n<p>而 Strict mode 將會阻止其執行並拋出異常：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;).call( <span class=\"literal\">null</span> );\t\t<span class=\"comment\">// Exception</span></div></pre></td></tr></table></figure>\n<p><strong>eval</strong>：\neval 是保留的關鍵字，不能作為變數名、函數名、物件的屬性，甚至是變數都不行。\n所以，以下的程式碼<strong>全都是錯誤</strong>的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// All generate errors...</span></div><div class=\"line\">obj.eval = ...</div><div class=\"line\">obj.foo = <span class=\"built_in\">eval</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = ...;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> <span class=\"keyword\">in</span> ... ) &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eval</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">eval</span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eval</span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"eval\"</span>)</div></pre></td></tr></table></figure>\n<p>另外，在 Strict mode 透過 eval 引入的變數也會無效，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"var a = false;\"</span>);</div><div class=\"line\">print( <span class=\"keyword\">typeof</span> a );\t\t\t<span class=\"comment\">// undefined.</span></div></pre></td></tr></table></figure>\n<p><strong>with() { }</strong>：\n在 Strict mode 下沒有這個東西了，如果使用的話會被認為語法錯誤。</p>\n<p><strong>其他</strong>：\n在 Strict mode 下，不再支援 8 進位數字。\n實際在 Firefox 8 測試的結果，會出現 &quot;octal literals and octal escape sequences are deprecated&quot; 的錯誤：在非 Strict mode 下，010 則是會 alert 出 8 這個數字。</p>\n","excerpt":"","more":"<p>自 ECMAScript 5 開始，增加了一個 嚴格模式 (Strict Mode) 的新特性。</p>\n<p>ECMAScript 5 雖然可以跟前一版的 ECMAScript 3 相容 (ECMAScript 4 已廢棄)，但是，當我們宣告為 &quot;Strict Mode&quot; 後，那些 ECMAScript 5 不再建議使用的 ECMAScript 3 的舊語法會被全面禁止。\n一旦出現，便會出現錯誤或拋出異常 (Exception)。</p>\n<p>Strict Mode 的宣告方式有兩種：</p>\n<p>若要在全域範圍內宣告使用 Strict Mode，只需在程式碼的第一行加上下面敘述，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div></pre></td></tr></table></figure>\n<p>也可以在指定的函數內宣告使用 Strict Mode，在函數的第一行加上下面敘述，如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Non-strict code...</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func_UseStrictMode</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"meta\">  \"use strict\"</span>;</div><div class=\"line\">   <span class=\"comment\">// ... your code ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因為宣告使用 Strict Mode 時只需要加入一段 &quot;use strict&quot;; 敘述式，所以不會對些舊時的瀏覽器造成任何相容性的問題。 再來簡單介紹一下 Strict Mode 與非 Strict Mode 的差異：</p>\n<p><strong>變數：</strong>\nJavaScript 使用變數的時候不一定要先宣告 (若直接使用未宣告的變數會自動變成全域變數，強烈不建議!) ，但在 Strict Mode 下，變數使用前必須要先用 var 宣告後才能拿來用，否則會出現錯誤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">  i = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  alert(err);    <span class=\"comment\">// throw exception !</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，在 Strict Mode 下刪除全域變數、函數，或是函數內的參數都會被認為是錯誤的語法。\n如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> myfunc = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; &#125;;</div><div class=\"line\"><span class=\"keyword\">delete</span> i;         <span class=\"comment\">// Error !</span></div><div class=\"line\"><span class=\"keyword\">delete</span> myfunc;    <span class=\"comment\">// Error !</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myfunc2</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">delete</span> arg;    <span class=\"comment\">// Error !</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>屬性</strong>：\n在定義物件的屬性時，屬性名稱不可重複，同一個物件內不能重複定義相同屬性，否則會出現異常：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">foo</span>: <span class=\"literal\">false</span>;     <span class=\"comment\">// Error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>函數與參數</strong>：\n在 Strict Mode 下，函數的參數 (arguments) 不能有相同名稱的變數，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\">arg1, arg2</span>) </span>&#123; &#125;    <span class=\"comment\">// OK</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\">arg, arg</span>) </span>&#123; &#125;      <span class=\"comment\">// Error</span></div></pre></td></tr></table></figure>\n<p>同時，函數的 arguments 屬性在 Strict Mode 下也是唯讀的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">arguments</span> = [<span class=\"string\">\"...\"</span>];    <span class=\"comment\">// not allow, Error.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另外，對 arguments.caller 和 arguments.callee 的存取會出現錯誤。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inner</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  \t<span class=\"comment\">// Don't exist, either</span></div><div class=\"line\">    test.arguments = ...;\t\t<span class=\"comment\">// Error</span></div><div class=\"line\">    inner.caller = ...;\t\t\t<span class=\"comment\">// Error</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因此，任何需要用到的匿名函數都必須先命名，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">later</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">true<span class=\"comment\">// do stuff...</span></div><div class=\"line\">truesetTimeout( later, <span class=\"number\">1000</span> );</div><div class=\"line\">&#125;, <span class=\"number\">1000</span> );</div></pre></td></tr></table></figure>\n<p>最後，當使用 null 或者 undefined 作為 Function.prototype.call 或 Function.prototype.apply 方法的第一個參數時，函數內部的 this 將會指向 global object。</p>\n<p>而 Strict mode 將會阻止其執行並拋出異常：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;).call( <span class=\"literal\">null</span> );\t\t<span class=\"comment\">// Exception</span></div></pre></td></tr></table></figure>\n<p><strong>eval</strong>：\neval 是保留的關鍵字，不能作為變數名、函數名、物件的屬性，甚至是變數都不行。\n所以，以下的程式碼<strong>全都是錯誤</strong>的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// All generate errors...</span></div><div class=\"line\">obj.eval = ...</div><div class=\"line\">obj.foo = <span class=\"built_in\">eval</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> = ...;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> <span class=\"built_in\">eval</span> <span class=\"keyword\">in</span> ... ) &#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eval</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">eval</span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eval</span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"eval\"</span>)</div></pre></td></tr></table></figure>\n<p>另外，在 Strict mode 透過 eval 引入的變數也會無效，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">\"var a = false;\"</span>);</div><div class=\"line\">print( <span class=\"keyword\">typeof</span> a );\t\t\t<span class=\"comment\">// undefined.</span></div></pre></td></tr></table></figure>\n<p><strong>with() { }</strong>：\n在 Strict mode 下沒有這個東西了，如果使用的話會被認為語法錯誤。</p>\n<p><strong>其他</strong>：\n在 Strict mode 下，不再支援 8 進位數字。\n實際在 Firefox 8 測試的結果，會出現 &quot;octal literals and octal escape sequences are deprecated&quot; 的錯誤：在非 Strict mode 下，010 則是會 alert 出 8 這個數字。</p>\n"},{"layout":"post","title":"在 Google Map 加入 D3 圖像","date":"2015-05-19T08:05:00.000Z","comments":1,"_content":"因為昨天 [台北市政府開放平台](http://data.taipei/) 開始提供 [臺北捷運各站進出量統計](http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1) 的統計資料，所以就在思考可以利用這份資料做什麼應用，第一個想到的就是能否透過 D3 與地圖的共同呈現，當然就從我最熟悉的 Google Map 開始。\n\n不過這篇文章只會介紹到如何在 Google Map 加入 D3 (SVG) 圖像。\n等我將捷運各站資訊加入後也許會還有下回，哈哈哈。\n\n先看結果 - Demo: http://output.jsbin.com/wexiva/1/\n![螢幕快照 2015-05-19 下午11.34.22.png](http://user-image.logdown.io/user/3292/blog/3340/post/276547/NyZaTlSTDuH8v6DRzWAY_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-19%20%E4%B8%8B%E5%8D%8811.34.22.png)\n\n整個程式非常簡單，首先在 Google map 加入一個 `google.maps.OverlayView()`，然後透過 `d3.csv` 載入資料。在繪製 marker (圓點) 的時候，透過自訂的 `transform function` 去指定它的座標就完成了。\n\n相關程式如下:\n\n``` javascript\n\n// 捷運各站經緯度資訊: https://dl.dropboxusercontent.com/u/12537630/mrt.csv\n// 資料來源: https://github.com/repeat/taipei-metro-stations\n\nd3.csv(\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\", function(data){\n  var overlay = new google.maps.OverlayView();\n\n  // 新增 OverlayView 到 google map\n  overlay.onAdd = function() {\n    var layer = d3.select(this.getPanes().overlayLayer).append(\"div\")\n        .attr(\"class\", \"stations\");\n\n    overlay.draw = function() {\n      var projection = this.getProjection(), padding = 16;\n\n      var marker = layer.selectAll(\"svg\")\n          .data(d3.entries(data))\n          .each(transform)\n          .enter().append(\"svg:svg\")\n            .each(transform)\n            .attr(\"class\", \"marker\");\n\n      // 加入圓點\n      marker.append(\"svg:circle\")\n          .attr(\"r\", 6)\n          .attr(\"cx\", padding)\n          .attr(\"cy\", padding);\n\n      // 加入標籤\n      marker.append(\"svg:text\")\n          .attr(\"x\", padding + 7)\n          .attr(\"y\", padding)\n          .attr(\"dy\", \".31em\")\n          .text(function(d) { return d.value.name; });\n\n      // transform function. 指定每個點的座標.\n      function transform(d) {\n        d = new google.maps.LatLng(d.value.lat, d.value.lng);\n        d = projection.fromLatLngToDivPixel(d);\n        return d3.select(this)\n            .style(\"left\", (d.x - padding) + \"px\")\n            .style(\"top\", (d.y - padding) + \"px\");\n      }\n    };\n  };\n\n  // 將 overlay 加入到 google 地圖\n  overlay.setMap(map);\n});\n```\n\n#### 參考:\n- http://bl.ocks.org/mbostock/899711\n- https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw\n\n***\n\n#### 本系列文章列表:\n- [在 Google Map 加入 D3 圖像 (1)](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image)\n- [在 Google Map 加入 D3 圖像 (2)](http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2)\n\n***","source":"_posts/join-the-d3-in-google-map-image.md","raw":"---\nlayout: post\ntitle: '在 Google Map 加入 D3 圖像'\ndate: 2015-05-19 16:05\ncomments: true\ncategories: [D3.js]\ntags: [d3.js, google map]\n---\n因為昨天 [台北市政府開放平台](http://data.taipei/) 開始提供 [臺北捷運各站進出量統計](http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1) 的統計資料，所以就在思考可以利用這份資料做什麼應用，第一個想到的就是能否透過 D3 與地圖的共同呈現，當然就從我最熟悉的 Google Map 開始。\n\n不過這篇文章只會介紹到如何在 Google Map 加入 D3 (SVG) 圖像。\n等我將捷運各站資訊加入後也許會還有下回，哈哈哈。\n\n先看結果 - Demo: http://output.jsbin.com/wexiva/1/\n![螢幕快照 2015-05-19 下午11.34.22.png](http://user-image.logdown.io/user/3292/blog/3340/post/276547/NyZaTlSTDuH8v6DRzWAY_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-19%20%E4%B8%8B%E5%8D%8811.34.22.png)\n\n整個程式非常簡單，首先在 Google map 加入一個 `google.maps.OverlayView()`，然後透過 `d3.csv` 載入資料。在繪製 marker (圓點) 的時候，透過自訂的 `transform function` 去指定它的座標就完成了。\n\n相關程式如下:\n\n``` javascript\n\n// 捷運各站經緯度資訊: https://dl.dropboxusercontent.com/u/12537630/mrt.csv\n// 資料來源: https://github.com/repeat/taipei-metro-stations\n\nd3.csv(\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\", function(data){\n  var overlay = new google.maps.OverlayView();\n\n  // 新增 OverlayView 到 google map\n  overlay.onAdd = function() {\n    var layer = d3.select(this.getPanes().overlayLayer).append(\"div\")\n        .attr(\"class\", \"stations\");\n\n    overlay.draw = function() {\n      var projection = this.getProjection(), padding = 16;\n\n      var marker = layer.selectAll(\"svg\")\n          .data(d3.entries(data))\n          .each(transform)\n          .enter().append(\"svg:svg\")\n            .each(transform)\n            .attr(\"class\", \"marker\");\n\n      // 加入圓點\n      marker.append(\"svg:circle\")\n          .attr(\"r\", 6)\n          .attr(\"cx\", padding)\n          .attr(\"cy\", padding);\n\n      // 加入標籤\n      marker.append(\"svg:text\")\n          .attr(\"x\", padding + 7)\n          .attr(\"y\", padding)\n          .attr(\"dy\", \".31em\")\n          .text(function(d) { return d.value.name; });\n\n      // transform function. 指定每個點的座標.\n      function transform(d) {\n        d = new google.maps.LatLng(d.value.lat, d.value.lng);\n        d = projection.fromLatLngToDivPixel(d);\n        return d3.select(this)\n            .style(\"left\", (d.x - padding) + \"px\")\n            .style(\"top\", (d.y - padding) + \"px\");\n      }\n    };\n  };\n\n  // 將 overlay 加入到 google 地圖\n  overlay.setMap(map);\n});\n```\n\n#### 參考:\n- http://bl.ocks.org/mbostock/899711\n- https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw\n\n***\n\n#### 本系列文章列表:\n- [在 Google Map 加入 D3 圖像 (1)](http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image)\n- [在 Google Map 加入 D3 圖像 (2)](http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2)\n\n***","slug":"join-the-d3-in-google-map-image","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoe000j2kt456ilw2qa","content":"<p>因為昨天 <a href=\"http://data.taipei/\" target=\"_blank\" rel=\"external\">台北市政府開放平台</a> 開始提供 <a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\" target=\"_blank\" rel=\"external\">臺北捷運各站進出量統計</a> 的統計資料，所以就在思考可以利用這份資料做什麼應用，第一個想到的就是能否透過 D3 與地圖的共同呈現，當然就從我最熟悉的 Google Map 開始。</p>\n<p>不過這篇文章只會介紹到如何在 Google Map 加入 D3 (SVG) 圖像。\n等我將捷運各站資訊加入後也許會還有下回，哈哈哈。</p>\n<p>先看結果 - Demo: <a href=\"http://output.jsbin.com/wexiva/1/\" target=\"_blank\" rel=\"external\">http://output.jsbin.com/wexiva/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276547/NyZaTlSTDuH8v6DRzWAY_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-19%20%E4%B8%8B%E5%8D%8811.34.22.png\" alt=\"螢幕快照 2015-05-19 下午11.34.22.png\"></p>\n<p>整個程式非常簡單，首先在 Google map 加入一個 <code>google.maps.OverlayView()</code>，然後透過 <code>d3.csv</code> 載入資料。在繪製 marker (圓點) 的時候，透過自訂的 <code>transform function</code> 去指定它的座標就完成了。</p>\n<p>相關程式如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 捷運各站經緯度資訊: https://dl.dropboxusercontent.com/u/12537630/mrt.csv</span></div><div class=\"line\"><span class=\"comment\">// 資料來源: https://github.com/repeat/taipei-metro-stations</span></div><div class=\"line\"></div><div class=\"line\">d3.csv(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> overlay = <span class=\"keyword\">new</span> google.maps.OverlayView();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 新增 OverlayView 到 google map</span></div><div class=\"line\">  overlay.onAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layer = d3.select(<span class=\"keyword\">this</span>.getPanes().overlayLayer).append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"stations\"</span>);</div><div class=\"line\"></div><div class=\"line\">    overlay.draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> projection = <span class=\"keyword\">this</span>.getProjection(), padding = <span class=\"number\">16</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> marker = layer.selectAll(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">          .data(d3.entries(data))</div><div class=\"line\">          .each(transform)</div><div class=\"line\">          .enter().append(<span class=\"string\">\"svg:svg\"</span>)</div><div class=\"line\">            .each(transform)</div><div class=\"line\">            .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"marker\"</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 加入圓點</span></div><div class=\"line\">      marker.append(<span class=\"string\">\"svg:circle\"</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">6</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"cx\"</span>, padding)</div><div class=\"line\">          .attr(<span class=\"string\">\"cy\"</span>, padding);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 加入標籤</span></div><div class=\"line\">      marker.append(<span class=\"string\">\"svg:text\"</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"x\"</span>, padding + <span class=\"number\">7</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"y\"</span>, padding)</div><div class=\"line\">          .attr(<span class=\"string\">\"dy\"</span>, <span class=\"string\">\".31em\"</span>)</div><div class=\"line\">          .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.value.name; &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// transform function. 指定每個點的座標.</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        d = <span class=\"keyword\">new</span> google.maps.LatLng(d.value.lat, d.value.lng);</div><div class=\"line\">        d = projection.fromLatLngToDivPixel(d);</div><div class=\"line\">        <span class=\"keyword\">return</span> d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .style(<span class=\"string\">\"left\"</span>, (d.x - padding) + <span class=\"string\">\"px\"</span>)</div><div class=\"line\">            .style(<span class=\"string\">\"top\"</span>, (d.y - padding) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 將 overlay 加入到 google 地圖</span></div><div class=\"line\">  overlay.setMap(map);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考:\"></a>參考:</h4><ul>\n<li><a href=\"http://bl.ocks.org/mbostock/899711\" target=\"_blank\" rel=\"external\">http://bl.ocks.org/mbostock/899711</a></li>\n<li><a href=\"https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw</a></li>\n</ul>\n<hr>\n<h4 id=\"本系列文章列表\"><a href=\"#本系列文章列表\" class=\"headerlink\" title=\"本系列文章列表:\"></a>本系列文章列表:</h4><ul>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\">在 Google Map 加入 D3 圖像 (1)</a></li>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2\">在 Google Map 加入 D3 圖像 (2)</a></li>\n</ul>\n<hr>\n","excerpt":"","more":"<p>因為昨天 <a href=\"http://data.taipei/\">台北市政府開放平台</a> 開始提供 <a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1d71c478-205f-42c5-8386-35f86d74fdd1\">臺北捷運各站進出量統計</a> 的統計資料，所以就在思考可以利用這份資料做什麼應用，第一個想到的就是能否透過 D3 與地圖的共同呈現，當然就從我最熟悉的 Google Map 開始。</p>\n<p>不過這篇文章只會介紹到如何在 Google Map 加入 D3 (SVG) 圖像。\n等我將捷運各站資訊加入後也許會還有下回，哈哈哈。</p>\n<p>先看結果 - Demo: <a href=\"http://output.jsbin.com/wexiva/1/\">http://output.jsbin.com/wexiva/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276547/NyZaTlSTDuH8v6DRzWAY_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-19%20%E4%B8%8B%E5%8D%8811.34.22.png\" alt=\"螢幕快照 2015-05-19 下午11.34.22.png\"></p>\n<p>整個程式非常簡單，首先在 Google map 加入一個 <code>google.maps.OverlayView()</code>，然後透過 <code>d3.csv</code> 載入資料。在繪製 marker (圓點) 的時候，透過自訂的 <code>transform function</code> 去指定它的座標就完成了。</p>\n<p>相關程式如下:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 捷運各站經緯度資訊: https://dl.dropboxusercontent.com/u/12537630/mrt.csv</span></div><div class=\"line\"><span class=\"comment\">// 資料來源: https://github.com/repeat/taipei-metro-stations</span></div><div class=\"line\"></div><div class=\"line\">d3.csv(<span class=\"string\">\"https://dl.dropboxusercontent.com/u/12537630/mrt.csv\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> overlay = <span class=\"keyword\">new</span> google.maps.OverlayView();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 新增 OverlayView 到 google map</span></div><div class=\"line\">  overlay.onAdd = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> layer = d3.select(<span class=\"keyword\">this</span>.getPanes().overlayLayer).append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">        .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"stations\"</span>);</div><div class=\"line\"></div><div class=\"line\">    overlay.draw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> projection = <span class=\"keyword\">this</span>.getProjection(), padding = <span class=\"number\">16</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">var</span> marker = layer.selectAll(<span class=\"string\">\"svg\"</span>)</div><div class=\"line\">          .data(d3.entries(data))</div><div class=\"line\">          .each(transform)</div><div class=\"line\">          .enter().append(<span class=\"string\">\"svg:svg\"</span>)</div><div class=\"line\">            .each(transform)</div><div class=\"line\">            .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"marker\"</span>);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 加入圓點</span></div><div class=\"line\">      marker.append(<span class=\"string\">\"svg:circle\"</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">6</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"cx\"</span>, padding)</div><div class=\"line\">          .attr(<span class=\"string\">\"cy\"</span>, padding);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 加入標籤</span></div><div class=\"line\">      marker.append(<span class=\"string\">\"svg:text\"</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"x\"</span>, padding + <span class=\"number\">7</span>)</div><div class=\"line\">          .attr(<span class=\"string\">\"y\"</span>, padding)</div><div class=\"line\">          .attr(<span class=\"string\">\"dy\"</span>, <span class=\"string\">\".31em\"</span>)</div><div class=\"line\">          .text(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.value.name; &#125;);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// transform function. 指定每個點的座標.</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transform</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">        d = <span class=\"keyword\">new</span> google.maps.LatLng(d.value.lat, d.value.lng);</div><div class=\"line\">        d = projection.fromLatLngToDivPixel(d);</div><div class=\"line\">        <span class=\"keyword\">return</span> d3.select(<span class=\"keyword\">this</span>)</div><div class=\"line\">            .style(<span class=\"string\">\"left\"</span>, (d.x - padding) + <span class=\"string\">\"px\"</span>)</div><div class=\"line\">            .style(<span class=\"string\">\"top\"</span>, (d.y - padding) + <span class=\"string\">\"px\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 將 overlay 加入到 google 地圖</span></div><div class=\"line\">  overlay.setMap(map);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"參考\"><a href=\"#參考\" class=\"headerlink\" title=\"參考:\"></a>參考:</h4><ul>\n<li><a href=\"http://bl.ocks.org/mbostock/899711\">http://bl.ocks.org/mbostock/899711</a></li>\n<li><a href=\"https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw\">https://developers.google.com/maps/documentation/javascript/customoverlays?hl=zh-tw</a></li>\n</ul>\n<hr>\n<h4 id=\"本系列文章列表\"><a href=\"#本系列文章列表\" class=\"headerlink\" title=\"本系列文章列表:\"></a>本系列文章列表:</h4><ul>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/join-the-d3-in-google-map-image\">在 Google Map 加入 D3 圖像 (1)</a></li>\n<li><a href=\"http://kuro.tw/posts/2015/05/20/added-to-the-google-map-images-d3-2\">在 Google Map 加入 D3 圖像 (2)</a></li>\n</ul>\n<hr>\n"},{"layout":"post","title":"[JS] [Note] TWD97 標轉換爲 經緯度 ","date":"2015-06-11T03:18:00.000Z","comments":1,"_content":"因為從臺北市政府資料開放平台 API 拿到的資料是 TWD97 座標格式，所以我們必須要將它轉成經緯度後才能套用至 Google Map 使用。網路上查了很多資料，最後找到最親民的是米蟲大的 PHP 版本，於是就改成寫我最熟悉的 JS。\n\nreference:\n[Vexed's Blog - TWD97 座標轉經緯度](http://blog.xuite.net/vexed/tech/53749528-TWD97+%E5%BA%A7%E6%A8%99%E8%BD%89%E7%B6%93%E7%B7%AF%E5%BA%A6)\n\n\n``` javascript\nfunction twd97_to_latlng($x, $y) {\n  var pow = Math.pow, M_PI = Math.PI;\n  var sin = Math.sin, cos = Math.cos, tan = Math.tan;\n  var $a = 6378137.0, $b = 6356752.314245;\n  var $lng0 = 121 * M_PI / 180, $k0 = 0.9999, $dx = 250000, $dy = 0;\n  var $e = pow((1 - pow($b, 2) / pow($a, 2)), 0.5);\n\n  $x -= $dx;\n  $y -= $dy;\n\n  var $M = $y / $k0;\n\n  var $mu = $M / ($a * (1.0 - pow($e, 2) / 4.0 - 3 * pow($e, 4) / 64.0 - 5 * pow($e, 6) / 256.0));\n  var $e1 = (1.0 - pow((1.0 - pow($e, 2)), 0.5)) / (1.0 + pow((1.0 - pow($e, 2)), 0.5));\n\n  var $J1 = (3 * $e1 / 2 - 27 * pow($e1, 3) / 32.0);\n  var $J2 = (21 * pow($e1, 2) / 16 - 55 * pow($e1, 4) / 32.0);\n  var $J3 = (151 * pow($e1, 3) / 96.0);\n  var $J4 = (1097 * pow($e1, 4) / 512.0);\n\n  var $fp = $mu + $J1 * sin(2 * $mu) + $J2 * sin(4 * $mu) + $J3 * sin(6 * $mu) + $J4 * sin(8 * $mu);\n\n  var $e2 = pow(($e * $a / $b), 2);\n  var $C1 = pow($e2 * cos($fp), 2);\n  var $T1 = pow(tan($fp), 2);\n  var $R1 = $a * (1 - pow($e, 2)) / pow((1 - pow($e, 2) * pow(sin($fp), 2)), (3.0 / 2.0));\n  var $N1 = $a / pow((1 - pow($e, 2) * pow(sin($fp), 2)), 0.5);\n\n  var $D = $x / ($N1 * $k0);\n\n  var $Q1 = $N1 * tan($fp) / $R1;\n  var $Q2 = (pow($D, 2) / 2.0);\n  var $Q3 = (5 + 3 * $T1 + 10 * $C1 - 4 * pow($C1, 2) - 9 * $e2) * pow($D, 4) / 24.0;\n  var $Q4 = (61 + 90 * $T1 + 298 * $C1 + 45 * pow($T1, 2) - 3 * pow($C1, 2) - 252 * $e2) * pow($D, 6) / 720.0;\n  var $lat = $fp - $Q1 * ($Q2 - $Q3 + $Q4);\n\n  var $Q5 = $D;\n  var $Q6 = (1 + 2 * $T1 + $C1) * pow($D, 3) / 6;\n  var $Q7 = (5 - 2 * $C1 + 28 * $T1 - 3 * pow($C1, 2) + 8 * $e2 + 24 * pow($T1, 2)) * pow($D, 5) / 120.0;\n  var $lng = $lng0 + ($Q5 - $Q6 + $Q7) / cos($fp);\n\n  $lat = ($lat * 180) / M_PI;\n  $lng = ($lng * 180) / M_PI;\n\n  return {\n    lat: $lat,\n    lng: $lng\n  };\n}\n```","source":"_posts/js-note-twd97-convert-to-longitude-and-latitude.md","raw":"---\nlayout: post\ntitle: '[JS] [Note] TWD97 標轉換爲 經緯度 '\ndate: 2015-06-11 11:18\ncomments: true\ncategories: [GIS]\ntags: [twd97, gis, opendata]\n---\n因為從臺北市政府資料開放平台 API 拿到的資料是 TWD97 座標格式，所以我們必須要將它轉成經緯度後才能套用至 Google Map 使用。網路上查了很多資料，最後找到最親民的是米蟲大的 PHP 版本，於是就改成寫我最熟悉的 JS。\n\nreference:\n[Vexed's Blog - TWD97 座標轉經緯度](http://blog.xuite.net/vexed/tech/53749528-TWD97+%E5%BA%A7%E6%A8%99%E8%BD%89%E7%B6%93%E7%B7%AF%E5%BA%A6)\n\n\n``` javascript\nfunction twd97_to_latlng($x, $y) {\n  var pow = Math.pow, M_PI = Math.PI;\n  var sin = Math.sin, cos = Math.cos, tan = Math.tan;\n  var $a = 6378137.0, $b = 6356752.314245;\n  var $lng0 = 121 * M_PI / 180, $k0 = 0.9999, $dx = 250000, $dy = 0;\n  var $e = pow((1 - pow($b, 2) / pow($a, 2)), 0.5);\n\n  $x -= $dx;\n  $y -= $dy;\n\n  var $M = $y / $k0;\n\n  var $mu = $M / ($a * (1.0 - pow($e, 2) / 4.0 - 3 * pow($e, 4) / 64.0 - 5 * pow($e, 6) / 256.0));\n  var $e1 = (1.0 - pow((1.0 - pow($e, 2)), 0.5)) / (1.0 + pow((1.0 - pow($e, 2)), 0.5));\n\n  var $J1 = (3 * $e1 / 2 - 27 * pow($e1, 3) / 32.0);\n  var $J2 = (21 * pow($e1, 2) / 16 - 55 * pow($e1, 4) / 32.0);\n  var $J3 = (151 * pow($e1, 3) / 96.0);\n  var $J4 = (1097 * pow($e1, 4) / 512.0);\n\n  var $fp = $mu + $J1 * sin(2 * $mu) + $J2 * sin(4 * $mu) + $J3 * sin(6 * $mu) + $J4 * sin(8 * $mu);\n\n  var $e2 = pow(($e * $a / $b), 2);\n  var $C1 = pow($e2 * cos($fp), 2);\n  var $T1 = pow(tan($fp), 2);\n  var $R1 = $a * (1 - pow($e, 2)) / pow((1 - pow($e, 2) * pow(sin($fp), 2)), (3.0 / 2.0));\n  var $N1 = $a / pow((1 - pow($e, 2) * pow(sin($fp), 2)), 0.5);\n\n  var $D = $x / ($N1 * $k0);\n\n  var $Q1 = $N1 * tan($fp) / $R1;\n  var $Q2 = (pow($D, 2) / 2.0);\n  var $Q3 = (5 + 3 * $T1 + 10 * $C1 - 4 * pow($C1, 2) - 9 * $e2) * pow($D, 4) / 24.0;\n  var $Q4 = (61 + 90 * $T1 + 298 * $C1 + 45 * pow($T1, 2) - 3 * pow($C1, 2) - 252 * $e2) * pow($D, 6) / 720.0;\n  var $lat = $fp - $Q1 * ($Q2 - $Q3 + $Q4);\n\n  var $Q5 = $D;\n  var $Q6 = (1 + 2 * $T1 + $C1) * pow($D, 3) / 6;\n  var $Q7 = (5 - 2 * $C1 + 28 * $T1 - 3 * pow($C1, 2) + 8 * $e2 + 24 * pow($T1, 2)) * pow($D, 5) / 120.0;\n  var $lng = $lng0 + ($Q5 - $Q6 + $Q7) / cos($fp);\n\n  $lat = ($lat * 180) / M_PI;\n  $lng = ($lng * 180) / M_PI;\n\n  return {\n    lat: $lat,\n    lng: $lng\n  };\n}\n```","slug":"js-note-twd97-convert-to-longitude-and-latitude","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjof000n2kt426jwuem6","content":"<p>因為從臺北市政府資料開放平台 API 拿到的資料是 TWD97 座標格式，所以我們必須要將它轉成經緯度後才能套用至 Google Map 使用。網路上查了很多資料，最後找到最親民的是米蟲大的 PHP 版本，於是就改成寫我最熟悉的 JS。</p>\n<p>reference:\n<a href=\"http://blog.xuite.net/vexed/tech/53749528-TWD97+%E5%BA%A7%E6%A8%99%E8%BD%89%E7%B6%93%E7%B7%AF%E5%BA%A6\" target=\"_blank\" rel=\"external\">Vexed&#39;s Blog - TWD97 座標轉經緯度</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twd97_to_latlng</span>(<span class=\"params\">$x, $y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pow = <span class=\"built_in\">Math</span>.pow, M_PI = <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">  <span class=\"keyword\">var</span> sin = <span class=\"built_in\">Math</span>.sin, cos = <span class=\"built_in\">Math</span>.cos, tan = <span class=\"built_in\">Math</span>.tan;</div><div class=\"line\">  <span class=\"keyword\">var</span> $a = <span class=\"number\">6378137.0</span>, $b = <span class=\"number\">6356752.314245</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lng0 = <span class=\"number\">121</span> * M_PI / <span class=\"number\">180</span>, $k0 = <span class=\"number\">0.9999</span>, $dx = <span class=\"number\">250000</span>, $dy = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $e = pow((<span class=\"number\">1</span> - pow($b, <span class=\"number\">2</span>) / pow($a, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">  $x -= $dx;</div><div class=\"line\">  $y -= $dy;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $M = $y / $k0;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $mu = $M / ($a * (<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>) / <span class=\"number\">4.0</span> - <span class=\"number\">3</span> * pow($e, <span class=\"number\">4</span>) / <span class=\"number\">64.0</span> - <span class=\"number\">5</span> * pow($e, <span class=\"number\">6</span>) / <span class=\"number\">256.0</span>));</div><div class=\"line\">  <span class=\"keyword\">var</span> $e1 = (<span class=\"number\">1.0</span> - pow((<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>)) / (<span class=\"number\">1.0</span> + pow((<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $J1 = (<span class=\"number\">3</span> * $e1 / <span class=\"number\">2</span> - <span class=\"number\">27</span> * pow($e1, <span class=\"number\">3</span>) / <span class=\"number\">32.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J2 = (<span class=\"number\">21</span> * pow($e1, <span class=\"number\">2</span>) / <span class=\"number\">16</span> - <span class=\"number\">55</span> * pow($e1, <span class=\"number\">4</span>) / <span class=\"number\">32.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J3 = (<span class=\"number\">151</span> * pow($e1, <span class=\"number\">3</span>) / <span class=\"number\">96.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J4 = (<span class=\"number\">1097</span> * pow($e1, <span class=\"number\">4</span>) / <span class=\"number\">512.0</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $fp = $mu + $J1 * sin(<span class=\"number\">2</span> * $mu) + $J2 * sin(<span class=\"number\">4</span> * $mu) + $J3 * sin(<span class=\"number\">6</span> * $mu) + $J4 * sin(<span class=\"number\">8</span> * $mu);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $e2 = pow(($e * $a / $b), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $C1 = pow($e2 * cos($fp), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $T1 = pow(tan($fp), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $R1 = $a * (<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>)) / pow((<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>) * pow(sin($fp), <span class=\"number\">2</span>)), (<span class=\"number\">3.0</span> / <span class=\"number\">2.0</span>));</div><div class=\"line\">  <span class=\"keyword\">var</span> $N1 = $a / pow((<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>) * pow(sin($fp), <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $D = $x / ($N1 * $k0);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $Q1 = $N1 * tan($fp) / $R1;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q2 = (pow($D, <span class=\"number\">2</span>) / <span class=\"number\">2.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q3 = (<span class=\"number\">5</span> + <span class=\"number\">3</span> * $T1 + <span class=\"number\">10</span> * $C1 - <span class=\"number\">4</span> * pow($C1, <span class=\"number\">2</span>) - <span class=\"number\">9</span> * $e2) * pow($D, <span class=\"number\">4</span>) / <span class=\"number\">24.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q4 = (<span class=\"number\">61</span> + <span class=\"number\">90</span> * $T1 + <span class=\"number\">298</span> * $C1 + <span class=\"number\">45</span> * pow($T1, <span class=\"number\">2</span>) - <span class=\"number\">3</span> * pow($C1, <span class=\"number\">2</span>) - <span class=\"number\">252</span> * $e2) * pow($D, <span class=\"number\">6</span>) / <span class=\"number\">720.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lat = $fp - $Q1 * ($Q2 - $Q3 + $Q4);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $Q5 = $D;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q6 = (<span class=\"number\">1</span> + <span class=\"number\">2</span> * $T1 + $C1) * pow($D, <span class=\"number\">3</span>) / <span class=\"number\">6</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q7 = (<span class=\"number\">5</span> - <span class=\"number\">2</span> * $C1 + <span class=\"number\">28</span> * $T1 - <span class=\"number\">3</span> * pow($C1, <span class=\"number\">2</span>) + <span class=\"number\">8</span> * $e2 + <span class=\"number\">24</span> * pow($T1, <span class=\"number\">2</span>)) * pow($D, <span class=\"number\">5</span>) / <span class=\"number\">120.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lng = $lng0 + ($Q5 - $Q6 + $Q7) / cos($fp);</div><div class=\"line\"></div><div class=\"line\">  $lat = ($lat * <span class=\"number\">180</span>) / M_PI;</div><div class=\"line\">  $lng = ($lng * <span class=\"number\">180</span>) / M_PI;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">lat</span>: $lat,</div><div class=\"line\">    <span class=\"attr\">lng</span>: $lng</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>因為從臺北市政府資料開放平台 API 拿到的資料是 TWD97 座標格式，所以我們必須要將它轉成經緯度後才能套用至 Google Map 使用。網路上查了很多資料，最後找到最親民的是米蟲大的 PHP 版本，於是就改成寫我最熟悉的 JS。</p>\n<p>reference:\n<a href=\"http://blog.xuite.net/vexed/tech/53749528-TWD97+%E5%BA%A7%E6%A8%99%E8%BD%89%E7%B6%93%E7%B7%AF%E5%BA%A6\">Vexed&#39;s Blog - TWD97 座標轉經緯度</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">twd97_to_latlng</span>(<span class=\"params\">$x, $y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pow = <span class=\"built_in\">Math</span>.pow, M_PI = <span class=\"built_in\">Math</span>.PI;</div><div class=\"line\">  <span class=\"keyword\">var</span> sin = <span class=\"built_in\">Math</span>.sin, cos = <span class=\"built_in\">Math</span>.cos, tan = <span class=\"built_in\">Math</span>.tan;</div><div class=\"line\">  <span class=\"keyword\">var</span> $a = <span class=\"number\">6378137.0</span>, $b = <span class=\"number\">6356752.314245</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lng0 = <span class=\"number\">121</span> * M_PI / <span class=\"number\">180</span>, $k0 = <span class=\"number\">0.9999</span>, $dx = <span class=\"number\">250000</span>, $dy = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $e = pow((<span class=\"number\">1</span> - pow($b, <span class=\"number\">2</span>) / pow($a, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">  $x -= $dx;</div><div class=\"line\">  $y -= $dy;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $M = $y / $k0;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $mu = $M / ($a * (<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>) / <span class=\"number\">4.0</span> - <span class=\"number\">3</span> * pow($e, <span class=\"number\">4</span>) / <span class=\"number\">64.0</span> - <span class=\"number\">5</span> * pow($e, <span class=\"number\">6</span>) / <span class=\"number\">256.0</span>));</div><div class=\"line\">  <span class=\"keyword\">var</span> $e1 = (<span class=\"number\">1.0</span> - pow((<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>)) / (<span class=\"number\">1.0</span> + pow((<span class=\"number\">1.0</span> - pow($e, <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $J1 = (<span class=\"number\">3</span> * $e1 / <span class=\"number\">2</span> - <span class=\"number\">27</span> * pow($e1, <span class=\"number\">3</span>) / <span class=\"number\">32.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J2 = (<span class=\"number\">21</span> * pow($e1, <span class=\"number\">2</span>) / <span class=\"number\">16</span> - <span class=\"number\">55</span> * pow($e1, <span class=\"number\">4</span>) / <span class=\"number\">32.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J3 = (<span class=\"number\">151</span> * pow($e1, <span class=\"number\">3</span>) / <span class=\"number\">96.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $J4 = (<span class=\"number\">1097</span> * pow($e1, <span class=\"number\">4</span>) / <span class=\"number\">512.0</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $fp = $mu + $J1 * sin(<span class=\"number\">2</span> * $mu) + $J2 * sin(<span class=\"number\">4</span> * $mu) + $J3 * sin(<span class=\"number\">6</span> * $mu) + $J4 * sin(<span class=\"number\">8</span> * $mu);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $e2 = pow(($e * $a / $b), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $C1 = pow($e2 * cos($fp), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $T1 = pow(tan($fp), <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $R1 = $a * (<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>)) / pow((<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>) * pow(sin($fp), <span class=\"number\">2</span>)), (<span class=\"number\">3.0</span> / <span class=\"number\">2.0</span>));</div><div class=\"line\">  <span class=\"keyword\">var</span> $N1 = $a / pow((<span class=\"number\">1</span> - pow($e, <span class=\"number\">2</span>) * pow(sin($fp), <span class=\"number\">2</span>)), <span class=\"number\">0.5</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $D = $x / ($N1 * $k0);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $Q1 = $N1 * tan($fp) / $R1;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q2 = (pow($D, <span class=\"number\">2</span>) / <span class=\"number\">2.0</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q3 = (<span class=\"number\">5</span> + <span class=\"number\">3</span> * $T1 + <span class=\"number\">10</span> * $C1 - <span class=\"number\">4</span> * pow($C1, <span class=\"number\">2</span>) - <span class=\"number\">9</span> * $e2) * pow($D, <span class=\"number\">4</span>) / <span class=\"number\">24.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q4 = (<span class=\"number\">61</span> + <span class=\"number\">90</span> * $T1 + <span class=\"number\">298</span> * $C1 + <span class=\"number\">45</span> * pow($T1, <span class=\"number\">2</span>) - <span class=\"number\">3</span> * pow($C1, <span class=\"number\">2</span>) - <span class=\"number\">252</span> * $e2) * pow($D, <span class=\"number\">6</span>) / <span class=\"number\">720.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lat = $fp - $Q1 * ($Q2 - $Q3 + $Q4);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> $Q5 = $D;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q6 = (<span class=\"number\">1</span> + <span class=\"number\">2</span> * $T1 + $C1) * pow($D, <span class=\"number\">3</span>) / <span class=\"number\">6</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $Q7 = (<span class=\"number\">5</span> - <span class=\"number\">2</span> * $C1 + <span class=\"number\">28</span> * $T1 - <span class=\"number\">3</span> * pow($C1, <span class=\"number\">2</span>) + <span class=\"number\">8</span> * $e2 + <span class=\"number\">24</span> * pow($T1, <span class=\"number\">2</span>)) * pow($D, <span class=\"number\">5</span>) / <span class=\"number\">120.0</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> $lng = $lng0 + ($Q5 - $Q6 + $Q7) / cos($fp);</div><div class=\"line\"></div><div class=\"line\">  $lat = ($lat * <span class=\"number\">180</span>) / M_PI;</div><div class=\"line\">  $lng = ($lng * <span class=\"number\">180</span>) / M_PI;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">lat</span>: $lat,</div><div class=\"line\">    <span class=\"attr\">lng</span>: $lng</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"Modern WebConf 2015 與我的講題：D3 圖表優化二三事","date":"2015-05-17T05:59:00.000Z","comments":1,"_content":"下面投影片是這次小弟在 Modern WebConf 2015 分享的主題，內容是有關 D3 開發的一些心得。\n\n其實早先在準備的時候有些忐忑，像這種大拜拜的演講場合，很難預想聽眾的程度，講題太深擔心會眾無法吸收，太淺又怕對不起會眾的期待。 所以這次的內容安排了三分之一是從最基礎的 D3 data-driven 講起，再來才是開發心得與特性的介紹，期望不管是剛入門的朋友或是已經投入開發的老手都能從中獲得些什麼。因為我認為 Data-Driven 是 D3.js 的核心觀念之一，在瞭解如何將資料轉為 DOM / SVG 元件以後，剩下再去讀 D3 的 API 相信也能輕易上手。\n\n[「萬事萬物都有缺口，缺口就是光的入口」](http://audrey.nu/-/2015/05/16/open-source-enlightenment-2015 \"開源之道 2015 \")，如果有什麼是我講的不對的地方，也歡迎 <del>用力打臉</del> 糾正，畢竟我都這麼厚臉皮出來分享了，讓小弟我有機會獲得正確答案應該不過分，哈哈哈。\n\n最後，在這裡預告一下，感謝 [Taipei D3.js Meetup](http://www.meetup.com/Taipei-D3-js-Meetup/ \"Taipei D3.js Meetup\") 的邀約，預計在六月份會有一場小聚的分享，題目還在構思當中。 如果你對 D3 相關議題也有興趣，歡迎與我交流。 :)\n\n無論如何，還是感謝每一位參與 Modern WebConf 的會眾、講師以及工作人員。辛苦了。\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/NdKfJWerFlauo9\" width=\"510\" height=\"420\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/kurotanshi/d3-48180820\" title=\"[Modern WebConf 2015] D3 圖表優化二三事\" target=\"_blank\">[Modern WebConf 2015] D3 圖表優化二三事</a> </strong> from <strong><a href=\"//www.slideshare.net/kurotanshi\" target=\"_blank\">Kuro Hsu</a></strong> </div>\n\n<div style=\"margin-top:2em;\">偷偷在底下擺張 JavaScript 之父 Brendan Eich，與小弟 <del>(自稱 JS 之子)</del> 的合照炫耀一下 XD</div>\n![IMG_8751.jpg](http://user-image.logdown.io/user/3292/blog/3340/post/276313/SIxIklSuRka61onbK0IK_IMG_8751.jpg)","source":"_posts/modern-webconf-2015-with-my-theme-d3-optimizing-two-or-three-things.md","raw":"---\nlayout: post\ntitle: 'Modern WebConf 2015 與我的講題：D3 圖表優化二三事'\ndate: 2015-05-17 13:59\ncomments: true\ncategories: [ModernWebConf]\ntags: [d3.js]\n---\n下面投影片是這次小弟在 Modern WebConf 2015 分享的主題，內容是有關 D3 開發的一些心得。\n\n其實早先在準備的時候有些忐忑，像這種大拜拜的演講場合，很難預想聽眾的程度，講題太深擔心會眾無法吸收，太淺又怕對不起會眾的期待。 所以這次的內容安排了三分之一是從最基礎的 D3 data-driven 講起，再來才是開發心得與特性的介紹，期望不管是剛入門的朋友或是已經投入開發的老手都能從中獲得些什麼。因為我認為 Data-Driven 是 D3.js 的核心觀念之一，在瞭解如何將資料轉為 DOM / SVG 元件以後，剩下再去讀 D3 的 API 相信也能輕易上手。\n\n[「萬事萬物都有缺口，缺口就是光的入口」](http://audrey.nu/-/2015/05/16/open-source-enlightenment-2015 \"開源之道 2015 \")，如果有什麼是我講的不對的地方，也歡迎 <del>用力打臉</del> 糾正，畢竟我都這麼厚臉皮出來分享了，讓小弟我有機會獲得正確答案應該不過分，哈哈哈。\n\n最後，在這裡預告一下，感謝 [Taipei D3.js Meetup](http://www.meetup.com/Taipei-D3-js-Meetup/ \"Taipei D3.js Meetup\") 的邀約，預計在六月份會有一場小聚的分享，題目還在構思當中。 如果你對 D3 相關議題也有興趣，歡迎與我交流。 :)\n\n無論如何，還是感謝每一位參與 Modern WebConf 的會眾、講師以及工作人員。辛苦了。\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/NdKfJWerFlauo9\" width=\"510\" height=\"420\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/kurotanshi/d3-48180820\" title=\"[Modern WebConf 2015] D3 圖表優化二三事\" target=\"_blank\">[Modern WebConf 2015] D3 圖表優化二三事</a> </strong> from <strong><a href=\"//www.slideshare.net/kurotanshi\" target=\"_blank\">Kuro Hsu</a></strong> </div>\n\n<div style=\"margin-top:2em;\">偷偷在底下擺張 JavaScript 之父 Brendan Eich，與小弟 <del>(自稱 JS 之子)</del> 的合照炫耀一下 XD</div>\n![IMG_8751.jpg](http://user-image.logdown.io/user/3292/blog/3340/post/276313/SIxIklSuRka61onbK0IK_IMG_8751.jpg)","slug":"modern-webconf-2015-with-my-theme-d3-optimizing-two-or-three-things","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjog000p2kt4uwl7ugmd","content":"<p>下面投影片是這次小弟在 Modern WebConf 2015 分享的主題，內容是有關 D3 開發的一些心得。</p>\n<p>其實早先在準備的時候有些忐忑，像這種大拜拜的演講場合，很難預想聽眾的程度，講題太深擔心會眾無法吸收，太淺又怕對不起會眾的期待。 所以這次的內容安排了三分之一是從最基礎的 D3 data-driven 講起，再來才是開發心得與特性的介紹，期望不管是剛入門的朋友或是已經投入開發的老手都能從中獲得些什麼。因為我認為 Data-Driven 是 D3.js 的核心觀念之一，在瞭解如何將資料轉為 DOM / SVG 元件以後，剩下再去讀 D3 的 API 相信也能輕易上手。</p>\n<p><a href=\"http://audrey.nu/-/2015/05/16/open-source-enlightenment-2015\" title=\"開源之道 2015 \" target=\"_blank\" rel=\"external\">「萬事萬物都有缺口，缺口就是光的入口」</a>，如果有什麼是我講的不對的地方，也歡迎 <del>用力打臉</del> 糾正，畢竟我都這麼厚臉皮出來分享了，讓小弟我有機會獲得正確答案應該不過分，哈哈哈。</p>\n<p>最後，在這裡預告一下，感謝 <a href=\"http://www.meetup.com/Taipei-D3-js-Meetup/\" title=\"Taipei D3.js Meetup\" target=\"_blank\" rel=\"external\">Taipei D3.js Meetup</a> 的邀約，預計在六月份會有一場小聚的分享，題目還在構思當中。 如果你對 D3 相關議題也有興趣，歡迎與我交流。 :)</p>\n<p>無論如何，還是感謝每一位參與 Modern WebConf 的會眾、講師以及工作人員。辛苦了。</p>\n<p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/NdKfJWerFlauo9\" width=\"510\" height=\"420\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/kurotanshi/d3-48180820\" title=\"[Modern WebConf 2015] D3 圖表優化二三事\" target=\"_blank\">[Modern WebConf 2015] D3 圖表優化二三事</a> </strong> from <strong><a href=\"//www.slideshare.net/kurotanshi\" target=\"_blank\">Kuro Hsu</a></strong> </div></p>\n<p><div style=\"margin-top:2em;\">偷偷在底下擺張 JavaScript 之父 Brendan Eich，與小弟 <del>(自稱 JS 之子)</del> 的合照炫耀一下 XD</div>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276313/SIxIklSuRka61onbK0IK_IMG_8751.jpg\" alt=\"IMG_8751.jpg\"></p>\n","excerpt":"","more":"<p>下面投影片是這次小弟在 Modern WebConf 2015 分享的主題，內容是有關 D3 開發的一些心得。</p>\n<p>其實早先在準備的時候有些忐忑，像這種大拜拜的演講場合，很難預想聽眾的程度，講題太深擔心會眾無法吸收，太淺又怕對不起會眾的期待。 所以這次的內容安排了三分之一是從最基礎的 D3 data-driven 講起，再來才是開發心得與特性的介紹，期望不管是剛入門的朋友或是已經投入開發的老手都能從中獲得些什麼。因為我認為 Data-Driven 是 D3.js 的核心觀念之一，在瞭解如何將資料轉為 DOM / SVG 元件以後，剩下再去讀 D3 的 API 相信也能輕易上手。</p>\n<p><a href=\"http://audrey.nu/-/2015/05/16/open-source-enlightenment-2015\" title=\"開源之道 2015 \">「萬事萬物都有缺口，缺口就是光的入口」</a>，如果有什麼是我講的不對的地方，也歡迎 <del>用力打臉</del> 糾正，畢竟我都這麼厚臉皮出來分享了，讓小弟我有機會獲得正確答案應該不過分，哈哈哈。</p>\n<p>最後，在這裡預告一下，感謝 <a href=\"http://www.meetup.com/Taipei-D3-js-Meetup/\" title=\"Taipei D3.js Meetup\">Taipei D3.js Meetup</a> 的邀約，預計在六月份會有一場小聚的分享，題目還在構思當中。 如果你對 D3 相關議題也有興趣，歡迎與我交流。 :)</p>\n<p>無論如何，還是感謝每一位參與 Modern WebConf 的會眾、講師以及工作人員。辛苦了。</p>\n<p><iframe src=\"//www.slideshare.net/slideshow/embed_code/key/NdKfJWerFlauo9\" width=\"510\" height=\"420\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/kurotanshi/d3-48180820\" title=\"[Modern WebConf 2015] D3 圖表優化二三事\" target=\"_blank\">[Modern WebConf 2015] D3 圖表優化二三事</a> </strong> from <strong><a href=\"//www.slideshare.net/kurotanshi\" target=\"_blank\">Kuro Hsu</a></strong> </div></p>\n<p><div style=\"margin-top:2em;\">偷偷在底下擺張 JavaScript 之父 Brendan Eich，與小弟 <del>(自稱 JS 之子)</del> 的合照炫耀一下 XD</div>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/276313/SIxIklSuRka61onbK0IK_IMG_8751.jpg\" alt=\"IMG_8751.jpg\"></p>\n"},{"layout":"post","title":"[筆記] 阻擋 android chrome 網頁下拉自動重整頁面","date":"2015-05-11T07:00:00.000Z","comments":1,"_content":"早上開會時，同事提到了 Android 升級後，Chrome for Android 會出現網頁畫面在瀏覽器頂端時，往下拉會重整頁面的問題(<del>其實應該說是 Feature XD</del>)，因為這個新功能會造成網頁使用上的一些困擾，於是試了幾種方式，發現可以阻擋網頁重整的動作，趁還有印象就把它記錄下來。\n\n![2015-05-11 15.12.02.jpg](http://user-image.logdown.io/user/3292/blog/3340/post/275711/HX5wrVYQ8WW8gkKhK8rQ_2015-05-11%2015.12.02.jpg)\n(就是這個小圈圈，看到它就代表網頁要重整了)\n\n原理其實很簡單，就是在當 chrome 已經到達網頁頂端時，而且判斷 touchmove 是往下拉時，把事件阻擋掉，就可以了。\n\n可以用 Android 試試看。\nDemo: http://jsbin.com/conuga/1/\n\n聽說 iOS 也有類似問題，不過我手邊沒有 iPhone，所以無法測試。 orz\n\n\n``` javascript\nwindow.addEventListener('load', function() {\n\n    var isWindowTop = false;\n    var lastTouchY = 0;\n\n    var touchStartHandler = function(e) {\n        if (e.touches.length !== 1) return;\n        lastTouchY = e.touches[0].clientY;\n        isWindowTop = (window.pageYOffset === 0);\n    };\n\n    var touchMoveHandler = function(e) {\n        var touchY = e.touches[0].clientY;\n        var touchYmove = touchY - lastTouchY;\n        lastTouchY = touchY;\n\n        if (isWindowTop) {\n            isWindowTop = false;\n            // 阻擋移動事件\n            if (touchYmove > 0) {\n                e.preventDefault();\n                return;\n            }\n        }\n\n    };\n\n    document.addEventListener('touchstart', touchStartHandler, false);\n    document.addEventListener('touchmove', touchMoveHandler, false);\n\n});\n```","source":"_posts/note-blocking-android-chrome-page-drop-down-automatically-restructure-page.md","raw":"---\nlayout: post\ntitle: '[筆記] 阻擋 android chrome 網頁下拉自動重整頁面'\ndate: 2015-05-11 15:00\ncomments: true\ncategories: [android]\ntags: [android, chrome, mobile]\n---\n早上開會時，同事提到了 Android 升級後，Chrome for Android 會出現網頁畫面在瀏覽器頂端時，往下拉會重整頁面的問題(<del>其實應該說是 Feature XD</del>)，因為這個新功能會造成網頁使用上的一些困擾，於是試了幾種方式，發現可以阻擋網頁重整的動作，趁還有印象就把它記錄下來。\n\n![2015-05-11 15.12.02.jpg](http://user-image.logdown.io/user/3292/blog/3340/post/275711/HX5wrVYQ8WW8gkKhK8rQ_2015-05-11%2015.12.02.jpg)\n(就是這個小圈圈，看到它就代表網頁要重整了)\n\n原理其實很簡單，就是在當 chrome 已經到達網頁頂端時，而且判斷 touchmove 是往下拉時，把事件阻擋掉，就可以了。\n\n可以用 Android 試試看。\nDemo: http://jsbin.com/conuga/1/\n\n聽說 iOS 也有類似問題，不過我手邊沒有 iPhone，所以無法測試。 orz\n\n\n``` javascript\nwindow.addEventListener('load', function() {\n\n    var isWindowTop = false;\n    var lastTouchY = 0;\n\n    var touchStartHandler = function(e) {\n        if (e.touches.length !== 1) return;\n        lastTouchY = e.touches[0].clientY;\n        isWindowTop = (window.pageYOffset === 0);\n    };\n\n    var touchMoveHandler = function(e) {\n        var touchY = e.touches[0].clientY;\n        var touchYmove = touchY - lastTouchY;\n        lastTouchY = touchY;\n\n        if (isWindowTop) {\n            isWindowTop = false;\n            // 阻擋移動事件\n            if (touchYmove > 0) {\n                e.preventDefault();\n                return;\n            }\n        }\n\n    };\n\n    document.addEventListener('touchstart', touchStartHandler, false);\n    document.addEventListener('touchmove', touchMoveHandler, false);\n\n});\n```","slug":"note-blocking-android-chrome-page-drop-down-automatically-restructure-page","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoh000s2kt49l76t6j5","content":"<p>早上開會時，同事提到了 Android 升級後，Chrome for Android 會出現網頁畫面在瀏覽器頂端時，往下拉會重整頁面的問題(<del>其實應該說是 Feature XD</del>)，因為這個新功能會造成網頁使用上的一些困擾，於是試了幾種方式，發現可以阻擋網頁重整的動作，趁還有印象就把它記錄下來。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/275711/HX5wrVYQ8WW8gkKhK8rQ_2015-05-11%2015.12.02.jpg\" alt=\"2015-05-11 15.12.02.jpg\">\n(就是這個小圈圈，看到它就代表網頁要重整了)</p>\n<p>原理其實很簡單，就是在當 chrome 已經到達網頁頂端時，而且判斷 touchmove 是往下拉時，把事件阻擋掉，就可以了。</p>\n<p>可以用 Android 試試看。\nDemo: <a href=\"http://jsbin.com/conuga/1/\" target=\"_blank\" rel=\"external\">http://jsbin.com/conuga/1/</a></p>\n<p>聽說 iOS 也有類似問題，不過我手邊沒有 iPhone，所以無法測試。 orz</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> isWindowTop = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> lastTouchY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> touchStartHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.touches.length !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        lastTouchY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">        isWindowTop = (<span class=\"built_in\">window</span>.pageYOffset === <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> touchMoveHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touchY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">        <span class=\"keyword\">var</span> touchYmove = touchY - lastTouchY;</div><div class=\"line\">        lastTouchY = touchY;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isWindowTop) &#123;</div><div class=\"line\">            isWindowTop = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"comment\">// 阻擋移動事件</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (touchYmove &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                e.preventDefault();</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, touchStartHandler, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>, touchMoveHandler, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>早上開會時，同事提到了 Android 升級後，Chrome for Android 會出現網頁畫面在瀏覽器頂端時，往下拉會重整頁面的問題(<del>其實應該說是 Feature XD</del>)，因為這個新功能會造成網頁使用上的一些困擾，於是試了幾種方式，發現可以阻擋網頁重整的動作，趁還有印象就把它記錄下來。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/275711/HX5wrVYQ8WW8gkKhK8rQ_2015-05-11%2015.12.02.jpg\" alt=\"2015-05-11 15.12.02.jpg\">\n(就是這個小圈圈，看到它就代表網頁要重整了)</p>\n<p>原理其實很簡單，就是在當 chrome 已經到達網頁頂端時，而且判斷 touchmove 是往下拉時，把事件阻擋掉，就可以了。</p>\n<p>可以用 Android 試試看。\nDemo: <a href=\"http://jsbin.com/conuga/1/\">http://jsbin.com/conuga/1/</a></p>\n<p>聽說 iOS 也有類似問題，不過我手邊沒有 iPhone，所以無法測試。 orz</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> isWindowTop = <span class=\"literal\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> lastTouchY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> touchStartHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (e.touches.length !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</div><div class=\"line\">        lastTouchY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">        isWindowTop = (<span class=\"built_in\">window</span>.pageYOffset === <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> touchMoveHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touchY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">        <span class=\"keyword\">var</span> touchYmove = touchY - lastTouchY;</div><div class=\"line\">        lastTouchY = touchY;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (isWindowTop) &#123;</div><div class=\"line\">            isWindowTop = <span class=\"literal\">false</span>;</div><div class=\"line\">            <span class=\"comment\">// 阻擋移動事件</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (touchYmove &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                e.preventDefault();</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchstart'</span>, touchStartHandler, <span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">'touchmove'</span>, touchMoveHandler, <span class=\"literal\">false</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"layout":"post","title":"[筆記] JavaScript 變數宣告與作用域","date":"2015-07-08T02:11:00.000Z","comments":1,"_content":"大家都知道，JavaScript 的變數有其作用域的範圍，若使用前未經 var 宣告，就會自動變成全域變數 (global variable)，而在其 code block 內宣告的變數也只有該 code block 內可以使用。\n\n這次的問題，其實很久以前在 tonyQ 的聚會上就聽他說過了，<del>只是沒想到還真的會遇到 XDDDD</del>\n\n``` javascript\nvar a = 1;\n\n(function(){\n  console.log(a);\t\t// 1\n})();\n```\n上面的 code 很簡單，就是宣告一個全域變數 a，然後值為 1 ，因為是全域變數，所以在之後的匿名函式內可以使用它。\n\n\n``` javascript\nvar a = 1;\n\n(function(){\n  var a = 100;\n  console.log(a);\t\t// 100\n})();\n```\n這次，在匿名函式內，我們另外宣告了一個 a，值為 100，因為其作用域的關係，所以 console 的結果會是 100。\n\n\n接著，問題來了，如果我們在 `var a = 100;` 之前去取值，會發生什麼事呢？\n``` javascript\nvar a = 1;\n\n(function(){\n  console.log(a);    //  ?\n  var a = 100;\n  console.log(a);    // 100\n})();\n```\n\n答案是，第一次的 console.log(a) 會印出 **undefined**，而第二次會出現 100。\n\n因為在匿名函數獨立的 scope 內，不管 var 是放在最前面，或是最後一行，他的變數實體在該 code block 一開始就是新的了，也就是說，剛剛的 code 其實等同下面這段：\n``` javascript\nvar a = 1;\n\n(function(){\n  var a;\n  console.log(a);    // undefined\n  a = 100;\n  console.log(a);    // 100\n})();\n```\n\n所以第一次會印出 undefined 。\n\n要怎麼排除這樣的問題呢，很簡單，要嘛一開始就不要取相同名稱，要嘛就透過參數的方式代入原本的變數，像這樣：\n``` javascript\nvar a = 1;\n\n(function(_a){\n  console.log(_a);    // 1\n  var a = 100;\n  console.log(a);    // 100\n})(a);\n```\n\n","source":"_posts/note-javascript-variables-declared-with-the-scope-scope.md","raw":"---\nlayout: post\ntitle: '[筆記] JavaScript 變數宣告與作用域'\ndate: 2015-07-08 10:11\ncomments: true\ncategories: [javascript]\ntags: [javascript]\n---\n大家都知道，JavaScript 的變數有其作用域的範圍，若使用前未經 var 宣告，就會自動變成全域變數 (global variable)，而在其 code block 內宣告的變數也只有該 code block 內可以使用。\n\n這次的問題，其實很久以前在 tonyQ 的聚會上就聽他說過了，<del>只是沒想到還真的會遇到 XDDDD</del>\n\n``` javascript\nvar a = 1;\n\n(function(){\n  console.log(a);\t\t// 1\n})();\n```\n上面的 code 很簡單，就是宣告一個全域變數 a，然後值為 1 ，因為是全域變數，所以在之後的匿名函式內可以使用它。\n\n\n``` javascript\nvar a = 1;\n\n(function(){\n  var a = 100;\n  console.log(a);\t\t// 100\n})();\n```\n這次，在匿名函式內，我們另外宣告了一個 a，值為 100，因為其作用域的關係，所以 console 的結果會是 100。\n\n\n接著，問題來了，如果我們在 `var a = 100;` 之前去取值，會發生什麼事呢？\n``` javascript\nvar a = 1;\n\n(function(){\n  console.log(a);    //  ?\n  var a = 100;\n  console.log(a);    // 100\n})();\n```\n\n答案是，第一次的 console.log(a) 會印出 **undefined**，而第二次會出現 100。\n\n因為在匿名函數獨立的 scope 內，不管 var 是放在最前面，或是最後一行，他的變數實體在該 code block 一開始就是新的了，也就是說，剛剛的 code 其實等同下面這段：\n``` javascript\nvar a = 1;\n\n(function(){\n  var a;\n  console.log(a);    // undefined\n  a = 100;\n  console.log(a);    // 100\n})();\n```\n\n所以第一次會印出 undefined 。\n\n要怎麼排除這樣的問題呢，很簡單，要嘛一開始就不要取相同名稱，要嘛就透過參數的方式代入原本的變數，像這樣：\n``` javascript\nvar a = 1;\n\n(function(_a){\n  console.log(_a);    // 1\n  var a = 100;\n  console.log(a);    // 100\n})(a);\n```\n\n","slug":"note-javascript-variables-declared-with-the-scope-scope","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoi000t2kt4ljtisjxs","content":"<p>大家都知道，JavaScript 的變數有其作用域的範圍，若使用前未經 var 宣告，就會自動變成全域變數 (global variable)，而在其 code block 內宣告的變數也只有該 code block 內可以使用。</p>\n<p>這次的問題，其實很久以前在 tonyQ 的聚會上就聽他說過了，<del>只是沒想到還真的會遇到 XDDDD</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>上面的 code 很簡單，就是宣告一個全域變數 a，然後值為 1 ，因為是全域變數，所以在之後的匿名函式內可以使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);\t\t<span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>這次，在匿名函式內，我們另外宣告了一個 a，值為 100，因為其作用域的關係，所以 console 的結果會是 100。</p>\n<p>接著，問題來了，如果我們在 <code>var a = 100;</code> 之前去取值，會發生什麼事呢？\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">//  ?</span></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>答案是，第一次的 console.log(a) 會印出 <strong>undefined</strong>，而第二次會出現 100。</p>\n<p>因為在匿名函數獨立的 scope 內，不管 var 是放在最前面，或是最後一行，他的變數實體在該 code block 一開始就是新的了，也就是說，剛剛的 code 其實等同下面這段：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// undefined</span></div><div class=\"line\">  a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>所以第一次會印出 undefined 。</p>\n<p>要怎麼排除這樣的問題呢，很簡單，要嘛一開始就不要取相同名稱，要嘛就透過參數的方式代入原本的變數，像這樣：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_a);    <span class=\"comment\">// 1</span></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)(a);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>大家都知道，JavaScript 的變數有其作用域的範圍，若使用前未經 var 宣告，就會自動變成全域變數 (global variable)，而在其 code block 內宣告的變數也只有該 code block 內可以使用。</p>\n<p>這次的問題，其實很久以前在 tonyQ 的聚會上就聽他說過了，<del>只是沒想到還真的會遇到 XDDDD</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);\t\t<span class=\"comment\">// 1</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>上面的 code 很簡單，就是宣告一個全域變數 a，然後值為 1 ，因為是全域變數，所以在之後的匿名函式內可以使用它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);\t\t<span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>這次，在匿名函式內，我們另外宣告了一個 a，值為 100，因為其作用域的關係，所以 console 的結果會是 100。</p>\n<p>接著，問題來了，如果我們在 <code>var a = 100;</code> 之前去取值，會發生什麼事呢？\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">//  ?</span></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>答案是，第一次的 console.log(a) 會印出 <strong>undefined</strong>，而第二次會出現 100。</p>\n<p>因為在匿名函數獨立的 scope 內，不管 var 是放在最前面，或是最後一行，他的變數實體在該 code block 一開始就是新的了，也就是說，剛剛的 code 其實等同下面這段：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> a;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// undefined</span></div><div class=\"line\">  a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>所以第一次會印出 undefined 。</p>\n<p>要怎麼排除這樣的問題呢，很簡單，要嘛一開始就不要取相同名稱，要嘛就透過參數的方式代入原本的變數，像這樣：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(_a);    <span class=\"comment\">// 1</span></div><div class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(a);    <span class=\"comment\">// 100</span></div><div class=\"line\">&#125;)(a);</div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"[note] jQuery 與 d3.js 的一些不同之處","date":"2015-04-21T23:19:00.000Z","comments":1,"_content":"以前跟人家介紹 d3.js 的時候，我都會笑稱 d3.js 其實就是 SVG 界的 jQuery。\n但是最近發現不少人對兩者的 select 以及 append 有些疑問，特別把它寫下來紀錄。\n\n先說大家比較熟悉的 jQuery：\n\n``` javascript\n  $(\"body\")\n    .append(\"<div></div>\")\n    .append(\"<em></em>\");\n```\n\n上面這段程式碼產生的 HTML 應該會是這樣的\n\n``` html\n  <body>\n    <div></div>\n    <em></em>\n  </body>\n```\n\n而在 d3.js 的情況：\n\n``` javascript\n  d3.select(\"body\")\n    .append(\"div\")\n      .append(\"em\");\n```\n\n所產生的 HTML 結構會是這樣的：\n\n``` html\n  <body>\n    <div>\n      <em></em>\n    </div>\n  </body>\n```\n\n\n兩者最大的差異點在於 jQuery 的\n``` javascript\n  $(\"body\").append(...)\n```\n\n回傳的會是 $('body') 本身，而 d3.js 的\n\n``` javascript\n  d3.select(\"body\").append(...)\n```\n回傳的會是 append 後的 DOM\n(以上面的範例來說，`d3.select(\"body\").append('div')` 回傳的就會是 `<div></div>` )，\n所以再次執行 append 時，就會將 DOM 加入在前一個 append 的元素，也就是 `<div></div>` 之內。\n\n那麼 jQuery 是否也可以像 d3.js 這樣 append 在新 DOM 內呢？\n先將 em 包在 div 內，最外層再包一層 append 就可以做到了。\n像這樣：\n\n``` javascript\n  $(\"body\").append( $('<div>').append( $('<em>') ) );\n```\n","source":"_posts/note-jquery-and-d3js-some-of-these-differences.md","raw":"---\nlayout: post\ntitle: '[note] jQuery 與 d3.js 的一些不同之處'\ndate: 2015-04-22 07:19\ncomments: true\ncategories: [D3.js]\ntags: [jQuery, d3.js]\n---\n以前跟人家介紹 d3.js 的時候，我都會笑稱 d3.js 其實就是 SVG 界的 jQuery。\n但是最近發現不少人對兩者的 select 以及 append 有些疑問，特別把它寫下來紀錄。\n\n先說大家比較熟悉的 jQuery：\n\n``` javascript\n  $(\"body\")\n    .append(\"<div></div>\")\n    .append(\"<em></em>\");\n```\n\n上面這段程式碼產生的 HTML 應該會是這樣的\n\n``` html\n  <body>\n    <div></div>\n    <em></em>\n  </body>\n```\n\n而在 d3.js 的情況：\n\n``` javascript\n  d3.select(\"body\")\n    .append(\"div\")\n      .append(\"em\");\n```\n\n所產生的 HTML 結構會是這樣的：\n\n``` html\n  <body>\n    <div>\n      <em></em>\n    </div>\n  </body>\n```\n\n\n兩者最大的差異點在於 jQuery 的\n``` javascript\n  $(\"body\").append(...)\n```\n\n回傳的會是 $('body') 本身，而 d3.js 的\n\n``` javascript\n  d3.select(\"body\").append(...)\n```\n回傳的會是 append 後的 DOM\n(以上面的範例來說，`d3.select(\"body\").append('div')` 回傳的就會是 `<div></div>` )，\n所以再次執行 append 時，就會將 DOM 加入在前一個 append 的元素，也就是 `<div></div>` 之內。\n\n那麼 jQuery 是否也可以像 d3.js 這樣 append 在新 DOM 內呢？\n先將 em 包在 div 內，最外層再包一層 append 就可以做到了。\n像這樣：\n\n``` javascript\n  $(\"body\").append( $('<div>').append( $('<em>') ) );\n```\n","slug":"note-jquery-and-d3js-some-of-these-differences","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoj000x2kt4fsijbhl6","content":"<p>以前跟人家介紹 d3.js 的時候，我都會笑稱 d3.js 其實就是 SVG 界的 jQuery。\n但是最近發現不少人對兩者的 select 以及 append 有些疑問，特別把它寫下來紀錄。</p>\n<p>先說大家比較熟悉的 jQuery：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"&lt;em&gt;&lt;/em&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>上面這段程式碼產生的 HTML 應該會是這樣的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而在 d3.js 的情況：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"em\"</span>);</div></pre></td></tr></table></figure>\n<p>所產生的 HTML 結構會是這樣的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>兩者最大的差異點在於 jQuery 的\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>).append(...)</div></pre></td></tr></table></figure></p>\n<p>回傳的會是 $(&#39;body&#39;) 本身，而 d3.js 的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).append(...)</div></pre></td></tr></table></figure>\n<p>回傳的會是 append 後的 DOM\n(以上面的範例來說，<code>d3.select(&quot;body&quot;).append(&#39;div&#39;)</code> 回傳的就會是 <code>&lt;div&gt;&lt;/div&gt;</code> )，\n所以再次執行 append 時，就會將 DOM 加入在前一個 append 的元素，也就是 <code>&lt;div&gt;&lt;/div&gt;</code> 之內。</p>\n<p>那麼 jQuery 是否也可以像 d3.js 這樣 append 在新 DOM 內呢？\n先將 em 包在 div 內，最外層再包一層 append 就可以做到了。\n像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>).append( $(<span class=\"string\">'&lt;div&gt;'</span>).append( $(<span class=\"string\">'&lt;em&gt;'</span>) ) );</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>以前跟人家介紹 d3.js 的時候，我都會笑稱 d3.js 其實就是 SVG 界的 jQuery。\n但是最近發現不少人對兩者的 select 以及 append 有些疑問，特別把它寫下來紀錄。</p>\n<p>先說大家比較熟悉的 jQuery：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"&lt;em&gt;&lt;/em&gt;\"</span>);</div></pre></td></tr></table></figure>\n<p>上面這段程式碼產生的 HTML 應該會是這樣的</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>而在 d3.js 的情況：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>)</div><div class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</div><div class=\"line\">    .append(<span class=\"string\">\"em\"</span>);</div></pre></td></tr></table></figure>\n<p>所產生的 HTML 結構會是這樣的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>兩者最大的差異點在於 jQuery 的\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>).append(...)</div></pre></td></tr></table></figure></p>\n<p>回傳的會是 $(&#39;body&#39;) 本身，而 d3.js 的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).append(...)</div></pre></td></tr></table></figure>\n<p>回傳的會是 append 後的 DOM\n(以上面的範例來說，<code>d3.select(&quot;body&quot;).append(&#39;div&#39;)</code> 回傳的就會是 <code>&lt;div&gt;&lt;/div&gt;</code> )，\n所以再次執行 append 時，就會將 DOM 加入在前一個 append 的元素，也就是 <code>&lt;div&gt;&lt;/div&gt;</code> 之內。</p>\n<p>那麼 jQuery 是否也可以像 d3.js 這樣 append 在新 DOM 內呢？\n先將 em 包在 div 內，最外層再包一層 append 就可以做到了。\n像這樣：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"body\"</span>).append( $(<span class=\"string\">'&lt;div&gt;'</span>).append( $(<span class=\"string\">'&lt;em&gt;'</span>) ) );</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"[筆記] Shapefile to GeoJSON","date":"2015-05-04T22:45:00.000Z","comments":1,"_content":"因為每次轉檔都要查，索性把步驟記錄下來。\n\n首先要安裝 GDAL (Geospatial Data Abstraction Library) 這個程式，\n因為我是用 Mac ，所以在 terminal 輸入 `brew install gdal` 就可以了。\n\n其他作業系統的安裝方式可詳閱 http://www.gdal.org/ 。\n\n安裝好 gdal 之後，就可以透過 ogr2ogr 來執行轉檔，一樣在 terminal 輸入：\n\n`ogr2ogr -f \"GeoJSON\" output.json source.shp`\n\n以臺北市政府開放資料的**臺北市區界圖** ( http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143 ) 提供的 Shapefile 來說，因為它的坐標系統是 EPSG:3826(TWD97/121分帶)，我們需要把它轉換成 WGS84經緯度(EPSG:4326)，所以透過 `-s_srs` 與 `-t_srs` 來分別指定轉換前與轉換後的座標系統：\n\n`ogr2ogr -f \"GeoJSON\" -s_srs EPSG:3826 -t_srs EPSG:4326  output.json source.shp`\n\n轉換後的 geojson 直接輸出到 google map 上：\n![螢幕快照 2015-05-05 下午3.47.07.png](http://user-image.logdown.io/user/3292/blog/3340/post/263637/UrqBEFSmTuazvdty255S_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-05%20%E4%B8%8B%E5%8D%883.47.07.png)\n\n就這樣。\n\n[補充]\n關於 GeoJson 送到 Google Map 的部分可以參考我的其他文章：\n[透過 Google Maps API 處理 GeoJSON 資料](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data \"透過 Google Maps API 處理 GeoJSON 資料\")\n[利用 Google Map 檢視台北市降雨淹水模擬圖](http://kuro.tw/posts/2015/09/30/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map \"利用 Google Map 檢視台北市降雨淹水模擬圖\")\n\n又，如果需要轉換成 TopoJSON 的話，也可以參考這篇： [視覺化實戰 － D3.js 地理區塊視覺化](http://blog.infographics.tw/2015/04/visualize-geographics-with-d3js/ \"視覺化實戰 － D3.js 地理區塊視覺化\")","source":"_posts/note-shapefile-to-geojson.md","raw":"---\nlayout: post\ntitle: '[筆記] Shapefile to GeoJSON'\ndate: 2015-05-05 06:45\ncomments: true\ncategories: [GeoJSON]\n---\n因為每次轉檔都要查，索性把步驟記錄下來。\n\n首先要安裝 GDAL (Geospatial Data Abstraction Library) 這個程式，\n因為我是用 Mac ，所以在 terminal 輸入 `brew install gdal` 就可以了。\n\n其他作業系統的安裝方式可詳閱 http://www.gdal.org/ 。\n\n安裝好 gdal 之後，就可以透過 ogr2ogr 來執行轉檔，一樣在 terminal 輸入：\n\n`ogr2ogr -f \"GeoJSON\" output.json source.shp`\n\n以臺北市政府開放資料的**臺北市區界圖** ( http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143 ) 提供的 Shapefile 來說，因為它的坐標系統是 EPSG:3826(TWD97/121分帶)，我們需要把它轉換成 WGS84經緯度(EPSG:4326)，所以透過 `-s_srs` 與 `-t_srs` 來分別指定轉換前與轉換後的座標系統：\n\n`ogr2ogr -f \"GeoJSON\" -s_srs EPSG:3826 -t_srs EPSG:4326  output.json source.shp`\n\n轉換後的 geojson 直接輸出到 google map 上：\n![螢幕快照 2015-05-05 下午3.47.07.png](http://user-image.logdown.io/user/3292/blog/3340/post/263637/UrqBEFSmTuazvdty255S_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-05%20%E4%B8%8B%E5%8D%883.47.07.png)\n\n就這樣。\n\n[補充]\n關於 GeoJson 送到 Google Map 的部分可以參考我的其他文章：\n[透過 Google Maps API 處理 GeoJSON 資料](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data \"透過 Google Maps API 處理 GeoJSON 資料\")\n[利用 Google Map 檢視台北市降雨淹水模擬圖](http://kuro.tw/posts/2015/09/30/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map \"利用 Google Map 檢視台北市降雨淹水模擬圖\")\n\n又，如果需要轉換成 TopoJSON 的話，也可以參考這篇： [視覺化實戰 － D3.js 地理區塊視覺化](http://blog.infographics.tw/2015/04/visualize-geographics-with-d3js/ \"視覺化實戰 － D3.js 地理區塊視覺化\")","slug":"note-shapefile-to-geojson","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjok000z2kt4yn6o68a8","content":"<p>因為每次轉檔都要查，索性把步驟記錄下來。</p>\n<p>首先要安裝 GDAL (Geospatial Data Abstraction Library) 這個程式，\n因為我是用 Mac ，所以在 terminal 輸入 <code>brew install gdal</code> 就可以了。</p>\n<p>其他作業系統的安裝方式可詳閱 <a href=\"http://www.gdal.org/\" target=\"_blank\" rel=\"external\">http://www.gdal.org/</a> 。</p>\n<p>安裝好 gdal 之後，就可以透過 ogr2ogr 來執行轉檔，一樣在 terminal 輸入：</p>\n<p><code>ogr2ogr -f &quot;GeoJSON&quot; output.json source.shp</code></p>\n<p>以臺北市政府開放資料的<strong>臺北市區界圖</strong> ( <a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143\" target=\"_blank\" rel=\"external\">http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143</a> ) 提供的 Shapefile 來說，因為它的坐標系統是 EPSG:3826(TWD97/121分帶)，我們需要把它轉換成 WGS84經緯度(EPSG:4326)，所以透過 <code>-s_srs</code> 與 <code>-t_srs</code> 來分別指定轉換前與轉換後的座標系統：</p>\n<p><code>ogr2ogr -f &quot;GeoJSON&quot; -s_srs EPSG:3826 -t_srs EPSG:4326  output.json source.shp</code></p>\n<p>轉換後的 geojson 直接輸出到 google map 上：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/263637/UrqBEFSmTuazvdty255S_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-05%20%E4%B8%8B%E5%8D%883.47.07.png\" alt=\"螢幕快照 2015-05-05 下午3.47.07.png\"></p>\n<p>就這樣。</p>\n<p>[補充]\n關於 GeoJson 送到 Google Map 的部分可以參考我的其他文章：\n<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\" title=\"透過 Google Maps API 處理 GeoJSON 資料\">透過 Google Maps API 處理 GeoJSON 資料</a>\n<a href=\"http://kuro.tw/posts/2015/09/30/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map\" title=\"利用 Google Map 檢視台北市降雨淹水模擬圖\">利用 Google Map 檢視台北市降雨淹水模擬圖</a></p>\n<p>又，如果需要轉換成 TopoJSON 的話，也可以參考這篇： <a href=\"http://blog.infographics.tw/2015/04/visualize-geographics-with-d3js/\" title=\"視覺化實戰 － D3.js 地理區塊視覺化\" target=\"_blank\" rel=\"external\">視覺化實戰 － D3.js 地理區塊視覺化</a></p>\n","excerpt":"","more":"<p>因為每次轉檔都要查，索性把步驟記錄下來。</p>\n<p>首先要安裝 GDAL (Geospatial Data Abstraction Library) 這個程式，\n因為我是用 Mac ，所以在 terminal 輸入 <code>brew install gdal</code> 就可以了。</p>\n<p>其他作業系統的安裝方式可詳閱 <a href=\"http://www.gdal.org/\">http://www.gdal.org/</a> 。</p>\n<p>安裝好 gdal 之後，就可以透過 ogr2ogr 來執行轉檔，一樣在 terminal 輸入：</p>\n<p><code>ogr2ogr -f &quot;GeoJSON&quot; output.json source.shp</code></p>\n<p>以臺北市政府開放資料的<strong>臺北市區界圖</strong> ( <a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143\">http://data.taipei/opendata/datalist/datasetMeta?oid=1601ef3a-c253-4988-b047-943d9e786143</a> ) 提供的 Shapefile 來說，因為它的坐標系統是 EPSG:3826(TWD97/121分帶)，我們需要把它轉換成 WGS84經緯度(EPSG:4326)，所以透過 <code>-s_srs</code> 與 <code>-t_srs</code> 來分別指定轉換前與轉換後的座標系統：</p>\n<p><code>ogr2ogr -f &quot;GeoJSON&quot; -s_srs EPSG:3826 -t_srs EPSG:4326  output.json source.shp</code></p>\n<p>轉換後的 geojson 直接輸出到 google map 上：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/263637/UrqBEFSmTuazvdty255S_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-05-05%20%E4%B8%8B%E5%8D%883.47.07.png\" alt=\"螢幕快照 2015-05-05 下午3.47.07.png\"></p>\n<p>就這樣。</p>\n<p>[補充]\n關於 GeoJson 送到 Google Map 的部分可以參考我的其他文章：\n<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\" title=\"透過 Google Maps API 處理 GeoJSON 資料\">透過 Google Maps API 處理 GeoJSON 資料</a>\n<a href=\"http://kuro.tw/posts/2015/09/30/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map\" title=\"利用 Google Map 檢視台北市降雨淹水模擬圖\">利用 Google Map 檢視台北市降雨淹水模擬圖</a></p>\n<p>又，如果需要轉換成 TopoJSON 的話，也可以參考這篇： <a href=\"http://blog.infographics.tw/2015/04/visualize-geographics-with-d3js/\" title=\"視覺化實戰 － D3.js 地理區塊視覺化\">視覺化實戰 － D3.js 地理區塊視覺化</a></p>\n"},{"layout":"post","title":"[PHP] 將 HTML5 Canvas 產生的圖片上傳至伺服器端處理","date":"2013-09-08T04:00:00.000Z","comments":1,"_content":"一般來說有兩種處理方式：\n\n## 直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 `<img>` 的 src 屬性或是 CSS 中：\n\n  像這樣：\n\n ``` html\n  <img src=\"<?php echo $base64_img_string; ?>\" />\n ```\n\n  實際執行的時候會長得像這樣：\n\n``` html\n  <img src=\"data:image/png;base64,......(後略)\" />\n```\n\n  * 優點：\n    簡單易用，幾乎不需要做任何處理。\n    HTTP Request 變少，傳送一個大檔案會比連續傳送多個拆解的小檔更快速有效率，且節省頻寬。\n\n\n  * 缺點：\n    IE7 以前的版本不支援 DataURI 格式。 IE8 開始雖然有支援，但限制大小不可超過 32KB\n    圖檔大的時候產生的 DataURI String 大得驚人(比原本的圖檔還大約 1/3)\n    圖檔修改後必須要重新編碼，相對的嵌入 DataURI String 的網頁也都要跟著修正\n    因圖片跟網頁綁再一起，不利快取\n\n## 將 base64 DataURI 送到 PHP 端儲存成圖片後使用：\n\n  如標題，應該不需要多加解釋了，就是利用 `base64_decode()` 將 data uri 反解，\n  直接看 code。 PHP 的部分：\n\n``` php\n<?php\n  // 設定圖檔上傳路徑\n  define('UPLOAD_PATH', 'images/');\n\n  // 接收 POST 進來的 base64 DtatURI String\n  $img = $_POST['data'];\n\n  // 轉檔 & 存檔\n  $img = str_replace('data:image/png;base64,', '', $img);\n  $img = str_replace(' ', '+', $img);\n  $data = base64_decode($img);\n  $file = UPLOAD_PATH . uniqid() . '.png';\n  $success = file_put_contents($file, $data);\n\n  // output string\n  $output = ($success) ? '<img src=\"'. $file .'\" alt=\"Canvas Image\" />' : '<p>Unable to save the file.</p>';\n```\n\n  View 的部分 (HTML)：\n\n``` html\n<!DOCTYPE HTML>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n  <title>PHP base64 image decode demo</title>\n  </head>\n  <body>\n    <!-- 成功存檔的話會秀出 img 標籤以及圖檔，失敗的話會出現 Unable to save the file 的訊息 -->\n    <?php print $output; ?>\n  </body>\n</html>\n```\n這樣就完成了。","source":"_posts/php-html5-canvas-resulting-base64-datauri-images-will-be-uploaded-to-the-server-side-processing.md","raw":"---\nlayout: post\ntitle: '[PHP] 將 HTML5 Canvas 產生的圖片上傳至伺服器端處理'\ndate: 2013-09-08 12:00\ncomments: true\ncategories: [HTML]\ntags: [html, html5, canvas, php]\n---\n一般來說有兩種處理方式：\n\n## 直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 `<img>` 的 src 屬性或是 CSS 中：\n\n  像這樣：\n\n ``` html\n  <img src=\"<?php echo $base64_img_string; ?>\" />\n ```\n\n  實際執行的時候會長得像這樣：\n\n``` html\n  <img src=\"data:image/png;base64,......(後略)\" />\n```\n\n  * 優點：\n    簡單易用，幾乎不需要做任何處理。\n    HTTP Request 變少，傳送一個大檔案會比連續傳送多個拆解的小檔更快速有效率，且節省頻寬。\n\n\n  * 缺點：\n    IE7 以前的版本不支援 DataURI 格式。 IE8 開始雖然有支援，但限制大小不可超過 32KB\n    圖檔大的時候產生的 DataURI String 大得驚人(比原本的圖檔還大約 1/3)\n    圖檔修改後必須要重新編碼，相對的嵌入 DataURI String 的網頁也都要跟著修正\n    因圖片跟網頁綁再一起，不利快取\n\n## 將 base64 DataURI 送到 PHP 端儲存成圖片後使用：\n\n  如標題，應該不需要多加解釋了，就是利用 `base64_decode()` 將 data uri 反解，\n  直接看 code。 PHP 的部分：\n\n``` php\n<?php\n  // 設定圖檔上傳路徑\n  define('UPLOAD_PATH', 'images/');\n\n  // 接收 POST 進來的 base64 DtatURI String\n  $img = $_POST['data'];\n\n  // 轉檔 & 存檔\n  $img = str_replace('data:image/png;base64,', '', $img);\n  $img = str_replace(' ', '+', $img);\n  $data = base64_decode($img);\n  $file = UPLOAD_PATH . uniqid() . '.png';\n  $success = file_put_contents($file, $data);\n\n  // output string\n  $output = ($success) ? '<img src=\"'. $file .'\" alt=\"Canvas Image\" />' : '<p>Unable to save the file.</p>';\n```\n\n  View 的部分 (HTML)：\n\n``` html\n<!DOCTYPE HTML>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n  <title>PHP base64 image decode demo</title>\n  </head>\n  <body>\n    <!-- 成功存檔的話會秀出 img 標籤以及圖檔，失敗的話會出現 Unable to save the file 的訊息 -->\n    <?php print $output; ?>\n  </body>\n</html>\n```\n這樣就完成了。","slug":"php-html5-canvas-resulting-base64-datauri-images-will-be-uploaded-to-the-server-side-processing","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjom00142kt4wh8frhar","content":"<p>一般來說有兩種處理方式：</p>\n<h2 id=\"直接把-DataURI-字串儲存起來，等要用的時候直接輸出至-lt-img-gt-的-src-屬性或是-CSS-中：\"><a href=\"#直接把-DataURI-字串儲存起來，等要用的時候直接輸出至-lt-img-gt-的-src-屬性或是-CSS-中：\" class=\"headerlink\" title=\"直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 &lt;img&gt; 的 src 屬性或是 CSS 中：\"></a>直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 <code>&lt;img&gt;</code> 的 src 屬性或是 CSS 中：</h2><p>  像這樣：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;?php echo $base64_img_string; ?&gt;\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>  實際執行的時候會長得像這樣：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"data:image/png;base64,......(後略)\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>優點：\n簡單易用，幾乎不需要做任何處理。\nHTTP Request 變少，傳送一個大檔案會比連續傳送多個拆解的小檔更快速有效率，且節省頻寬。</li>\n</ul>\n<ul>\n<li>缺點：\nIE7 以前的版本不支援 DataURI 格式。 IE8 開始雖然有支援，但限制大小不可超過 32KB\n圖檔大的時候產生的 DataURI String 大得驚人(比原本的圖檔還大約 1/3)\n圖檔修改後必須要重新編碼，相對的嵌入 DataURI String 的網頁也都要跟著修正\n因圖片跟網頁綁再一起，不利快取</li>\n</ul>\n<h2 id=\"將-base64-DataURI-送到-PHP-端儲存成圖片後使用：\"><a href=\"#將-base64-DataURI-送到-PHP-端儲存成圖片後使用：\" class=\"headerlink\" title=\"將 base64 DataURI 送到 PHP 端儲存成圖片後使用：\"></a>將 base64 DataURI 送到 PHP 端儲存成圖片後使用：</h2><p>  如標題，應該不需要多加解釋了，就是利用 <code>base64_decode()</code> 將 data uri 反解，\n  直接看 code。 PHP 的部分：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"comment\">// 設定圖檔上傳路徑</span></div><div class=\"line\">  define(<span class=\"string\">'UPLOAD_PATH'</span>, <span class=\"string\">'images/'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 接收 POST 進來的 base64 DtatURI String</span></div><div class=\"line\">  $img = $_POST[<span class=\"string\">'data'</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 轉檔 &amp; 存檔</span></div><div class=\"line\">  $img = str_replace(<span class=\"string\">'data:image/png;base64,'</span>, <span class=\"string\">''</span>, $img);</div><div class=\"line\">  $img = str_replace(<span class=\"string\">' '</span>, <span class=\"string\">'+'</span>, $img);</div><div class=\"line\">  $data = base64_decode($img);</div><div class=\"line\">  $file = UPLOAD_PATH . uniqid() . <span class=\"string\">'.png'</span>;</div><div class=\"line\">  $success = file_put_contents($file, $data);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// output string</span></div><div class=\"line\">  $output = ($success) ? <span class=\"string\">'&lt;img src=\"'</span>. $file .<span class=\"string\">'\" alt=\"Canvas Image\" /&gt;'</span> : <span class=\"string\">'&lt;p&gt;Unable to save the file.&lt;/p&gt;'</span>;</div></pre></td></tr></table></figure>\n<p>  View 的部分 (HTML)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>PHP base64 image decode demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 成功存檔的話會秀出 img 標籤以及圖檔，失敗的話會出現 Unable to save the file 的訊息 --&gt;</span></div><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $output; <span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣就完成了。</p>\n","excerpt":"","more":"<p>一般來說有兩種處理方式：</p>\n<h2 id=\"直接把-DataURI-字串儲存起來，等要用的時候直接輸出至-lt-img-gt-的-src-屬性或是-CSS-中：\"><a href=\"#直接把-DataURI-字串儲存起來，等要用的時候直接輸出至-lt-img-gt-的-src-屬性或是-CSS-中：\" class=\"headerlink\" title=\"直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 &lt;img&gt; 的 src 屬性或是 CSS 中：\"></a>直接把 DataURI 字串儲存起來，等要用的時候直接輸出至 <code>&lt;img&gt;</code> 的 src 屬性或是 CSS 中：</h2><p>  像這樣：</p>\n <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;?php echo $base64_img_string; ?&gt;\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>  實際執行的時候會長得像這樣：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"data:image/png;base64,......(後略)\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>優點：\n簡單易用，幾乎不需要做任何處理。\nHTTP Request 變少，傳送一個大檔案會比連續傳送多個拆解的小檔更快速有效率，且節省頻寬。</li>\n</ul>\n<ul>\n<li>缺點：\nIE7 以前的版本不支援 DataURI 格式。 IE8 開始雖然有支援，但限制大小不可超過 32KB\n圖檔大的時候產生的 DataURI String 大得驚人(比原本的圖檔還大約 1/3)\n圖檔修改後必須要重新編碼，相對的嵌入 DataURI String 的網頁也都要跟著修正\n因圖片跟網頁綁再一起，不利快取</li>\n</ul>\n<h2 id=\"將-base64-DataURI-送到-PHP-端儲存成圖片後使用：\"><a href=\"#將-base64-DataURI-送到-PHP-端儲存成圖片後使用：\" class=\"headerlink\" title=\"將 base64 DataURI 送到 PHP 端儲存成圖片後使用：\"></a>將 base64 DataURI 送到 PHP 端儲存成圖片後使用：</h2><p>  如標題，應該不需要多加解釋了，就是利用 <code>base64_decode()</code> 將 data uri 反解，\n  直接看 code。 PHP 的部分：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">  <span class=\"comment\">// 設定圖檔上傳路徑</span></div><div class=\"line\">  define(<span class=\"string\">'UPLOAD_PATH'</span>, <span class=\"string\">'images/'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 接收 POST 進來的 base64 DtatURI String</span></div><div class=\"line\">  $img = $_POST[<span class=\"string\">'data'</span>];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 轉檔 &amp; 存檔</span></div><div class=\"line\">  $img = str_replace(<span class=\"string\">'data:image/png;base64,'</span>, <span class=\"string\">''</span>, $img);</div><div class=\"line\">  $img = str_replace(<span class=\"string\">' '</span>, <span class=\"string\">'+'</span>, $img);</div><div class=\"line\">  $data = base64_decode($img);</div><div class=\"line\">  $file = UPLOAD_PATH . uniqid() . <span class=\"string\">'.png'</span>;</div><div class=\"line\">  $success = file_put_contents($file, $data);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// output string</span></div><div class=\"line\">  $output = ($success) ? <span class=\"string\">'&lt;img src=\"'</span>. $file .<span class=\"string\">'\" alt=\"Canvas Image\" /&gt;'</span> : <span class=\"string\">'&lt;p&gt;Unable to save the file.&lt;/p&gt;'</span>;</div></pre></td></tr></table></figure>\n<p>  View 的部分 (HTML)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>PHP base64 image decode demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 成功存檔的話會秀出 img 標籤以及圖檔，失敗的話會出現 Unable to save the file 的訊息 --&gt;</span></div><div class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">print</span> $output; <span class=\"meta\">?&gt;</span></span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這樣就完成了。</p>\n"},{"layout":"post","title":"[snippet] D3.js 甜甜圈圖 (donut chart) 的放大漸變效果","date":"2015-05-04T02:47:00.000Z","comments":1,"_content":"做法很簡單，就是做兩個 `d3.svg.arc()` 然後在 `mouseover` & `mouseout` 的時候改變 `d` 屬性即可。\n\n這裏就拿 http://bl.ocks.org/mbostock/3887193 作為範例。\n\nDEMO: (original charts)\nhttp://output.jsbin.com/darexo/1/\n\nDEMO2: (add hover effect)\nhttp://output.jsbin.com/darexo/3/\n\n<iframe class=\"jsbin-embed\" src=\"http://jsbin.com/darexo/3/embed?output\" frameborder=\"0\" height=\"400\"></iframe>\n\n``` javascript\n// original\nvar arc = d3.svg.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(radius - 70);\n\n// arc with scaling\nvar arcOver = d3.svg.arc()\n    .outerRadius(radius)\n    .innerRadius(radius - 70);\n```\n\n中間略\n\n``` javascript\n// adding mouse events with transition\ng.selectAll(\".arc > path\")\n\t.on({\n\t\t\"mouseover\": function(d, i){\n\t\t\td3.select(this).transition().duration(250).attr('d', arcOver);\n\t\t},\n\t\t\"mouseout\": function(d, i){\n\t\t\td3.select(this).transition().duration(250).attr('d', arc);\n\t\t}\n});\n```\n\n補充：感謝小馬提出 hover 在 text 上會無法執行動畫的問題。\n只要把 mouse event 改綁在上一層的 `<g>` 上面，或是在 text 的 CSS 下 `pointer-events: none;` 取消它的 pointer 事件即可。\n\n``` javascript\n  g.on({\n    \"mouseover\": function(d, i){\n      d3.select(this.childNodes[0]).transition().duration(250).attr('d', arcOver);\n    },\n    \"mouseout\": function(d, i){\n      d3.select(this.childNodes[0]).transition().duration(250).attr('d', arc);\n    }\n  });\n```\n","source":"_posts/snippet-d3js-donuts-chart-the-transition-effect.md","raw":"---\nlayout: post\ntitle: '[snippet] D3.js 甜甜圈圖 (donut chart) 的放大漸變效果'\ndate: 2015-05-04 10:47\ncomments: true\ncategories: [D3.js]\ntags: [D3.js, donut chart]\n---\n做法很簡單，就是做兩個 `d3.svg.arc()` 然後在 `mouseover` & `mouseout` 的時候改變 `d` 屬性即可。\n\n這裏就拿 http://bl.ocks.org/mbostock/3887193 作為範例。\n\nDEMO: (original charts)\nhttp://output.jsbin.com/darexo/1/\n\nDEMO2: (add hover effect)\nhttp://output.jsbin.com/darexo/3/\n\n<iframe class=\"jsbin-embed\" src=\"http://jsbin.com/darexo/3/embed?output\" frameborder=\"0\" height=\"400\"></iframe>\n\n``` javascript\n// original\nvar arc = d3.svg.arc()\n    .outerRadius(radius - 10)\n    .innerRadius(radius - 70);\n\n// arc with scaling\nvar arcOver = d3.svg.arc()\n    .outerRadius(radius)\n    .innerRadius(radius - 70);\n```\n\n中間略\n\n``` javascript\n// adding mouse events with transition\ng.selectAll(\".arc > path\")\n\t.on({\n\t\t\"mouseover\": function(d, i){\n\t\t\td3.select(this).transition().duration(250).attr('d', arcOver);\n\t\t},\n\t\t\"mouseout\": function(d, i){\n\t\t\td3.select(this).transition().duration(250).attr('d', arc);\n\t\t}\n});\n```\n\n補充：感謝小馬提出 hover 在 text 上會無法執行動畫的問題。\n只要把 mouse event 改綁在上一層的 `<g>` 上面，或是在 text 的 CSS 下 `pointer-events: none;` 取消它的 pointer 事件即可。\n\n``` javascript\n  g.on({\n    \"mouseover\": function(d, i){\n      d3.select(this.childNodes[0]).transition().duration(250).attr('d', arcOver);\n    },\n    \"mouseout\": function(d, i){\n      d3.select(this.childNodes[0]).transition().duration(250).attr('d', arc);\n    }\n  });\n```\n","slug":"snippet-d3js-donuts-chart-the-transition-effect","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjon00162kt4b3m06lkg","content":"<p>做法很簡單，就是做兩個 <code>d3.svg.arc()</code> 然後在 <code>mouseover</code> &amp; <code>mouseout</code> 的時候改變 <code>d</code> 屬性即可。</p>\n<p>這裏就拿 <a href=\"http://bl.ocks.org/mbostock/3887193\" target=\"_blank\" rel=\"external\">http://bl.ocks.org/mbostock/3887193</a> 作為範例。</p>\n<p>DEMO: (original charts)\n<a href=\"http://output.jsbin.com/darexo/1/\" target=\"_blank\" rel=\"external\">http://output.jsbin.com/darexo/1/</a></p>\n<p>DEMO2: (add hover effect)\n<a href=\"http://output.jsbin.com/darexo/3/\" target=\"_blank\" rel=\"external\">http://output.jsbin.com/darexo/3/</a></p>\n<iframe class=\"jsbin-embed\" src=\"http://jsbin.com/darexo/3/embed?output\" frameborder=\"0\" height=\"400\"></iframe>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// original</span></div><div class=\"line\"><span class=\"keyword\">var</span> arc = d3.svg.arc()</div><div class=\"line\">    .outerRadius(radius - <span class=\"number\">10</span>)</div><div class=\"line\">    .innerRadius(radius - <span class=\"number\">70</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arc with scaling</span></div><div class=\"line\"><span class=\"keyword\">var</span> arcOver = d3.svg.arc()</div><div class=\"line\">    .outerRadius(radius)</div><div class=\"line\">    .innerRadius(radius - <span class=\"number\">70</span>);</div></pre></td></tr></table></figure>\n<p>中間略</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// adding mouse events with transition</span></div><div class=\"line\">g.selectAll(<span class=\"string\">\".arc &gt; path\"</span>)</div><div class=\"line\">true.on(&#123;</div><div class=\"line\">truetrue<span class=\"string\">\"mouseover\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">truetruetrued3.select(<span class=\"keyword\">this</span>).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arcOver);</div><div class=\"line\">truetrue&#125;,</div><div class=\"line\">truetrue<span class=\"string\">\"mouseout\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">truetruetrued3.select(<span class=\"keyword\">this</span>).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arc);</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>補充：感謝小馬提出 hover 在 text 上會無法執行動畫的問題。\n只要把 mouse event 改綁在上一層的 <code>&lt;g&gt;</code> 上面，或是在 text 的 CSS 下 <code>pointer-events: none;</code> 取消它的 pointer 事件即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">g.on(&#123;</div><div class=\"line\">  <span class=\"string\">\"mouseover\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">    d3.select(<span class=\"keyword\">this</span>.childNodes[<span class=\"number\">0</span>]).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arcOver);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"mouseout\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">    d3.select(<span class=\"keyword\">this</span>.childNodes[<span class=\"number\">0</span>]).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arc);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>做法很簡單，就是做兩個 <code>d3.svg.arc()</code> 然後在 <code>mouseover</code> &amp; <code>mouseout</code> 的時候改變 <code>d</code> 屬性即可。</p>\n<p>這裏就拿 <a href=\"http://bl.ocks.org/mbostock/3887193\">http://bl.ocks.org/mbostock/3887193</a> 作為範例。</p>\n<p>DEMO: (original charts)\n<a href=\"http://output.jsbin.com/darexo/1/\">http://output.jsbin.com/darexo/1/</a></p>\n<p>DEMO2: (add hover effect)\n<a href=\"http://output.jsbin.com/darexo/3/\">http://output.jsbin.com/darexo/3/</a></p>\n<iframe class=\"jsbin-embed\" src=\"http://jsbin.com/darexo/3/embed?output\" frameborder=\"0\" height=\"400\"></iframe>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// original</span></div><div class=\"line\"><span class=\"keyword\">var</span> arc = d3.svg.arc()</div><div class=\"line\">    .outerRadius(radius - <span class=\"number\">10</span>)</div><div class=\"line\">    .innerRadius(radius - <span class=\"number\">70</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// arc with scaling</span></div><div class=\"line\"><span class=\"keyword\">var</span> arcOver = d3.svg.arc()</div><div class=\"line\">    .outerRadius(radius)</div><div class=\"line\">    .innerRadius(radius - <span class=\"number\">70</span>);</div></pre></td></tr></table></figure>\n<p>中間略</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// adding mouse events with transition</span></div><div class=\"line\">g.selectAll(<span class=\"string\">\".arc &gt; path\"</span>)</div><div class=\"line\">true.on(&#123;</div><div class=\"line\">truetrue<span class=\"string\">\"mouseover\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">truetruetrued3.select(<span class=\"keyword\">this</span>).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arcOver);</div><div class=\"line\">truetrue&#125;,</div><div class=\"line\">truetrue<span class=\"string\">\"mouseout\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">truetruetrued3.select(<span class=\"keyword\">this</span>).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arc);</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>補充：感謝小馬提出 hover 在 text 上會無法執行動畫的問題。\n只要把 mouse event 改綁在上一層的 <code>&lt;g&gt;</code> 上面，或是在 text 的 CSS 下 <code>pointer-events: none;</code> 取消它的 pointer 事件即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">g.on(&#123;</div><div class=\"line\">  <span class=\"string\">\"mouseover\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">    d3.select(<span class=\"keyword\">this</span>.childNodes[<span class=\"number\">0</span>]).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arcOver);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"mouseout\"</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d, i</span>)</span>&#123;</div><div class=\"line\">    d3.select(<span class=\"keyword\">this</span>.childNodes[<span class=\"number\">0</span>]).transition().duration(<span class=\"number\">250</span>).attr(<span class=\"string\">'d'</span>, arc);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Taipei D3.js Meetup 小聚分享心得","date":"2015-06-18T05:32:00.000Z","comments":1,"_content":"這次我在 [Taipei D3.js Meetup](http://www.meetup.com/Taipei-D3-js-Meetup/ \"Taipei D3.js Meetup\") (現在似乎改叫 Visual Thursday) 分享的 Talk 是有關於地理視覺化的簡介，雖然題目聽起來很學術，但其實內容是我這陣子對於 Web GIS 以及地圖視覺化的一些摸索心得分享。\n\n感謝台灣微軟提供場地 XD\n\n下面是我的投影片\n<iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/mhzctMFXFoHMJn\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"margin-bottom:1em;\"></iframe>\n\n\n這次幾個 Demo 的原始碼都放在 Github 上： https://github.com/kurotanshi/VisualThursday_demo\n有興趣的朋友可以自行下載研究。\n\n想看 Online Demo 的也可以直接到這： http://kurotanshi.github.io/VisualThursday_demo/\n\n雖然都是以 Google Map 為範例，但是大部份的圖資系統如 leaflet.js / MapBox 等都是通用的，尤其是 [Turf.js](http://turfjs.org/ \"http://turfjs.org/\") 這個地理資訊分析的工具，十分強大，可以直接針對 geojson 做運算，也可以透過 node 在後端執行運算。至今我還在摸索它的功能，也許未來更加熟練後可以再來分享給大家。\n\n謝謝所有在端午連假前仍願意來參與活動的朋友，大家端午節快樂 :)\n\n最後，我們還有很多專案想實現，歡迎有志之士加入！","source":"_posts/taipei-d3js-meetup-gathering-to-share-experiences.md","raw":"---\nlayout: post\ntitle: 'Taipei D3.js Meetup 小聚分享心得'\ndate: 2015-06-18 13:32\ncomments: true\ncategories: [D3.js]\ntags: [D3.js, opendata]\n---\n這次我在 [Taipei D3.js Meetup](http://www.meetup.com/Taipei-D3-js-Meetup/ \"Taipei D3.js Meetup\") (現在似乎改叫 Visual Thursday) 分享的 Talk 是有關於地理視覺化的簡介，雖然題目聽起來很學術，但其實內容是我這陣子對於 Web GIS 以及地圖視覺化的一些摸索心得分享。\n\n感謝台灣微軟提供場地 XD\n\n下面是我的投影片\n<iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/mhzctMFXFoHMJn\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"margin-bottom:1em;\"></iframe>\n\n\n這次幾個 Demo 的原始碼都放在 Github 上： https://github.com/kurotanshi/VisualThursday_demo\n有興趣的朋友可以自行下載研究。\n\n想看 Online Demo 的也可以直接到這： http://kurotanshi.github.io/VisualThursday_demo/\n\n雖然都是以 Google Map 為範例，但是大部份的圖資系統如 leaflet.js / MapBox 等都是通用的，尤其是 [Turf.js](http://turfjs.org/ \"http://turfjs.org/\") 這個地理資訊分析的工具，十分強大，可以直接針對 geojson 做運算，也可以透過 node 在後端執行運算。至今我還在摸索它的功能，也許未來更加熟練後可以再來分享給大家。\n\n謝謝所有在端午連假前仍願意來參與活動的朋友，大家端午節快樂 :)\n\n最後，我們還有很多專案想實現，歡迎有志之士加入！","slug":"taipei-d3js-meetup-gathering-to-share-experiences","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjop001a2kt4uyi7brd7","content":"<p>這次我在 <a href=\"http://www.meetup.com/Taipei-D3-js-Meetup/\" title=\"Taipei D3.js Meetup\" target=\"_blank\" rel=\"external\">Taipei D3.js Meetup</a> (現在似乎改叫 Visual Thursday) 分享的 Talk 是有關於地理視覺化的簡介，雖然題目聽起來很學術，但其實內容是我這陣子對於 Web GIS 以及地圖視覺化的一些摸索心得分享。</p>\n<p>感謝台灣微軟提供場地 XD</p>\n<p>下面是我的投影片</p>\n<iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/mhzctMFXFoHMJn\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"margin-bottom:1em;\"></iframe>\n\n\n<p>這次幾個 Demo 的原始碼都放在 Github 上： <a href=\"https://github.com/kurotanshi/VisualThursday_demo\" target=\"_blank\" rel=\"external\">https://github.com/kurotanshi/VisualThursday_demo</a>\n有興趣的朋友可以自行下載研究。</p>\n<p>想看 Online Demo 的也可以直接到這： <a href=\"http://kurotanshi.github.io/VisualThursday_demo/\" target=\"_blank\" rel=\"external\">http://kurotanshi.github.io/VisualThursday_demo/</a></p>\n<p>雖然都是以 Google Map 為範例，但是大部份的圖資系統如 leaflet.js / MapBox 等都是通用的，尤其是 <a href=\"http://turfjs.org/\" title=\"http://turfjs.org/\" target=\"_blank\" rel=\"external\">Turf.js</a> 這個地理資訊分析的工具，十分強大，可以直接針對 geojson 做運算，也可以透過 node 在後端執行運算。至今我還在摸索它的功能，也許未來更加熟練後可以再來分享給大家。</p>\n<p>謝謝所有在端午連假前仍願意來參與活動的朋友，大家端午節快樂 :)</p>\n<p>最後，我們還有很多專案想實現，歡迎有志之士加入！</p>\n","excerpt":"","more":"<p>這次我在 <a href=\"http://www.meetup.com/Taipei-D3-js-Meetup/\" title=\"Taipei D3.js Meetup\">Taipei D3.js Meetup</a> (現在似乎改叫 Visual Thursday) 分享的 Talk 是有關於地理視覺化的簡介，雖然題目聽起來很學術，但其實內容是我這陣子對於 Web GIS 以及地圖視覺化的一些摸索心得分享。</p>\n<p>感謝台灣微軟提供場地 XD</p>\n<p>下面是我的投影片</p>\n<iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/mhzctMFXFoHMJn\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"margin-bottom:1em;\"></iframe>\n\n\n<p>這次幾個 Demo 的原始碼都放在 Github 上： <a href=\"https://github.com/kurotanshi/VisualThursday_demo\">https://github.com/kurotanshi/VisualThursday_demo</a>\n有興趣的朋友可以自行下載研究。</p>\n<p>想看 Online Demo 的也可以直接到這： <a href=\"http://kurotanshi.github.io/VisualThursday_demo/\">http://kurotanshi.github.io/VisualThursday_demo/</a></p>\n<p>雖然都是以 Google Map 為範例，但是大部份的圖資系統如 leaflet.js / MapBox 等都是通用的，尤其是 <a href=\"http://turfjs.org/\" title=\"http://turfjs.org/\">Turf.js</a> 這個地理資訊分析的工具，十分強大，可以直接針對 geojson 做運算，也可以透過 node 在後端執行運算。至今我還在摸索它的功能，也許未來更加熟練後可以再來分享給大家。</p>\n<p>謝謝所有在端午連假前仍願意來參與活動的朋友，大家端午節快樂 :)</p>\n<p>最後，我們還有很多專案想實現，歡迎有志之士加入！</p>\n"},{"layout":"post","title":"透過 Google Maps API 處理 GeoJSON 資料","date":"2015-04-28T04:10:00.000Z","comments":1,"_content":"在說明 Google Map 如何存取 GeoJSON 前，先來簡單介紹 GeoJSON。\n\n[GeoJSON](http://geojson.org/ \"GeoJSON\") 是一種專門處理地理資訊 (GIS) 結構的 JSON 標準格式。 一個 GeoJSON 物件可以用來代表**點** (Point)，**線** (LineString)，**多邊形** (Polygon) 等等的幾何結構，以及**特徵** (Feature) 的集合，或是**一系列的特徵** (FeatureCollection)。\n\n也因為 GeoJSON 是一種基於 JSON 的公開標準，其結構簡單且容易讀取的特性也廣受開發者的歡迎，有不少開發程式庫開始支援 GeoJSON 的處理，也有許多政府開放資料(官方或非官方)開始提供 GeoJSON 作為其資料格式。\n\n一個簡單的 GeoJSON 會長得像這個樣子：\n``` javascript\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [102.0, 0.5]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\"\n        }\n    }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"LineString\",\n            \"coordinates\": [\n                [102.0, 0.0],\n                [103.0, 1.0],\n                [104.0, 0.0],\n                [105.0, 1.0]\n            ]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": 0.0\n        }\n    }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [100.0, 0.0],\n                    [101.0, 0.0],\n                    [101.0, 1.0],\n                    [100.0, 1.0],\n                    [100.0, 0.0]\n                ]\n            ]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": {\n                \"this\": \"that\"\n            }\n        }\n    }]\n}\n```\n\n如上所示，每一筆資料都會是一個「**Feature**」物件，地理位置相關資訊會存放在 geometry 物件內，其中分別有「**type**」以及「**coordinates**」屬性，type 用來表示資料類別，可以是點，線，甚至是多邊形等；而 coordinates 用來存放經緯度座標。而其他的相關資訊則會放在「**properties**」內，以 **key: value** 方式呈現。\n\n簡單介紹就到此，有興趣的朋友可以參考 http://geojson.org/\n註：這裏有中國網友翻譯的 GeoJSON 規格 http://www.oschina.net/translate/geojson-spec\n\n回到主題。\nGoogle Map 匯入 GeoJSON 的方式非常簡單，如果已經有一個完整的 GeoJSON 檔案的話，那麼透過\n\n`map.data.loadGeoJson(FILE-URL);`\n\n利用這一行程式碼就可以載入 GeoJSON 至 Google Map 的 Data Layer 了。\n\n簡單範例：\n``` javascript\nvar map;\nfunction initMap() {\n    // 地圖初始設定\n    var mapOptions = {\n        center: new google.maps.LatLng(25.04674, 121.54168),\n        zoom: 13,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    // GeoJSON file\n    var url = 'https://dl.dropboxusercontent.com/u/12537630/geo.json';\n\n    var mapElement = document.getElementById(\"mapDiv\");\n\n    // Google 地圖初始化\n    map = new google.maps.Map(mapElement, mapOptions);\n\n    // 載入 GeoJSON 資料\n    map.data.loadGeoJson(url);\n}\n```\nDEMO: http://jsbin.com/totuzisobo/1/\n![螢幕快照 2015-04-28 下午7.15.40.png](http://user-image.logdown.io/user/3292/blog/3340/post/262352/sSKDGsS7RUqG2TluFYJC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.40.png)\n\n\n如果希望載入的資料可以有自訂的樣式的話，可以透過 `map.data.setStyle` 在載入前指定好希望的 style，這裏以 marker 的圖示為例：\n\n圖示資訊我放在 GeoJSON 的 `properties.icon` 內，如下 (其中一筆 point 的內容)：\n\n``` javascript\n  \"type\": \"Feature\",\n  \"geometry\": {\n\t  \"type\": \"Point\",\n\t  \"coordinates\": [ 121.51771545410156, 25.028294990979614 ]\n  },\n  \"properties\": {\n  \t\"icon\": \"http://google-maps-icons.googlecode.com/files/vegetarian.png\"\n  }\n```\n\n於是我們可以透過 `feature.getProperty('icon')` 去指定每一筆 point 的圖示：\n\n``` javascript\n  // 自訂樣式\n  map.data.setStyle(function(feature) {\n    return { 'icon': feature.getProperty('icon') };\n  });\n\n  // 載入 GeoJSON 資料\n  map.data.loadGeoJson(url);\n```\nDEMO: http://jsbin.com/xikaqe/1/\n![螢幕快照 2015-04-28 下午7.15.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/262352/u5lfzGXOQVaVY7zkw57q_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.46.png)\n\n如果希望透過 ajax 方式載入 GeoJSON 的話也非常簡單，在取得 ajax 回傳資料時，用 `map.data.addGeoJson(res);` 這行就可以載入資料了。\n\n以 jQuery 為例，如:\n``` javascript\n$.get(FILE-URL, function(res) { map.data.addGeoJson(res); });\n```\n\n有個整理好的 GeoJSON，只需要一行就可以很輕鬆地在 Google Map 產生想要的圖標了。\n如果想在圖表上處理點擊等等的事件，還是得另外處理喔。\n\n參考資料:\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-data-simple\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes\n","source":"_posts/through-the-google-maps-api-geojson-data.md","raw":"---\nlayout: post\ntitle: '透過 Google Maps API 處理 GeoJSON 資料'\ndate: 2015-04-28 12:10\ncomments: true\ncategories: [Google Map]\ntags: [google map, GeoJSON]\n---\n在說明 Google Map 如何存取 GeoJSON 前，先來簡單介紹 GeoJSON。\n\n[GeoJSON](http://geojson.org/ \"GeoJSON\") 是一種專門處理地理資訊 (GIS) 結構的 JSON 標準格式。 一個 GeoJSON 物件可以用來代表**點** (Point)，**線** (LineString)，**多邊形** (Polygon) 等等的幾何結構，以及**特徵** (Feature) 的集合，或是**一系列的特徵** (FeatureCollection)。\n\n也因為 GeoJSON 是一種基於 JSON 的公開標準，其結構簡單且容易讀取的特性也廣受開發者的歡迎，有不少開發程式庫開始支援 GeoJSON 的處理，也有許多政府開放資料(官方或非官方)開始提供 GeoJSON 作為其資料格式。\n\n一個簡單的 GeoJSON 會長得像這個樣子：\n``` javascript\n{\n    \"type\": \"FeatureCollection\",\n    \"features\": [{\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Point\",\n            \"coordinates\": [102.0, 0.5]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\"\n        }\n    }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"LineString\",\n            \"coordinates\": [\n                [102.0, 0.0],\n                [103.0, 1.0],\n                [104.0, 0.0],\n                [105.0, 1.0]\n            ]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": 0.0\n        }\n    }, {\n        \"type\": \"Feature\",\n        \"geometry\": {\n            \"type\": \"Polygon\",\n            \"coordinates\": [\n                [\n                    [100.0, 0.0],\n                    [101.0, 0.0],\n                    [101.0, 1.0],\n                    [100.0, 1.0],\n                    [100.0, 0.0]\n                ]\n            ]\n        },\n        \"properties\": {\n            \"prop0\": \"value0\",\n            \"prop1\": {\n                \"this\": \"that\"\n            }\n        }\n    }]\n}\n```\n\n如上所示，每一筆資料都會是一個「**Feature**」物件，地理位置相關資訊會存放在 geometry 物件內，其中分別有「**type**」以及「**coordinates**」屬性，type 用來表示資料類別，可以是點，線，甚至是多邊形等；而 coordinates 用來存放經緯度座標。而其他的相關資訊則會放在「**properties**」內，以 **key: value** 方式呈現。\n\n簡單介紹就到此，有興趣的朋友可以參考 http://geojson.org/\n註：這裏有中國網友翻譯的 GeoJSON 規格 http://www.oschina.net/translate/geojson-spec\n\n回到主題。\nGoogle Map 匯入 GeoJSON 的方式非常簡單，如果已經有一個完整的 GeoJSON 檔案的話，那麼透過\n\n`map.data.loadGeoJson(FILE-URL);`\n\n利用這一行程式碼就可以載入 GeoJSON 至 Google Map 的 Data Layer 了。\n\n簡單範例：\n``` javascript\nvar map;\nfunction initMap() {\n    // 地圖初始設定\n    var mapOptions = {\n        center: new google.maps.LatLng(25.04674, 121.54168),\n        zoom: 13,\n        mapTypeId: google.maps.MapTypeId.ROADMAP\n    };\n\n    // GeoJSON file\n    var url = 'https://dl.dropboxusercontent.com/u/12537630/geo.json';\n\n    var mapElement = document.getElementById(\"mapDiv\");\n\n    // Google 地圖初始化\n    map = new google.maps.Map(mapElement, mapOptions);\n\n    // 載入 GeoJSON 資料\n    map.data.loadGeoJson(url);\n}\n```\nDEMO: http://jsbin.com/totuzisobo/1/\n![螢幕快照 2015-04-28 下午7.15.40.png](http://user-image.logdown.io/user/3292/blog/3340/post/262352/sSKDGsS7RUqG2TluFYJC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.40.png)\n\n\n如果希望載入的資料可以有自訂的樣式的話，可以透過 `map.data.setStyle` 在載入前指定好希望的 style，這裏以 marker 的圖示為例：\n\n圖示資訊我放在 GeoJSON 的 `properties.icon` 內，如下 (其中一筆 point 的內容)：\n\n``` javascript\n  \"type\": \"Feature\",\n  \"geometry\": {\n\t  \"type\": \"Point\",\n\t  \"coordinates\": [ 121.51771545410156, 25.028294990979614 ]\n  },\n  \"properties\": {\n  \t\"icon\": \"http://google-maps-icons.googlecode.com/files/vegetarian.png\"\n  }\n```\n\n於是我們可以透過 `feature.getProperty('icon')` 去指定每一筆 point 的圖示：\n\n``` javascript\n  // 自訂樣式\n  map.data.setStyle(function(feature) {\n    return { 'icon': feature.getProperty('icon') };\n  });\n\n  // 載入 GeoJSON 資料\n  map.data.loadGeoJson(url);\n```\nDEMO: http://jsbin.com/xikaqe/1/\n![螢幕快照 2015-04-28 下午7.15.46.png](http://user-image.logdown.io/user/3292/blog/3340/post/262352/u5lfzGXOQVaVY7zkw57q_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.46.png)\n\n如果希望透過 ajax 方式載入 GeoJSON 的話也非常簡單，在取得 ajax 回傳資料時，用 `map.data.addGeoJson(res);` 這行就可以載入資料了。\n\n以 jQuery 為例，如:\n``` javascript\n$.get(FILE-URL, function(res) { map.data.addGeoJson(res); });\n```\n\n有個整理好的 GeoJSON，只需要一行就可以很輕鬆地在 Google Map 產生想要的圖標了。\n如果想在圖表上處理點擊等等的事件，還是得另外處理喔。\n\n參考資料:\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-data-simple\nhttps://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes\n","slug":"through-the-google-maps-api-geojson-data","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoq001c2kt44q89rbai","content":"<p>在說明 Google Map 如何存取 GeoJSON 前，先來簡單介紹 GeoJSON。</p>\n<p><a href=\"http://geojson.org/\" title=\"GeoJSON\" target=\"_blank\" rel=\"external\">GeoJSON</a> 是一種專門處理地理資訊 (GIS) 結構的 JSON 標準格式。 一個 GeoJSON 物件可以用來代表<strong>點</strong> (Point)，<strong>線</strong> (LineString)，<strong>多邊形</strong> (Polygon) 等等的幾何結構，以及<strong>特徵</strong> (Feature) 的集合，或是<strong>一系列的特徵</strong> (FeatureCollection)。</p>\n<p>也因為 GeoJSON 是一種基於 JSON 的公開標準，其結構簡單且容易讀取的特性也廣受開發者的歡迎，有不少開發程式庫開始支援 GeoJSON 的處理，也有許多政府開放資料(官方或非官方)開始提供 GeoJSON 作為其資料格式。</p>\n<p>一個簡單的 GeoJSON 會長得像這個樣子：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"FeatureCollection\"</span>,</div><div class=\"line\">    <span class=\"string\">\"features\"</span>: [&#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [<span class=\"number\">102.0</span>, <span class=\"number\">0.5</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"LineString\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [</div><div class=\"line\">                [<span class=\"number\">102.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                [<span class=\"number\">103.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                [<span class=\"number\">104.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                [<span class=\"number\">105.0</span>, <span class=\"number\">1.0</span>]</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span>,</div><div class=\"line\">            <span class=\"string\">\"prop1\"</span>: <span class=\"number\">0.0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Polygon\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [</div><div class=\"line\">                [</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                    [<span class=\"number\">101.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                    [<span class=\"number\">101.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">0.0</span>]</div><div class=\"line\">                ]</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span>,</div><div class=\"line\">            <span class=\"string\">\"prop1\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"this\"</span>: <span class=\"string\">\"that\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上所示，每一筆資料都會是一個「<strong>Feature</strong>」物件，地理位置相關資訊會存放在 geometry 物件內，其中分別有「<strong>type</strong>」以及「<strong>coordinates</strong>」屬性，type 用來表示資料類別，可以是點，線，甚至是多邊形等；而 coordinates 用來存放經緯度座標。而其他的相關資訊則會放在「<strong>properties</strong>」內，以 <strong>key: value</strong> 方式呈現。</p>\n<p>簡單介紹就到此，有興趣的朋友可以參考 <a href=\"http://geojson.org/\" target=\"_blank\" rel=\"external\">http://geojson.org/</a>\n註：這裏有中國網友翻譯的 GeoJSON 規格 <a href=\"http://www.oschina.net/translate/geojson-spec\" target=\"_blank\" rel=\"external\">http://www.oschina.net/translate/geojson-spec</a></p>\n<p>回到主題。\nGoogle Map 匯入 GeoJSON 的方式非常簡單，如果已經有一個完整的 GeoJSON 檔案的話，那麼透過</p>\n<p><code>map.data.loadGeoJson(FILE-URL);</code></p>\n<p>利用這一行程式碼就可以載入 GeoJSON 至 Google Map 的 Data Layer 了。</p>\n<p>簡單範例：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 地圖初始設定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mapOptions = &#123;</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.04674</span>, <span class=\"number\">121.54168</span>),</div><div class=\"line\">        <span class=\"attr\">zoom</span>: <span class=\"number\">13</span>,</div><div class=\"line\">        <span class=\"attr\">mapTypeId</span>: google.maps.MapTypeId.ROADMAP</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// GeoJSON file</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'https://dl.dropboxusercontent.com/u/12537630/geo.json'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> mapElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mapDiv\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Google 地圖初始化</span></div><div class=\"line\">    map = <span class=\"keyword\">new</span> google.maps.Map(mapElement, mapOptions);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 載入 GeoJSON 資料</span></div><div class=\"line\">    map.data.loadGeoJson(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DEMO: <a href=\"http://jsbin.com/totuzisobo/1/\" target=\"_blank\" rel=\"external\">http://jsbin.com/totuzisobo/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262352/sSKDGsS7RUqG2TluFYJC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.40.png\" alt=\"螢幕快照 2015-04-28 下午7.15.40.png\"></p>\n<p>如果希望載入的資料可以有自訂的樣式的話，可以透過 <code>map.data.setStyle</code> 在載入前指定好希望的 style，這裏以 marker 的圖示為例：</p>\n<p>圖示資訊我放在 GeoJSON 的 <code>properties.icon</code> 內，如下 (其中一筆 point 的內容)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\"><span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\"> <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\"> <span class=\"string\">\"coordinates\"</span>: [ <span class=\"number\">121.51771545410156</span>, <span class=\"number\">25.028294990979614</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">true<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"http://google-maps-icons.googlecode.com/files/vegetarian.png\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>於是我們可以透過 <code>feature.getProperty(&#39;icon&#39;)</code> 去指定每一筆 point 的圖示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自訂樣式</span></div><div class=\"line\">map.data.setStyle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">feature</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"string\">'icon'</span>: feature.getProperty(<span class=\"string\">'icon'</span>) &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 載入 GeoJSON 資料</span></div><div class=\"line\">map.data.loadGeoJson(url);</div></pre></td></tr></table></figure>\n<p>DEMO: <a href=\"http://jsbin.com/xikaqe/1/\" target=\"_blank\" rel=\"external\">http://jsbin.com/xikaqe/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262352/u5lfzGXOQVaVY7zkw57q_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.46.png\" alt=\"螢幕快照 2015-04-28 下午7.15.46.png\"></p>\n<p>如果希望透過 ajax 方式載入 GeoJSON 的話也非常簡單，在取得 ajax 回傳資料時，用 <code>map.data.addGeoJson(res);</code> 這行就可以載入資料了。</p>\n<p>以 jQuery 為例，如:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(FILE-URL, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123; map.data.addGeoJson(res); &#125;);</div></pre></td></tr></table></figure></p>\n<p>有個整理好的 GeoJSON，只需要一行就可以很輕鬆地在 Google Map 產生想要的圖標了。\n如果想在圖表上處理點擊等等的事件，還是得另外處理喔。</p>\n<p>參考資料:\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-data-simple\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/examples/layer-data-simple</a>\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes\" target=\"_blank\" rel=\"external\">https://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes</a></p>\n","excerpt":"","more":"<p>在說明 Google Map 如何存取 GeoJSON 前，先來簡單介紹 GeoJSON。</p>\n<p><a href=\"http://geojson.org/\" title=\"GeoJSON\">GeoJSON</a> 是一種專門處理地理資訊 (GIS) 結構的 JSON 標準格式。 一個 GeoJSON 物件可以用來代表<strong>點</strong> (Point)，<strong>線</strong> (LineString)，<strong>多邊形</strong> (Polygon) 等等的幾何結構，以及<strong>特徵</strong> (Feature) 的集合，或是<strong>一系列的特徵</strong> (FeatureCollection)。</p>\n<p>也因為 GeoJSON 是一種基於 JSON 的公開標準，其結構簡單且容易讀取的特性也廣受開發者的歡迎，有不少開發程式庫開始支援 GeoJSON 的處理，也有許多政府開放資料(官方或非官方)開始提供 GeoJSON 作為其資料格式。</p>\n<p>一個簡單的 GeoJSON 會長得像這個樣子：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"type\"</span>: <span class=\"string\">\"FeatureCollection\"</span>,</div><div class=\"line\">    <span class=\"string\">\"features\"</span>: [&#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [<span class=\"number\">102.0</span>, <span class=\"number\">0.5</span>]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"LineString\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [</div><div class=\"line\">                [<span class=\"number\">102.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                [<span class=\"number\">103.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                [<span class=\"number\">104.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                [<span class=\"number\">105.0</span>, <span class=\"number\">1.0</span>]</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span>,</div><div class=\"line\">            <span class=\"string\">\"prop1\"</span>: <span class=\"number\">0.0</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\">        <span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Polygon\"</span>,</div><div class=\"line\">            <span class=\"string\">\"coordinates\"</span>: [</div><div class=\"line\">                [</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                    [<span class=\"number\">101.0</span>, <span class=\"number\">0.0</span>],</div><div class=\"line\">                    [<span class=\"number\">101.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">1.0</span>],</div><div class=\"line\">                    [<span class=\"number\">100.0</span>, <span class=\"number\">0.0</span>]</div><div class=\"line\">                ]</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"prop0\"</span>: <span class=\"string\">\"value0\"</span>,</div><div class=\"line\">            <span class=\"string\">\"prop1\"</span>: &#123;</div><div class=\"line\">                <span class=\"string\">\"this\"</span>: <span class=\"string\">\"that\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上所示，每一筆資料都會是一個「<strong>Feature</strong>」物件，地理位置相關資訊會存放在 geometry 物件內，其中分別有「<strong>type</strong>」以及「<strong>coordinates</strong>」屬性，type 用來表示資料類別，可以是點，線，甚至是多邊形等；而 coordinates 用來存放經緯度座標。而其他的相關資訊則會放在「<strong>properties</strong>」內，以 <strong>key: value</strong> 方式呈現。</p>\n<p>簡單介紹就到此，有興趣的朋友可以參考 <a href=\"http://geojson.org/\">http://geojson.org/</a>\n註：這裏有中國網友翻譯的 GeoJSON 規格 <a href=\"http://www.oschina.net/translate/geojson-spec\">http://www.oschina.net/translate/geojson-spec</a></p>\n<p>回到主題。\nGoogle Map 匯入 GeoJSON 的方式非常簡單，如果已經有一個完整的 GeoJSON 檔案的話，那麼透過</p>\n<p><code>map.data.loadGeoJson(FILE-URL);</code></p>\n<p>利用這一行程式碼就可以載入 GeoJSON 至 Google Map 的 Data Layer 了。</p>\n<p>簡單範例：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> map;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initMap</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 地圖初始設定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> mapOptions = &#123;</div><div class=\"line\">        <span class=\"attr\">center</span>: <span class=\"keyword\">new</span> google.maps.LatLng(<span class=\"number\">25.04674</span>, <span class=\"number\">121.54168</span>),</div><div class=\"line\">        <span class=\"attr\">zoom</span>: <span class=\"number\">13</span>,</div><div class=\"line\">        <span class=\"attr\">mapTypeId</span>: google.maps.MapTypeId.ROADMAP</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// GeoJSON file</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">'https://dl.dropboxusercontent.com/u/12537630/geo.json'</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> mapElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"mapDiv\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Google 地圖初始化</span></div><div class=\"line\">    map = <span class=\"keyword\">new</span> google.maps.Map(mapElement, mapOptions);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 載入 GeoJSON 資料</span></div><div class=\"line\">    map.data.loadGeoJson(url);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>DEMO: <a href=\"http://jsbin.com/totuzisobo/1/\">http://jsbin.com/totuzisobo/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262352/sSKDGsS7RUqG2TluFYJC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.40.png\" alt=\"螢幕快照 2015-04-28 下午7.15.40.png\"></p>\n<p>如果希望載入的資料可以有自訂的樣式的話，可以透過 <code>map.data.setStyle</code> 在載入前指定好希望的 style，這裏以 marker 的圖示為例：</p>\n<p>圖示資訊我放在 GeoJSON 的 <code>properties.icon</code> 內，如下 (其中一筆 point 的內容)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"type\"</span>: <span class=\"string\">\"Feature\"</span>,</div><div class=\"line\"><span class=\"string\">\"geometry\"</span>: &#123;</div><div class=\"line\"> <span class=\"string\">\"type\"</span>: <span class=\"string\">\"Point\"</span>,</div><div class=\"line\"> <span class=\"string\">\"coordinates\"</span>: [ <span class=\"number\">121.51771545410156</span>, <span class=\"number\">25.028294990979614</span> ]</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"string\">\"properties\"</span>: &#123;</div><div class=\"line\">true<span class=\"string\">\"icon\"</span>: <span class=\"string\">\"http://google-maps-icons.googlecode.com/files/vegetarian.png\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>於是我們可以透過 <code>feature.getProperty(&#39;icon&#39;)</code> 去指定每一筆 point 的圖示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 自訂樣式</span></div><div class=\"line\">map.data.setStyle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">feature</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"string\">'icon'</span>: feature.getProperty(<span class=\"string\">'icon'</span>) &#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 載入 GeoJSON 資料</span></div><div class=\"line\">map.data.loadGeoJson(url);</div></pre></td></tr></table></figure>\n<p>DEMO: <a href=\"http://jsbin.com/xikaqe/1/\">http://jsbin.com/xikaqe/1/</a>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/262352/u5lfzGXOQVaVY7zkw57q_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-04-28%20%E4%B8%8B%E5%8D%887.15.46.png\" alt=\"螢幕快照 2015-04-28 下午7.15.46.png\"></p>\n<p>如果希望透過 ajax 方式載入 GeoJSON 的話也非常簡單，在取得 ajax 回傳資料時，用 <code>map.data.addGeoJson(res);</code> 這行就可以載入資料了。</p>\n<p>以 jQuery 為例，如:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(FILE-URL, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123; map.data.addGeoJson(res); &#125;);</div></pre></td></tr></table></figure></p>\n<p>有個整理好的 GeoJSON，只需要一行就可以很輕鬆地在 Google Map 產生想要的圖標了。\n如果想在圖表上處理點擊等等的事件，還是得另外處理喔。</p>\n<p>參考資料:\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-data-simple\">https://developers.google.com/maps/documentation/javascript/examples/layer-data-simple</a>\n<a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes\">https://developers.google.com/maps/documentation/javascript/examples/layer-data-quakes</a></p>\n"},{"layout":"post","title":"利用 d3.js 製作 responsive 的長條圖","date":"2015-12-19T22:02:00.000Z","comments":1,"_content":"利用 d3.js 我們可以很輕易地產生我們想要的圖表，以最常見的長條圖為例，只要透過 scale (比例尺) 與 axis (軸線)，再加上一點 SVG 的基礎知識，像這樣的長條圖一下子就可以生成。\n\n![螢幕快照 2015-12-20 下午12.21.25.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/2V8wHgLUTEawU5iJstYS_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%8812.21.25.png)\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd.html \"長條圖範例\")]\n\n但是，像這樣尺寸的圖表，往往都會因為太大而不適合在手機螢幕上呈現。還好 SVG 有著向量圖形的特性，可以自由縮放，這篇就來簡單介紹 d3.js 的長條圖如何也能做出 rwd 的效果。\n\n在上面的程式碼內，我們可以看到，原先設定的寬高是寫死的 960 與 500 (未扣除邊界)\n``` javascript\n  var margin = 40,\n      width = 960 - margin*2,\n      height = 500 - margin*2;\n```\n\n所以第一步，我們先將外層的 `.content` 元素設定成寬高 100%，然後把原先寫死的寬高改成由程式去抓取實際的寬高\n``` css\n.content{\n  display: block;\n  width: 100%;\n  height: 100%;\n  min-width: 300px;\n  max-width: 960px;\n  max-height: 500px;\n  overflow: hidden;\n}\n```\n\n``` javascript\n // 將尺寸改成即時取得的寬高\n width = parseInt(d3.select(\".content\").style(\"width\"), 10) - margin*2;\n height = parseInt(d3.select(\".content\").style(\"height\"), 10) - margin*2;\n```\n然後我們將瀏覽器縮小之後重整，結果像這樣：\n![螢幕快照 2015-12-20 下午1.23.36.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/Jrbqo6EaTJswhfBQUF6g_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.23.36.png)\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd2.html \"長條圖範例2\")]\n\n可以看到，這個時候因為畫面的寬高已經不是寫死的了，所以會依「繪製圖形當下」的寬高去做比例的修正。這時我們已經完成了長條圖 RWD 的第一步了。\n\n這時要是將行動裝置螢幕橫擺後，比例並不會依照橫擺之後有所不同，如果要使用者不斷地重整頁面，這就太不友善了。所以，我們要在瀏覽器上加上 `resize` 事件，並將繪製圖形的動作通通封裝至 rendering 這個 function 內。\n\n這個時候的程式架構會像這樣：\n``` javascript\n  var svg = d3.select('.svg');\n\n  // 將繪製動作包裝至 function 內\n  function rendering() {\n     // 將繪製的程式碼通通搬到裡面\n     // 內略\n  }\n\n  // 將 window 綁定 resize 事件，並重新繪製圖型\n  d3.select(window).on('resize', rendering);\n\n  // 首次繪製\n  rendering();\n```\n所以，這個時候，我們可以任意拉放瀏覽器的尺寸\n像這樣\n![螢幕快照 2015-12-20 下午1.39.54.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/eTI8r7EXSQWaH80HZuKH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.39.54.png)\n\n或是這樣\n![螢幕快照 2015-12-20 下午1.40.01.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/NMpkG3LeTOWaYaNf9pYC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.40.01.png)\n\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd3.html \"長條圖範例3\")]\n都是沒有問題的。\n\n這份長條圖到目前為止已經可以說是好棒棒了。\n可是不曉得有沒有人發現，在最後那張橫擺的 y 軸刻度實在太過擁擠，其實是不容易閱讀的:\n![螢幕快照 2015-12-20 下午1.42.43.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/VA6ir3TRyutauy6ALqdH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.42.43.png)\n\n我們可以怎麼樣更優化呢？\n\n這時候就要利用 d3.js 提供的 `tick()` 功能，來為我們調整 y 軸上的刻度。\n只要在 y 軸上加上 tick ，像這樣:\n\n``` javascript\n  // y 軸加上 ticks\n  var yAxis = d3.svg.axis()\n        .scale(yScale2)\n        .orient(\"left\")\n        .ticks(Math.max(height/50, 2));\n```\n\n`Math.max` 會回傳兩個指定數字中較大的一個，而 `ticks()` 則是設定軸線上刻度的數量。\n\n所以經過剛剛的設定，當圖形的高度大於 100px 的時候，圖表每 50px 會有一個刻度，而圖形高度小於或等於 100px 時，則至少會有兩個刻度，像這樣：\n\n![螢幕快照 2015-12-20 下午1.54.29.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/Mz3vq9BKRZ2dkSd5SP6W_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.54.29.png)\n\n![螢幕快照 2015-12-20 下午1.55.08.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/swZcbhnQPmhiWQBwTbDG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.55.08.png)\n\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd4.html \"長條圖範例4\")]\n\n實際用手機試試：\n\n![2015-12-20 03.33.30.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/mM3agzeTGGGdM2p4YjZq_2015-12-20%2003.33.30.png)\n![2015-12-20 03.33.43.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/j4wccnAOTZWhLzubTUDw_2015-12-20%2003.33.43.png)\n\n透過這樣的修正，就可以讓圖表變得更好閱讀了。\n\n以上，我們只要做簡單的小調整，就可以讓現有的 d3 長條圖做到有 RWD 的效果。\n\n但是要注意的是，不是所有圖表都合適在手機螢幕上呈現，在設計時也需要把這些考慮進去，是要為手機版本另外做一個新的圖表，或是做 RWD 的設計，就看使用的情境以及想表達的意義來決定囉。\n","source":"_posts/use-d3js-to-create-responsive-histogram.md","raw":"---\nlayout: post\ntitle: '利用 d3.js 製作 responsive 的長條圖'\ndate: 2015-12-20 06:02\ncomments: true\ncategories: [D3.js]\ntags: [d3.js, rwd]\n---\n利用 d3.js 我們可以很輕易地產生我們想要的圖表，以最常見的長條圖為例，只要透過 scale (比例尺) 與 axis (軸線)，再加上一點 SVG 的基礎知識，像這樣的長條圖一下子就可以生成。\n\n![螢幕快照 2015-12-20 下午12.21.25.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/2V8wHgLUTEawU5iJstYS_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%8812.21.25.png)\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd.html \"長條圖範例\")]\n\n但是，像這樣尺寸的圖表，往往都會因為太大而不適合在手機螢幕上呈現。還好 SVG 有著向量圖形的特性，可以自由縮放，這篇就來簡單介紹 d3.js 的長條圖如何也能做出 rwd 的效果。\n\n在上面的程式碼內，我們可以看到，原先設定的寬高是寫死的 960 與 500 (未扣除邊界)\n``` javascript\n  var margin = 40,\n      width = 960 - margin*2,\n      height = 500 - margin*2;\n```\n\n所以第一步，我們先將外層的 `.content` 元素設定成寬高 100%，然後把原先寫死的寬高改成由程式去抓取實際的寬高\n``` css\n.content{\n  display: block;\n  width: 100%;\n  height: 100%;\n  min-width: 300px;\n  max-width: 960px;\n  max-height: 500px;\n  overflow: hidden;\n}\n```\n\n``` javascript\n // 將尺寸改成即時取得的寬高\n width = parseInt(d3.select(\".content\").style(\"width\"), 10) - margin*2;\n height = parseInt(d3.select(\".content\").style(\"height\"), 10) - margin*2;\n```\n然後我們將瀏覽器縮小之後重整，結果像這樣：\n![螢幕快照 2015-12-20 下午1.23.36.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/Jrbqo6EaTJswhfBQUF6g_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.23.36.png)\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd2.html \"長條圖範例2\")]\n\n可以看到，這個時候因為畫面的寬高已經不是寫死的了，所以會依「繪製圖形當下」的寬高去做比例的修正。這時我們已經完成了長條圖 RWD 的第一步了。\n\n這時要是將行動裝置螢幕橫擺後，比例並不會依照橫擺之後有所不同，如果要使用者不斷地重整頁面，這就太不友善了。所以，我們要在瀏覽器上加上 `resize` 事件，並將繪製圖形的動作通通封裝至 rendering 這個 function 內。\n\n這個時候的程式架構會像這樣：\n``` javascript\n  var svg = d3.select('.svg');\n\n  // 將繪製動作包裝至 function 內\n  function rendering() {\n     // 將繪製的程式碼通通搬到裡面\n     // 內略\n  }\n\n  // 將 window 綁定 resize 事件，並重新繪製圖型\n  d3.select(window).on('resize', rendering);\n\n  // 首次繪製\n  rendering();\n```\n所以，這個時候，我們可以任意拉放瀏覽器的尺寸\n像這樣\n![螢幕快照 2015-12-20 下午1.39.54.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/eTI8r7EXSQWaH80HZuKH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.39.54.png)\n\n或是這樣\n![螢幕快照 2015-12-20 下午1.40.01.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/NMpkG3LeTOWaYaNf9pYC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.40.01.png)\n\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd3.html \"長條圖範例3\")]\n都是沒有問題的。\n\n這份長條圖到目前為止已經可以說是好棒棒了。\n可是不曉得有沒有人發現，在最後那張橫擺的 y 軸刻度實在太過擁擠，其實是不容易閱讀的:\n![螢幕快照 2015-12-20 下午1.42.43.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/VA6ir3TRyutauy6ALqdH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.42.43.png)\n\n我們可以怎麼樣更優化呢？\n\n這時候就要利用 d3.js 提供的 `tick()` 功能，來為我們調整 y 軸上的刻度。\n只要在 y 軸上加上 tick ，像這樣:\n\n``` javascript\n  // y 軸加上 ticks\n  var yAxis = d3.svg.axis()\n        .scale(yScale2)\n        .orient(\"left\")\n        .ticks(Math.max(height/50, 2));\n```\n\n`Math.max` 會回傳兩個指定數字中較大的一個，而 `ticks()` 則是設定軸線上刻度的數量。\n\n所以經過剛剛的設定，當圖形的高度大於 100px 的時候，圖表每 50px 會有一個刻度，而圖形高度小於或等於 100px 時，則至少會有兩個刻度，像這樣：\n\n![螢幕快照 2015-12-20 下午1.54.29.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/Mz3vq9BKRZ2dkSd5SP6W_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.54.29.png)\n\n![螢幕快照 2015-12-20 下午1.55.08.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/swZcbhnQPmhiWQBwTbDG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.55.08.png)\n\n[[Code](http://kurotanshi.github.io/d3js-samples/rwd/rwd4.html \"長條圖範例4\")]\n\n實際用手機試試：\n\n![2015-12-20 03.33.30.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/mM3agzeTGGGdM2p4YjZq_2015-12-20%2003.33.30.png)\n![2015-12-20 03.33.43.png](http://user-image.logdown.io/user/3292/blog/3340/post/378297/j4wccnAOTZWhLzubTUDw_2015-12-20%2003.33.43.png)\n\n透過這樣的修正，就可以讓圖表變得更好閱讀了。\n\n以上，我們只要做簡單的小調整，就可以讓現有的 d3 長條圖做到有 RWD 的效果。\n\n但是要注意的是，不是所有圖表都合適在手機螢幕上呈現，在設計時也需要把這些考慮進去，是要為手機版本另外做一個新的圖表，或是做 RWD 的設計，就看使用的情境以及想表達的意義來決定囉。\n","slug":"use-d3js-to-create-responsive-histogram","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjor001h2kt4wffd1mn5","content":"<p>利用 d3.js 我們可以很輕易地產生我們想要的圖表，以最常見的長條圖為例，只要透過 scale (比例尺) 與 axis (軸線)，再加上一點 SVG 的基礎知識，像這樣的長條圖一下子就可以生成。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/2V8wHgLUTEawU5iJstYS_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%8812.21.25.png\" alt=\"螢幕快照 2015-12-20 下午12.21.25.png\">\n[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd.html\" title=\"長條圖範例\" target=\"_blank\" rel=\"external\">Code</a>]</p>\n<p>但是，像這樣尺寸的圖表，往往都會因為太大而不適合在手機螢幕上呈現。還好 SVG 有著向量圖形的特性，可以自由縮放，這篇就來簡單介紹 d3.js 的長條圖如何也能做出 rwd 的效果。</p>\n<p>在上面的程式碼內，我們可以看到，原先設定的寬高是寫死的 960 與 500 (未扣除邊界)\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> margin = <span class=\"number\">40</span>,</div><div class=\"line\">    width = <span class=\"number\">960</span> - margin*<span class=\"number\">2</span>,</div><div class=\"line\">    height = <span class=\"number\">500</span> - margin*<span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>所以第一步，我們先將外層的 <code>.content</code> 元素設定成寬高 100%，然後把原先寫死的寬高改成由程式去抓取實際的寬高\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 將尺寸改成即時取得的寬高</span></div><div class=\"line\">width = <span class=\"built_in\">parseInt</span>(d3.select(<span class=\"string\">\".content\"</span>).style(<span class=\"string\">\"width\"</span>), <span class=\"number\">10</span>) - margin*<span class=\"number\">2</span>;</div><div class=\"line\">height = <span class=\"built_in\">parseInt</span>(d3.select(<span class=\"string\">\".content\"</span>).style(<span class=\"string\">\"height\"</span>), <span class=\"number\">10</span>) - margin*<span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>然後我們將瀏覽器縮小之後重整，結果像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/Jrbqo6EaTJswhfBQUF6g_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.23.36.png\" alt=\"螢幕快照 2015-12-20 下午1.23.36.png\">\n[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd2.html\" title=\"長條圖範例2\" target=\"_blank\" rel=\"external\">Code</a>]</p>\n<p>可以看到，這個時候因為畫面的寬高已經不是寫死的了，所以會依「繪製圖形當下」的寬高去做比例的修正。這時我們已經完成了長條圖 RWD 的第一步了。</p>\n<p>這時要是將行動裝置螢幕橫擺後，比例並不會依照橫擺之後有所不同，如果要使用者不斷地重整頁面，這就太不友善了。所以，我們要在瀏覽器上加上 <code>resize</code> 事件，並將繪製圖形的動作通通封裝至 rendering 這個 function 內。</p>\n<p>這個時候的程式架構會像這樣：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'.svg'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將繪製動作包裝至 function 內</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rendering</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 將繪製的程式碼通通搬到裡面</span></div><div class=\"line\">   <span class=\"comment\">// 內略</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將 window 綁定 resize 事件，並重新繪製圖型</span></div><div class=\"line\">d3.select(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, rendering);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次繪製</span></div><div class=\"line\">rendering();</div></pre></td></tr></table></figure></p>\n<p>所以，這個時候，我們可以任意拉放瀏覽器的尺寸\n像這樣\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/eTI8r7EXSQWaH80HZuKH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.39.54.png\" alt=\"螢幕快照 2015-12-20 下午1.39.54.png\"></p>\n<p>或是這樣\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/NMpkG3LeTOWaYaNf9pYC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.40.01.png\" alt=\"螢幕快照 2015-12-20 下午1.40.01.png\"></p>\n<p>[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd3.html\" title=\"長條圖範例3\" target=\"_blank\" rel=\"external\">Code</a>]\n都是沒有問題的。</p>\n<p>這份長條圖到目前為止已經可以說是好棒棒了。\n可是不曉得有沒有人發現，在最後那張橫擺的 y 軸刻度實在太過擁擠，其實是不容易閱讀的:\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/VA6ir3TRyutauy6ALqdH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.42.43.png\" alt=\"螢幕快照 2015-12-20 下午1.42.43.png\"></p>\n<p>我們可以怎麼樣更優化呢？</p>\n<p>這時候就要利用 d3.js 提供的 <code>tick()</code> 功能，來為我們調整 y 軸上的刻度。\n只要在 y 軸上加上 tick ，像這樣:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// y 軸加上 ticks</span></div><div class=\"line\"><span class=\"keyword\">var</span> yAxis = d3.svg.axis()</div><div class=\"line\">      .scale(yScale2)</div><div class=\"line\">      .orient(<span class=\"string\">\"left\"</span>)</div><div class=\"line\">      .ticks(<span class=\"built_in\">Math</span>.max(height/<span class=\"number\">50</span>, <span class=\"number\">2</span>));</div></pre></td></tr></table></figure>\n<p><code>Math.max</code> 會回傳兩個指定數字中較大的一個，而 <code>ticks()</code> 則是設定軸線上刻度的數量。</p>\n<p>所以經過剛剛的設定，當圖形的高度大於 100px 的時候，圖表每 50px 會有一個刻度，而圖形高度小於或等於 100px 時，則至少會有兩個刻度，像這樣：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/Mz3vq9BKRZ2dkSd5SP6W_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.54.29.png\" alt=\"螢幕快照 2015-12-20 下午1.54.29.png\"></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/swZcbhnQPmhiWQBwTbDG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.55.08.png\" alt=\"螢幕快照 2015-12-20 下午1.55.08.png\"></p>\n<p>[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd4.html\" title=\"長條圖範例4\" target=\"_blank\" rel=\"external\">Code</a>]</p>\n<p>實際用手機試試：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/mM3agzeTGGGdM2p4YjZq_2015-12-20%2003.33.30.png\" alt=\"2015-12-20 03.33.30.png\">\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/j4wccnAOTZWhLzubTUDw_2015-12-20%2003.33.43.png\" alt=\"2015-12-20 03.33.43.png\"></p>\n<p>透過這樣的修正，就可以讓圖表變得更好閱讀了。</p>\n<p>以上，我們只要做簡單的小調整，就可以讓現有的 d3 長條圖做到有 RWD 的效果。</p>\n<p>但是要注意的是，不是所有圖表都合適在手機螢幕上呈現，在設計時也需要把這些考慮進去，是要為手機版本另外做一個新的圖表，或是做 RWD 的設計，就看使用的情境以及想表達的意義來決定囉。</p>\n","excerpt":"","more":"<p>利用 d3.js 我們可以很輕易地產生我們想要的圖表，以最常見的長條圖為例，只要透過 scale (比例尺) 與 axis (軸線)，再加上一點 SVG 的基礎知識，像這樣的長條圖一下子就可以生成。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/2V8wHgLUTEawU5iJstYS_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%8812.21.25.png\" alt=\"螢幕快照 2015-12-20 下午12.21.25.png\">\n[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd.html\" title=\"長條圖範例\">Code</a>]</p>\n<p>但是，像這樣尺寸的圖表，往往都會因為太大而不適合在手機螢幕上呈現。還好 SVG 有著向量圖形的特性，可以自由縮放，這篇就來簡單介紹 d3.js 的長條圖如何也能做出 rwd 的效果。</p>\n<p>在上面的程式碼內，我們可以看到，原先設定的寬高是寫死的 960 與 500 (未扣除邊界)\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> margin = <span class=\"number\">40</span>,</div><div class=\"line\">    width = <span class=\"number\">960</span> - margin*<span class=\"number\">2</span>,</div><div class=\"line\">    height = <span class=\"number\">500</span> - margin*<span class=\"number\">2</span>;</div></pre></td></tr></table></figure></p>\n<p>所以第一步，我們先將外層的 <code>.content</code> 元素設定成寬高 100%，然後把原先寫死的寬高改成由程式去抓取實際的寬高\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.content</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">500px</span>;</div><div class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 將尺寸改成即時取得的寬高</span></div><div class=\"line\">width = <span class=\"built_in\">parseInt</span>(d3.select(<span class=\"string\">\".content\"</span>).style(<span class=\"string\">\"width\"</span>), <span class=\"number\">10</span>) - margin*<span class=\"number\">2</span>;</div><div class=\"line\">height = <span class=\"built_in\">parseInt</span>(d3.select(<span class=\"string\">\".content\"</span>).style(<span class=\"string\">\"height\"</span>), <span class=\"number\">10</span>) - margin*<span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>然後我們將瀏覽器縮小之後重整，結果像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/Jrbqo6EaTJswhfBQUF6g_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.23.36.png\" alt=\"螢幕快照 2015-12-20 下午1.23.36.png\">\n[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd2.html\" title=\"長條圖範例2\">Code</a>]</p>\n<p>可以看到，這個時候因為畫面的寬高已經不是寫死的了，所以會依「繪製圖形當下」的寬高去做比例的修正。這時我們已經完成了長條圖 RWD 的第一步了。</p>\n<p>這時要是將行動裝置螢幕橫擺後，比例並不會依照橫擺之後有所不同，如果要使用者不斷地重整頁面，這就太不友善了。所以，我們要在瀏覽器上加上 <code>resize</code> 事件，並將繪製圖形的動作通通封裝至 rendering 這個 function 內。</p>\n<p>這個時候的程式架構會像這樣：\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> svg = d3.select(<span class=\"string\">'.svg'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將繪製動作包裝至 function 內</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rendering</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 將繪製的程式碼通通搬到裡面</span></div><div class=\"line\">   <span class=\"comment\">// 內略</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 將 window 綁定 resize 事件，並重新繪製圖型</span></div><div class=\"line\">d3.select(<span class=\"built_in\">window</span>).on(<span class=\"string\">'resize'</span>, rendering);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 首次繪製</span></div><div class=\"line\">rendering();</div></pre></td></tr></table></figure></p>\n<p>所以，這個時候，我們可以任意拉放瀏覽器的尺寸\n像這樣\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/eTI8r7EXSQWaH80HZuKH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.39.54.png\" alt=\"螢幕快照 2015-12-20 下午1.39.54.png\"></p>\n<p>或是這樣\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/NMpkG3LeTOWaYaNf9pYC_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.40.01.png\" alt=\"螢幕快照 2015-12-20 下午1.40.01.png\"></p>\n<p>[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd3.html\" title=\"長條圖範例3\">Code</a>]\n都是沒有問題的。</p>\n<p>這份長條圖到目前為止已經可以說是好棒棒了。\n可是不曉得有沒有人發現，在最後那張橫擺的 y 軸刻度實在太過擁擠，其實是不容易閱讀的:\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/VA6ir3TRyutauy6ALqdH_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.42.43.png\" alt=\"螢幕快照 2015-12-20 下午1.42.43.png\"></p>\n<p>我們可以怎麼樣更優化呢？</p>\n<p>這時候就要利用 d3.js 提供的 <code>tick()</code> 功能，來為我們調整 y 軸上的刻度。\n只要在 y 軸上加上 tick ，像這樣:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// y 軸加上 ticks</span></div><div class=\"line\"><span class=\"keyword\">var</span> yAxis = d3.svg.axis()</div><div class=\"line\">      .scale(yScale2)</div><div class=\"line\">      .orient(<span class=\"string\">\"left\"</span>)</div><div class=\"line\">      .ticks(<span class=\"built_in\">Math</span>.max(height/<span class=\"number\">50</span>, <span class=\"number\">2</span>));</div></pre></td></tr></table></figure>\n<p><code>Math.max</code> 會回傳兩個指定數字中較大的一個，而 <code>ticks()</code> 則是設定軸線上刻度的數量。</p>\n<p>所以經過剛剛的設定，當圖形的高度大於 100px 的時候，圖表每 50px 會有一個刻度，而圖形高度小於或等於 100px 時，則至少會有兩個刻度，像這樣：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/Mz3vq9BKRZ2dkSd5SP6W_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.54.29.png\" alt=\"螢幕快照 2015-12-20 下午1.54.29.png\"></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/swZcbhnQPmhiWQBwTbDG_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-12-20%20%E4%B8%8B%E5%8D%881.55.08.png\" alt=\"螢幕快照 2015-12-20 下午1.55.08.png\"></p>\n<p>[<a href=\"http://kurotanshi.github.io/d3js-samples/rwd/rwd4.html\" title=\"長條圖範例4\">Code</a>]</p>\n<p>實際用手機試試：</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/mM3agzeTGGGdM2p4YjZq_2015-12-20%2003.33.30.png\" alt=\"2015-12-20 03.33.30.png\">\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/378297/j4wccnAOTZWhLzubTUDw_2015-12-20%2003.33.43.png\" alt=\"2015-12-20 03.33.43.png\"></p>\n<p>透過這樣的修正，就可以讓圖表變得更好閱讀了。</p>\n<p>以上，我們只要做簡單的小調整，就可以讓現有的 d3 長條圖做到有 RWD 的效果。</p>\n<p>但是要注意的是，不是所有圖表都合適在手機螢幕上呈現，在設計時也需要把這些考慮進去，是要為手機版本另外做一個新的圖表，或是做 RWD 的設計，就看使用的情境以及想表達的意義來決定囉。</p>\n"},{"layout":"post","title":"利用 Google Map 檢視台北市降雨淹水模擬圖","date":"2015-09-29T20:00:00.000Z","comments":1,"_content":"看到前兩天的新聞: [柯文哲想公開易淹水地區 北市府已上網](https://tw.news.yahoo.com/%E6%9F%AF%E6%96%87%E5%93%B2%E6%83%B3%E5%85%AC%E9%96%8B%E6%98%93%E6%B7%B9%E6%B0%B4%E5%9C%B0%E5%8D%80-%E5%8C%97%E5%B8%82%E5%BA%9C%E5%B7%B2%E4%B8%8A%E7%B6%B2-115016390.html \"柯文哲想公開易淹水地區 北市府已上網\")，又剛好有前輩寫了一篇 [利用QGIS檢視台北市降雨淹水模擬圖](http://gis.rchss.sinica.edu.tw/qgis/?p=3221 \"利用QGIS檢視台北市降雨淹水模擬圖\")，<del>雖然身處房仲業，但身為有良心的開發者不能只想著房價</del>，心想應也可透過 Google Map 來呈現，於是試了一下，順便寫篇記錄。\n\n首先從[臺北市政府資料開放平台](http://data.taipei/opendata/datalist/datasetMeta?oid=fa1e8012-ebb4-473b-888e-97f9a9ce365e \"臺北市政府資料開放平台\")將所需的資料一一下載下來，格式是 kmz (其實就是 zip 壓縮)。在解壓縮後可以得到 doc.kml 檔案。 接著，雖然 Google maps API 有提供 [KML Layers](https://developers.google.com/maps/documentation/javascript/examples/layer-kml \"Google maps API KML Layers\") 的圖層嵌套，但轉出來的 kml 檔似乎要稍作修改後才能透過 KML Layers 套用在 Google map 上，這裏我選擇另一種做法: 將 kml 轉為 geoJSON 後使用。\n\n前面說到要將 kml 檔案轉為 geoJSON，那麼該如何轉換格式呢？\n幸好 mapbox 提供了 [togeojson](https://github.com/mapbox/togeojson) 這套工具，透過它提供的 `toGeoJSON.kml(doc)` 就可以輕鬆地將它轉為 geoJSON 的格式了。\n\n有關 GeoJSON 如何輸出至 Google Map 可以參考小弟之前的 post：[透過 Google Maps API 處理 GeoJSON 資料](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data)，這裏就不再贅述。\n\n值得一提的是，透過 Google Maps Javascript API 輸出的 GeoJSON 預設的樣式都是黑色粗線，想要修改樣式的話可以透過 `setStyle` 來做處理，像這樣可以針對 name 是 0.3 的時候，我們輸出樣式為藍色的線，如果是 0.3~1.0 的話，則是輸出為綠色的線段，當然也可以針對填色與透明度等等做設定。\n\n``` jsvascript\ndataMap.setStyle(function(feature){\n  if( feature.getProperty('name') === '0.3'){\n    return { fillOpacity: 0.35, fillColor: '#0070FF', strokeWeight: 2, strokeColor: '#0070FF', strokeOpacity: 1 };\n  }\n  if( feature.getProperty('name') === '0.3~1.0'){\n    return { fillOpacity: 0.35, fillColor: '#54FF00', strokeWeight: 2, strokeColor: '#54FF00', strokeOpacity: 1 };\n  }\n});\n```\n\n結果呈現像這樣：\n![image.png](http://user-image.logdown.io/user/3292/blog/3340/post/302535/lNUGoyd7RB2MOsx8i1cw_image.png)\n\n這裏也有 Online Demo: [http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html](http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html)","source":"_posts/use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map.md","raw":"---\nlayout: post\ntitle: '利用 Google Map 檢視台北市降雨淹水模擬圖'\ndate: 2015-09-30 04:00\ncomments: true\ncategories: [OpenData]\ntags: [google map, opendata]\n---\n看到前兩天的新聞: [柯文哲想公開易淹水地區 北市府已上網](https://tw.news.yahoo.com/%E6%9F%AF%E6%96%87%E5%93%B2%E6%83%B3%E5%85%AC%E9%96%8B%E6%98%93%E6%B7%B9%E6%B0%B4%E5%9C%B0%E5%8D%80-%E5%8C%97%E5%B8%82%E5%BA%9C%E5%B7%B2%E4%B8%8A%E7%B6%B2-115016390.html \"柯文哲想公開易淹水地區 北市府已上網\")，又剛好有前輩寫了一篇 [利用QGIS檢視台北市降雨淹水模擬圖](http://gis.rchss.sinica.edu.tw/qgis/?p=3221 \"利用QGIS檢視台北市降雨淹水模擬圖\")，<del>雖然身處房仲業，但身為有良心的開發者不能只想著房價</del>，心想應也可透過 Google Map 來呈現，於是試了一下，順便寫篇記錄。\n\n首先從[臺北市政府資料開放平台](http://data.taipei/opendata/datalist/datasetMeta?oid=fa1e8012-ebb4-473b-888e-97f9a9ce365e \"臺北市政府資料開放平台\")將所需的資料一一下載下來，格式是 kmz (其實就是 zip 壓縮)。在解壓縮後可以得到 doc.kml 檔案。 接著，雖然 Google maps API 有提供 [KML Layers](https://developers.google.com/maps/documentation/javascript/examples/layer-kml \"Google maps API KML Layers\") 的圖層嵌套，但轉出來的 kml 檔似乎要稍作修改後才能透過 KML Layers 套用在 Google map 上，這裏我選擇另一種做法: 將 kml 轉為 geoJSON 後使用。\n\n前面說到要將 kml 檔案轉為 geoJSON，那麼該如何轉換格式呢？\n幸好 mapbox 提供了 [togeojson](https://github.com/mapbox/togeojson) 這套工具，透過它提供的 `toGeoJSON.kml(doc)` 就可以輕鬆地將它轉為 geoJSON 的格式了。\n\n有關 GeoJSON 如何輸出至 Google Map 可以參考小弟之前的 post：[透過 Google Maps API 處理 GeoJSON 資料](http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data)，這裏就不再贅述。\n\n值得一提的是，透過 Google Maps Javascript API 輸出的 GeoJSON 預設的樣式都是黑色粗線，想要修改樣式的話可以透過 `setStyle` 來做處理，像這樣可以針對 name 是 0.3 的時候，我們輸出樣式為藍色的線，如果是 0.3~1.0 的話，則是輸出為綠色的線段，當然也可以針對填色與透明度等等做設定。\n\n``` jsvascript\ndataMap.setStyle(function(feature){\n  if( feature.getProperty('name') === '0.3'){\n    return { fillOpacity: 0.35, fillColor: '#0070FF', strokeWeight: 2, strokeColor: '#0070FF', strokeOpacity: 1 };\n  }\n  if( feature.getProperty('name') === '0.3~1.0'){\n    return { fillOpacity: 0.35, fillColor: '#54FF00', strokeWeight: 2, strokeColor: '#54FF00', strokeOpacity: 1 };\n  }\n});\n```\n\n結果呈現像這樣：\n![image.png](http://user-image.logdown.io/user/3292/blog/3340/post/302535/lNUGoyd7RB2MOsx8i1cw_image.png)\n\n這裏也有 Online Demo: [http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html](http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html)","slug":"use-google-map-view-rainfall-simulation-of-flooding-in-taipei-city-map","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjos001j2kt4x17me6cf","content":"<p>看到前兩天的新聞: <a href=\"https://tw.news.yahoo.com/%E6%9F%AF%E6%96%87%E5%93%B2%E6%83%B3%E5%85%AC%E9%96%8B%E6%98%93%E6%B7%B9%E6%B0%B4%E5%9C%B0%E5%8D%80-%E5%8C%97%E5%B8%82%E5%BA%9C%E5%B7%B2%E4%B8%8A%E7%B6%B2-115016390.html\" title=\"柯文哲想公開易淹水地區 北市府已上網\" target=\"_blank\" rel=\"external\">柯文哲想公開易淹水地區 北市府已上網</a>，又剛好有前輩寫了一篇 <a href=\"http://gis.rchss.sinica.edu.tw/qgis/?p=3221\" title=\"利用QGIS檢視台北市降雨淹水模擬圖\" target=\"_blank\" rel=\"external\">利用QGIS檢視台北市降雨淹水模擬圖</a>，<del>雖然身處房仲業，但身為有良心的開發者不能只想著房價</del>，心想應也可透過 Google Map 來呈現，於是試了一下，順便寫篇記錄。</p>\n<p>首先從<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=fa1e8012-ebb4-473b-888e-97f9a9ce365e\" title=\"臺北市政府資料開放平台\" target=\"_blank\" rel=\"external\">臺北市政府資料開放平台</a>將所需的資料一一下載下來，格式是 kmz (其實就是 zip 壓縮)。在解壓縮後可以得到 doc.kml 檔案。 接著，雖然 Google maps API 有提供 <a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-kml\" title=\"Google maps API KML Layers\" target=\"_blank\" rel=\"external\">KML Layers</a> 的圖層嵌套，但轉出來的 kml 檔似乎要稍作修改後才能透過 KML Layers 套用在 Google map 上，這裏我選擇另一種做法: 將 kml 轉為 geoJSON 後使用。</p>\n<p>前面說到要將 kml 檔案轉為 geoJSON，那麼該如何轉換格式呢？\n幸好 mapbox 提供了 <a href=\"https://github.com/mapbox/togeojson\" target=\"_blank\" rel=\"external\">togeojson</a> 這套工具，透過它提供的 <code>toGeoJSON.kml(doc)</code> 就可以輕鬆地將它轉為 geoJSON 的格式了。</p>\n<p>有關 GeoJSON 如何輸出至 Google Map 可以參考小弟之前的 post：<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\">透過 Google Maps API 處理 GeoJSON 資料</a>，這裏就不再贅述。</p>\n<p>值得一提的是，透過 Google Maps Javascript API 輸出的 GeoJSON 預設的樣式都是黑色粗線，想要修改樣式的話可以透過 <code>setStyle</code> 來做處理，像這樣可以針對 name 是 0.3 的時候，我們輸出樣式為藍色的線，如果是 0.3~1.0 的話，則是輸出為綠色的線段，當然也可以針對填色與透明度等等做設定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataMap.setStyle(function(feature)&#123;</div><div class=\"line\">  if( feature.getProperty(&apos;name&apos;) === &apos;0.3&apos;)&#123;</div><div class=\"line\">    return &#123; fillOpacity: 0.35, fillColor: &apos;#0070FF&apos;, strokeWeight: 2, strokeColor: &apos;#0070FF&apos;, strokeOpacity: 1 &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  if( feature.getProperty(&apos;name&apos;) === &apos;0.3~1.0&apos;)&#123;</div><div class=\"line\">    return &#123; fillOpacity: 0.35, fillColor: &apos;#54FF00&apos;, strokeWeight: 2, strokeColor: &apos;#54FF00&apos;, strokeOpacity: 1 &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>結果呈現像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/302535/lNUGoyd7RB2MOsx8i1cw_image.png\" alt=\"image.png\"></p>\n<p>這裏也有 Online Demo: <a href=\"http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html\" target=\"_blank\" rel=\"external\">http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html</a></p>\n","excerpt":"","more":"<p>看到前兩天的新聞: <a href=\"https://tw.news.yahoo.com/%E6%9F%AF%E6%96%87%E5%93%B2%E6%83%B3%E5%85%AC%E9%96%8B%E6%98%93%E6%B7%B9%E6%B0%B4%E5%9C%B0%E5%8D%80-%E5%8C%97%E5%B8%82%E5%BA%9C%E5%B7%B2%E4%B8%8A%E7%B6%B2-115016390.html\" title=\"柯文哲想公開易淹水地區 北市府已上網\">柯文哲想公開易淹水地區 北市府已上網</a>，又剛好有前輩寫了一篇 <a href=\"http://gis.rchss.sinica.edu.tw/qgis/?p=3221\" title=\"利用QGIS檢視台北市降雨淹水模擬圖\">利用QGIS檢視台北市降雨淹水模擬圖</a>，<del>雖然身處房仲業，但身為有良心的開發者不能只想著房價</del>，心想應也可透過 Google Map 來呈現，於是試了一下，順便寫篇記錄。</p>\n<p>首先從<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=fa1e8012-ebb4-473b-888e-97f9a9ce365e\" title=\"臺北市政府資料開放平台\">臺北市政府資料開放平台</a>將所需的資料一一下載下來，格式是 kmz (其實就是 zip 壓縮)。在解壓縮後可以得到 doc.kml 檔案。 接著，雖然 Google maps API 有提供 <a href=\"https://developers.google.com/maps/documentation/javascript/examples/layer-kml\" title=\"Google maps API KML Layers\">KML Layers</a> 的圖層嵌套，但轉出來的 kml 檔似乎要稍作修改後才能透過 KML Layers 套用在 Google map 上，這裏我選擇另一種做法: 將 kml 轉為 geoJSON 後使用。</p>\n<p>前面說到要將 kml 檔案轉為 geoJSON，那麼該如何轉換格式呢？\n幸好 mapbox 提供了 <a href=\"https://github.com/mapbox/togeojson\">togeojson</a> 這套工具，透過它提供的 <code>toGeoJSON.kml(doc)</code> 就可以輕鬆地將它轉為 geoJSON 的格式了。</p>\n<p>有關 GeoJSON 如何輸出至 Google Map 可以參考小弟之前的 post：<a href=\"http://kuro.tw/posts/2015/04/28/through-the-google-maps-api-geojson-data\">透過 Google Maps API 處理 GeoJSON 資料</a>，這裏就不再贅述。</p>\n<p>值得一提的是，透過 Google Maps Javascript API 輸出的 GeoJSON 預設的樣式都是黑色粗線，想要修改樣式的話可以透過 <code>setStyle</code> 來做處理，像這樣可以針對 name 是 0.3 的時候，我們輸出樣式為藍色的線，如果是 0.3~1.0 的話，則是輸出為綠色的線段，當然也可以針對填色與透明度等等做設定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">dataMap.setStyle(function(feature)&#123;</div><div class=\"line\">  if( feature.getProperty(&apos;name&apos;) === &apos;0.3&apos;)&#123;</div><div class=\"line\">    return &#123; fillOpacity: 0.35, fillColor: &apos;#0070FF&apos;, strokeWeight: 2, strokeColor: &apos;#0070FF&apos;, strokeOpacity: 1 &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  if( feature.getProperty(&apos;name&apos;) === &apos;0.3~1.0&apos;)&#123;</div><div class=\"line\">    return &#123; fillOpacity: 0.35, fillColor: &apos;#54FF00&apos;, strokeWeight: 2, strokeColor: &apos;#54FF00&apos;, strokeOpacity: 1 &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>結果呈現像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/302535/lNUGoyd7RB2MOsx8i1cw_image.png\" alt=\"image.png\"></p>\n<p>這裏也有 Online Demo: <a href=\"http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html\">http://kurotanshi.github.io/TPEDisasterSummary/rain/rain_tp_map.html</a></p>\n"},{"layout":"post","title":"利用 Google Fusion Table，不用寫 code 也可以產生主題地圖","date":"2015-10-14T18:16:00.000Z","comments":1,"_content":"感謝台北市政府以及[相關人士的努力](https://www.facebook.com/photo.php?fbid=10204828212414899&set=a.1357755313713.2044236.1526408898&type=3)，在十月中旬的時候，台北市 open data 平台又開放了「[台北市住宅竊盜點位資訊](http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02)」這樣的資料，雖然很多人戲稱房價又要下跌了，但是老話一句，身為<del>有良心的開發者，當然居住安全比房價什麼的還要重要得多</del>。\n\n那麼，拿到這份資料我們可以怎麼玩呢?\n剛好這份資料的格式是 CSV (Comma-Separated Values，一種由逗點分隔的純文字資料格式)，所以本篇就來介紹如何透過 [Google Fusion Table](https://support.google.com/fusiontables/answer/2571232) 來讓我們不必寫任何的 code ，也可以建立主題地圖。\n\n首先先到[台北市住宅竊盜點位資訊](http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02)，點一下「使用資料」將所需的檔案下載下來，會得到一份 csv 檔案。\n\n![螢幕快照 2015-10-15 上午10.16.22.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/UsvTpRmSDWhtT8junGNw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.16.22.png)\n\n接著打開 [Google Fusion Table](https://support.google.com/fusiontables/answer/2571232) 的頁面，看到下面這個畫面：\n![螢幕快照 2015-10-15 上午10.33.31.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/vFIqF2IuSOuhKhR0mKUt_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.33.31.png)\n\n接著選擇「CREATE A FUSION TABLE」，會看到這樣的畫面：\n![螢幕快照 2015-10-15 上午10.37.48.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png)\n\n現在試著把剛剛的 csv 直接餵給他，看看會發生什麼事\n![螢幕快照 2015-10-15 上午10.05.47.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/Wf4cjXTQTrCXlw0UDWMl_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.05.47.png)\n\n如果不意外，你應該會得到像這樣的亂碼資料 XDDDDD\n![螢幕快照 2015-10-15 上午10.06.19.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/AUqRTPyFQX29z5TdLGaM_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.06.19.png)\n\n不過沒關係，山不轉路轉，檔案格式當然也可以轉。只是需要多走幾步路。\n這次我們將原始的 csv 資料先丟到 [Google Sheet](http://www.google.com/intl/zh-TW_tw/sheets/about/) 內，請他將我們的資料轉成正確的編碼。 在建立一個新的 Google Sheet 之後，我們選擇 File > Import 將剛剛的 csv 檔案匯入：\n![螢幕快照 2015-10-15 上午10.07.40.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/fNpq4j4rTEuynwQAcxOO_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.07.40.png)\n\n記得一樣要選擇 Comma，因為是透過逗點分隔的資料格式。\n![螢幕快照 2015-10-15 上午10.08.07.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/bbUWtz7RXqdpZsizK5Lw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.08.07.png)\n\n然後就會得到正確編碼後的資料囉。<del>不過糖廍里一樣 GG...因為原始資料就 GG 了... orz</del>\n![未命名.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/wYMPpnlHTRmrgoywrKGc_%E6%9C%AA%E5%91%BD%E5%90%8D.png)\n\nok, 到了這裡我們已經有一份正確的資料，這時再回到 Funsion Table，我們選擇 「Google Spreadsheets」，然後將剛剛建立的 Google Sheet 匯入進來:\n![螢幕快照 2015-10-15 上午10.37.48.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png)\n\n![螢幕快照 2015-10-15 上午10.11.18.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/66zfnteRQy6L50MJQUZ1_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.18.png)\n\n匯入成功後，Funsion Table 會出現這樣的畫面：\n![未命名.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/pDQ7qI4WSDub29jPiglU_%E6%9C%AA%E5%91%BD%E5%90%8D.png)\n\n這個時候，因為我們要製作地圖，所以要告訴 Funsion Table 地點的欄位不是單純的字串，而是用來表示地理資訊的資料。點選 Edit > Change columns：\n![螢幕快照 2015-10-15 上午10.11.57.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/thibCn9zRMO435hQgjFd_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.57.png)\n\n然後將發生地點的 Type 改成 Location，然後點上面藍色的 Save 儲存。\n![螢幕快照 2015-10-15 上午10.12.09.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/TK4RPNQtQNiXcQBclDeu_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.12.09.png)\n\n資料都準備好了，然後我們建立地圖：\n![螢幕快照 2015-10-15 上午10.58.53.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/csg65yBiQIyKcj1PAnNk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.58.53.png)\n\n不意外的話你應該會看到這樣的畫面，是因為我們傳入的是地址的文字資訊， Google 需要將它轉為經緯度後才能對應到地圖上：\n![螢幕快照 2015-10-15 上午10.13.03.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/JJNbZ5DRRmehqBdoDytm_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.13.03.png)\n\n然後等待一段時間後，Funsion Table 就會為我們產生地圖，像這樣：\n![螢幕快照 2015-10-15 上午10.20.02.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/7cjQA7USzGy7nGrQRLDr_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.20.02.png)\n\n除了地點標示外，他也提供了熱圖 (Heat Map) 的呈現，試著拉拉旁邊的捲軸調整參數吧：\n![螢幕快照 2015-10-15 上午11.03.53.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/wMQb7zI8R72jFxu7a3g4_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8811.03.53.png)\n\n\n當然你也可以做好的地圖 share 出來，像這樣：\n<iframe width=\"800\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://www.google.com/fusiontables/embedviz?q=select+col3+from+1sAGtul5gWv1_yRpPTYI1ZvPaHQRPDod-B0MbOeS_&amp;viz=MAP&amp;h=false&amp;lat=25.05814459656792&amp;lng=121.63429174086912&amp;t=1&amp;z=12&amp;l=col3&amp;y=3&amp;tmplt=4&amp;hml=GEOCODABLE\"></iframe>\n\n透過 Fusion Table 我們可以不用寫任何的程式碼就生成一份資訊地圖，很簡單吧 :)","source":"_posts/using-google-fusion-table-without-writing-code-or-topic-maps.md","raw":"---\nlayout: post\ntitle: '利用 Google Fusion Table，不用寫 code 也可以產生主題地圖'\ndate: 2015-10-15 02:16\ncomments: true\ncategories: [Google Map]\ntags: [google map, Fusion Table]\n---\n感謝台北市政府以及[相關人士的努力](https://www.facebook.com/photo.php?fbid=10204828212414899&set=a.1357755313713.2044236.1526408898&type=3)，在十月中旬的時候，台北市 open data 平台又開放了「[台北市住宅竊盜點位資訊](http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02)」這樣的資料，雖然很多人戲稱房價又要下跌了，但是老話一句，身為<del>有良心的開發者，當然居住安全比房價什麼的還要重要得多</del>。\n\n那麼，拿到這份資料我們可以怎麼玩呢?\n剛好這份資料的格式是 CSV (Comma-Separated Values，一種由逗點分隔的純文字資料格式)，所以本篇就來介紹如何透過 [Google Fusion Table](https://support.google.com/fusiontables/answer/2571232) 來讓我們不必寫任何的 code ，也可以建立主題地圖。\n\n首先先到[台北市住宅竊盜點位資訊](http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02)，點一下「使用資料」將所需的檔案下載下來，會得到一份 csv 檔案。\n\n![螢幕快照 2015-10-15 上午10.16.22.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/UsvTpRmSDWhtT8junGNw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.16.22.png)\n\n接著打開 [Google Fusion Table](https://support.google.com/fusiontables/answer/2571232) 的頁面，看到下面這個畫面：\n![螢幕快照 2015-10-15 上午10.33.31.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/vFIqF2IuSOuhKhR0mKUt_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.33.31.png)\n\n接著選擇「CREATE A FUSION TABLE」，會看到這樣的畫面：\n![螢幕快照 2015-10-15 上午10.37.48.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png)\n\n現在試著把剛剛的 csv 直接餵給他，看看會發生什麼事\n![螢幕快照 2015-10-15 上午10.05.47.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/Wf4cjXTQTrCXlw0UDWMl_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.05.47.png)\n\n如果不意外，你應該會得到像這樣的亂碼資料 XDDDDD\n![螢幕快照 2015-10-15 上午10.06.19.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/AUqRTPyFQX29z5TdLGaM_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.06.19.png)\n\n不過沒關係，山不轉路轉，檔案格式當然也可以轉。只是需要多走幾步路。\n這次我們將原始的 csv 資料先丟到 [Google Sheet](http://www.google.com/intl/zh-TW_tw/sheets/about/) 內，請他將我們的資料轉成正確的編碼。 在建立一個新的 Google Sheet 之後，我們選擇 File > Import 將剛剛的 csv 檔案匯入：\n![螢幕快照 2015-10-15 上午10.07.40.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/fNpq4j4rTEuynwQAcxOO_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.07.40.png)\n\n記得一樣要選擇 Comma，因為是透過逗點分隔的資料格式。\n![螢幕快照 2015-10-15 上午10.08.07.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/bbUWtz7RXqdpZsizK5Lw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.08.07.png)\n\n然後就會得到正確編碼後的資料囉。<del>不過糖廍里一樣 GG...因為原始資料就 GG 了... orz</del>\n![未命名.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/wYMPpnlHTRmrgoywrKGc_%E6%9C%AA%E5%91%BD%E5%90%8D.png)\n\nok, 到了這裡我們已經有一份正確的資料，這時再回到 Funsion Table，我們選擇 「Google Spreadsheets」，然後將剛剛建立的 Google Sheet 匯入進來:\n![螢幕快照 2015-10-15 上午10.37.48.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png)\n\n![螢幕快照 2015-10-15 上午10.11.18.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/66zfnteRQy6L50MJQUZ1_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.18.png)\n\n匯入成功後，Funsion Table 會出現這樣的畫面：\n![未命名.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/pDQ7qI4WSDub29jPiglU_%E6%9C%AA%E5%91%BD%E5%90%8D.png)\n\n這個時候，因為我們要製作地圖，所以要告訴 Funsion Table 地點的欄位不是單純的字串，而是用來表示地理資訊的資料。點選 Edit > Change columns：\n![螢幕快照 2015-10-15 上午10.11.57.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/thibCn9zRMO435hQgjFd_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.57.png)\n\n然後將發生地點的 Type 改成 Location，然後點上面藍色的 Save 儲存。\n![螢幕快照 2015-10-15 上午10.12.09.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/TK4RPNQtQNiXcQBclDeu_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.12.09.png)\n\n資料都準備好了，然後我們建立地圖：\n![螢幕快照 2015-10-15 上午10.58.53.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/csg65yBiQIyKcj1PAnNk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.58.53.png)\n\n不意外的話你應該會看到這樣的畫面，是因為我們傳入的是地址的文字資訊， Google 需要將它轉為經緯度後才能對應到地圖上：\n![螢幕快照 2015-10-15 上午10.13.03.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/JJNbZ5DRRmehqBdoDytm_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.13.03.png)\n\n然後等待一段時間後，Funsion Table 就會為我們產生地圖，像這樣：\n![螢幕快照 2015-10-15 上午10.20.02.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/7cjQA7USzGy7nGrQRLDr_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.20.02.png)\n\n除了地點標示外，他也提供了熱圖 (Heat Map) 的呈現，試著拉拉旁邊的捲軸調整參數吧：\n![螢幕快照 2015-10-15 上午11.03.53.png](http://user-image.logdown.io/user/3292/blog/3340/post/304787/wMQb7zI8R72jFxu7a3g4_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8811.03.53.png)\n\n\n當然你也可以做好的地圖 share 出來，像這樣：\n<iframe width=\"800\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://www.google.com/fusiontables/embedviz?q=select+col3+from+1sAGtul5gWv1_yRpPTYI1ZvPaHQRPDod-B0MbOeS_&amp;viz=MAP&amp;h=false&amp;lat=25.05814459656792&amp;lng=121.63429174086912&amp;t=1&amp;z=12&amp;l=col3&amp;y=3&amp;tmplt=4&amp;hml=GEOCODABLE\"></iframe>\n\n透過 Fusion Table 我們可以不用寫任何的程式碼就生成一份資訊地圖，很簡單吧 :)","slug":"using-google-fusion-table-without-writing-code-or-topic-maps","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjot001m2kt4f62kv7st","content":"<p>感謝台北市政府以及<a href=\"https://www.facebook.com/photo.php?fbid=10204828212414899&amp;set=a.1357755313713.2044236.1526408898&amp;type=3\" target=\"_blank\" rel=\"external\">相關人士的努力</a>，在十月中旬的時候，台北市 open data 平台又開放了「<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02\" target=\"_blank\" rel=\"external\">台北市住宅竊盜點位資訊</a>」這樣的資料，雖然很多人戲稱房價又要下跌了，但是老話一句，身為<del>有良心的開發者，當然居住安全比房價什麼的還要重要得多</del>。</p>\n<p>那麼，拿到這份資料我們可以怎麼玩呢?\n剛好這份資料的格式是 CSV (Comma-Separated Values，一種由逗點分隔的純文字資料格式)，所以本篇就來介紹如何透過 <a href=\"https://support.google.com/fusiontables/answer/2571232\" target=\"_blank\" rel=\"external\">Google Fusion Table</a> 來讓我們不必寫任何的 code ，也可以建立主題地圖。</p>\n<p>首先先到<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02\" target=\"_blank\" rel=\"external\">台北市住宅竊盜點位資訊</a>，點一下「使用資料」將所需的檔案下載下來，會得到一份 csv 檔案。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/UsvTpRmSDWhtT8junGNw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.16.22.png\" alt=\"螢幕快照 2015-10-15 上午10.16.22.png\"></p>\n<p>接著打開 <a href=\"https://support.google.com/fusiontables/answer/2571232\" target=\"_blank\" rel=\"external\">Google Fusion Table</a> 的頁面，看到下面這個畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/vFIqF2IuSOuhKhR0mKUt_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.33.31.png\" alt=\"螢幕快照 2015-10-15 上午10.33.31.png\"></p>\n<p>接著選擇「CREATE A FUSION TABLE」，會看到這樣的畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png\" alt=\"螢幕快照 2015-10-15 上午10.37.48.png\"></p>\n<p>現在試著把剛剛的 csv 直接餵給他，看看會發生什麼事\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/Wf4cjXTQTrCXlw0UDWMl_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.05.47.png\" alt=\"螢幕快照 2015-10-15 上午10.05.47.png\"></p>\n<p>如果不意外，你應該會得到像這樣的亂碼資料 XDDDDD\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/AUqRTPyFQX29z5TdLGaM_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.06.19.png\" alt=\"螢幕快照 2015-10-15 上午10.06.19.png\"></p>\n<p>不過沒關係，山不轉路轉，檔案格式當然也可以轉。只是需要多走幾步路。\n這次我們將原始的 csv 資料先丟到 <a href=\"http://www.google.com/intl/zh-TW_tw/sheets/about/\" target=\"_blank\" rel=\"external\">Google Sheet</a> 內，請他將我們的資料轉成正確的編碼。 在建立一個新的 Google Sheet 之後，我們選擇 File &gt; Import 將剛剛的 csv 檔案匯入：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/fNpq4j4rTEuynwQAcxOO_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.07.40.png\" alt=\"螢幕快照 2015-10-15 上午10.07.40.png\"></p>\n<p>記得一樣要選擇 Comma，因為是透過逗點分隔的資料格式。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/bbUWtz7RXqdpZsizK5Lw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.08.07.png\" alt=\"螢幕快照 2015-10-15 上午10.08.07.png\"></p>\n<p>然後就會得到正確編碼後的資料囉。<del>不過糖廍里一樣 GG...因為原始資料就 GG 了... orz</del>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/wYMPpnlHTRmrgoywrKGc_%E6%9C%AA%E5%91%BD%E5%90%8D.png\" alt=\"未命名.png\"></p>\n<p>ok, 到了這裡我們已經有一份正確的資料，這時再回到 Funsion Table，我們選擇 「Google Spreadsheets」，然後將剛剛建立的 Google Sheet 匯入進來:\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png\" alt=\"螢幕快照 2015-10-15 上午10.37.48.png\"></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/66zfnteRQy6L50MJQUZ1_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.18.png\" alt=\"螢幕快照 2015-10-15 上午10.11.18.png\"></p>\n<p>匯入成功後，Funsion Table 會出現這樣的畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/pDQ7qI4WSDub29jPiglU_%E6%9C%AA%E5%91%BD%E5%90%8D.png\" alt=\"未命名.png\"></p>\n<p>這個時候，因為我們要製作地圖，所以要告訴 Funsion Table 地點的欄位不是單純的字串，而是用來表示地理資訊的資料。點選 Edit &gt; Change columns：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/thibCn9zRMO435hQgjFd_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.57.png\" alt=\"螢幕快照 2015-10-15 上午10.11.57.png\"></p>\n<p>然後將發生地點的 Type 改成 Location，然後點上面藍色的 Save 儲存。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/TK4RPNQtQNiXcQBclDeu_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.12.09.png\" alt=\"螢幕快照 2015-10-15 上午10.12.09.png\"></p>\n<p>資料都準備好了，然後我們建立地圖：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/csg65yBiQIyKcj1PAnNk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.58.53.png\" alt=\"螢幕快照 2015-10-15 上午10.58.53.png\"></p>\n<p>不意外的話你應該會看到這樣的畫面，是因為我們傳入的是地址的文字資訊， Google 需要將它轉為經緯度後才能對應到地圖上：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/JJNbZ5DRRmehqBdoDytm_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.13.03.png\" alt=\"螢幕快照 2015-10-15 上午10.13.03.png\"></p>\n<p>然後等待一段時間後，Funsion Table 就會為我們產生地圖，像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/7cjQA7USzGy7nGrQRLDr_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.20.02.png\" alt=\"螢幕快照 2015-10-15 上午10.20.02.png\"></p>\n<p>除了地點標示外，他也提供了熱圖 (Heat Map) 的呈現，試著拉拉旁邊的捲軸調整參數吧：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/wMQb7zI8R72jFxu7a3g4_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8811.03.53.png\" alt=\"螢幕快照 2015-10-15 上午11.03.53.png\"></p>\n<p>當然你也可以做好的地圖 share 出來，像這樣：</p>\n<iframe width=\"800\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://www.google.com/fusiontables/embedviz?q=select+col3+from+1sAGtul5gWv1_yRpPTYI1ZvPaHQRPDod-B0MbOeS_&amp;viz=MAP&amp;h=false&amp;lat=25.05814459656792&amp;lng=121.63429174086912&amp;t=1&amp;z=12&amp;l=col3&amp;y=3&amp;tmplt=4&amp;hml=GEOCODABLE\"></iframe>\n\n<p>透過 Fusion Table 我們可以不用寫任何的程式碼就生成一份資訊地圖，很簡單吧 :)</p>\n","excerpt":"","more":"<p>感謝台北市政府以及<a href=\"https://www.facebook.com/photo.php?fbid=10204828212414899&amp;set=a.1357755313713.2044236.1526408898&amp;type=3\">相關人士的努力</a>，在十月中旬的時候，台北市 open data 平台又開放了「<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02\">台北市住宅竊盜點位資訊</a>」這樣的資料，雖然很多人戲稱房價又要下跌了，但是老話一句，身為<del>有良心的開發者，當然居住安全比房價什麼的還要重要得多</del>。</p>\n<p>那麼，拿到這份資料我們可以怎麼玩呢?\n剛好這份資料的格式是 CSV (Comma-Separated Values，一種由逗點分隔的純文字資料格式)，所以本篇就來介紹如何透過 <a href=\"https://support.google.com/fusiontables/answer/2571232\">Google Fusion Table</a> 來讓我們不必寫任何的 code ，也可以建立主題地圖。</p>\n<p>首先先到<a href=\"http://data.taipei/opendata/datalist/datasetMeta?oid=68785231-d6c5-47a1-b001-77eec70bec02\">台北市住宅竊盜點位資訊</a>，點一下「使用資料」將所需的檔案下載下來，會得到一份 csv 檔案。</p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/UsvTpRmSDWhtT8junGNw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.16.22.png\" alt=\"螢幕快照 2015-10-15 上午10.16.22.png\"></p>\n<p>接著打開 <a href=\"https://support.google.com/fusiontables/answer/2571232\">Google Fusion Table</a> 的頁面，看到下面這個畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/vFIqF2IuSOuhKhR0mKUt_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.33.31.png\" alt=\"螢幕快照 2015-10-15 上午10.33.31.png\"></p>\n<p>接著選擇「CREATE A FUSION TABLE」，會看到這樣的畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png\" alt=\"螢幕快照 2015-10-15 上午10.37.48.png\"></p>\n<p>現在試著把剛剛的 csv 直接餵給他，看看會發生什麼事\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/Wf4cjXTQTrCXlw0UDWMl_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.05.47.png\" alt=\"螢幕快照 2015-10-15 上午10.05.47.png\"></p>\n<p>如果不意外，你應該會得到像這樣的亂碼資料 XDDDDD\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/AUqRTPyFQX29z5TdLGaM_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.06.19.png\" alt=\"螢幕快照 2015-10-15 上午10.06.19.png\"></p>\n<p>不過沒關係，山不轉路轉，檔案格式當然也可以轉。只是需要多走幾步路。\n這次我們將原始的 csv 資料先丟到 <a href=\"http://www.google.com/intl/zh-TW_tw/sheets/about/\">Google Sheet</a> 內，請他將我們的資料轉成正確的編碼。 在建立一個新的 Google Sheet 之後，我們選擇 File &gt; Import 將剛剛的 csv 檔案匯入：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/fNpq4j4rTEuynwQAcxOO_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.07.40.png\" alt=\"螢幕快照 2015-10-15 上午10.07.40.png\"></p>\n<p>記得一樣要選擇 Comma，因為是透過逗點分隔的資料格式。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/bbUWtz7RXqdpZsizK5Lw_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.08.07.png\" alt=\"螢幕快照 2015-10-15 上午10.08.07.png\"></p>\n<p>然後就會得到正確編碼後的資料囉。<del>不過糖廍里一樣 GG...因為原始資料就 GG 了... orz</del>\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/wYMPpnlHTRmrgoywrKGc_%E6%9C%AA%E5%91%BD%E5%90%8D.png\" alt=\"未命名.png\"></p>\n<p>ok, 到了這裡我們已經有一份正確的資料，這時再回到 Funsion Table，我們選擇 「Google Spreadsheets」，然後將剛剛建立的 Google Sheet 匯入進來:\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/QrsLmP03QNamaW0qrqjT_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.37.48.png\" alt=\"螢幕快照 2015-10-15 上午10.37.48.png\"></p>\n<p><img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/66zfnteRQy6L50MJQUZ1_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.18.png\" alt=\"螢幕快照 2015-10-15 上午10.11.18.png\"></p>\n<p>匯入成功後，Funsion Table 會出現這樣的畫面：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/pDQ7qI4WSDub29jPiglU_%E6%9C%AA%E5%91%BD%E5%90%8D.png\" alt=\"未命名.png\"></p>\n<p>這個時候，因為我們要製作地圖，所以要告訴 Funsion Table 地點的欄位不是單純的字串，而是用來表示地理資訊的資料。點選 Edit &gt; Change columns：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/thibCn9zRMO435hQgjFd_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.11.57.png\" alt=\"螢幕快照 2015-10-15 上午10.11.57.png\"></p>\n<p>然後將發生地點的 Type 改成 Location，然後點上面藍色的 Save 儲存。\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/TK4RPNQtQNiXcQBclDeu_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.12.09.png\" alt=\"螢幕快照 2015-10-15 上午10.12.09.png\"></p>\n<p>資料都準備好了，然後我們建立地圖：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/csg65yBiQIyKcj1PAnNk_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.58.53.png\" alt=\"螢幕快照 2015-10-15 上午10.58.53.png\"></p>\n<p>不意外的話你應該會看到這樣的畫面，是因為我們傳入的是地址的文字資訊， Google 需要將它轉為經緯度後才能對應到地圖上：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/JJNbZ5DRRmehqBdoDytm_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.13.03.png\" alt=\"螢幕快照 2015-10-15 上午10.13.03.png\"></p>\n<p>然後等待一段時間後，Funsion Table 就會為我們產生地圖，像這樣：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/7cjQA7USzGy7nGrQRLDr_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8810.20.02.png\" alt=\"螢幕快照 2015-10-15 上午10.20.02.png\"></p>\n<p>除了地點標示外，他也提供了熱圖 (Heat Map) 的呈現，試著拉拉旁邊的捲軸調整參數吧：\n<img src=\"http://user-image.logdown.io/user/3292/blog/3340/post/304787/wMQb7zI8R72jFxu7a3g4_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-10-15%20%E4%B8%8A%E5%8D%8811.03.53.png\" alt=\"螢幕快照 2015-10-15 上午11.03.53.png\"></p>\n<p>當然你也可以做好的地圖 share 出來，像這樣：</p>\n<iframe width=\"800\" height=\"400\" scrolling=\"no\" frameborder=\"no\" src=\"https://www.google.com/fusiontables/embedviz?q=select+col3+from+1sAGtul5gWv1_yRpPTYI1ZvPaHQRPDod-B0MbOeS_&amp;viz=MAP&amp;h=false&amp;lat=25.05814459656792&amp;lng=121.63429174086912&amp;t=1&amp;z=12&amp;l=col3&amp;y=3&amp;tmplt=4&amp;hml=GEOCODABLE\"></iframe>\n\n<p>透過 Fusion Table 我們可以不用寫任何的程式碼就生成一份資訊地圖，很簡單吧 :)</p>\n"},{"layout":"post","title":"[VueJS] 在 v-for 列表中透過 filter 完成搜尋與分頁的功能","date":"2016-05-30T06:30:00.000Z","comments":1,"_content":"最近 [Vue.js](https://vuejs.org/) 正夯，所以手上幾個東西打算用這個來改寫，關於 Vue.js 的基本介紹可以參考小弟的投影片，這裡就不再贅述。\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/DLQDvLrRSNunsY\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:10px; max-width: 100%;\" allowfullscreen> </iframe>\n\n有用過 Vue.js 開發的朋友一定知道它提供的 filter 功能十分強大，在 `v-for` 列表中使用 `filterBy` 可以在一行內完成列表搜尋的功能：\n\n``` html\n  <div id=\"filter-by-example\">\n    <input v-model=\"n\">\n    <ul>\n      <!-- 透過 input 欄位的 v-model n 與 user.name 做模糊比對 -->\n      <li v-for=\"user in users | filterBy n in 'name'\">\n        {{ user.name }}\n      </li>\n    </ul>\n  </div>\n```\n\n若是要限制顯示的筆數也能用 `limitBy` 做到，進而完成分頁的功能。\n\n``` html\n  <!-- 只顯示前 10 個元素 -->\n  <div v-for=\"item in items | limitBy 10\"></div>\n\n  <!-- 顯示第 5 到 15 筆元素-->\n  <div v-for=\"item in items | limitBy 10 5\"></div>\n```\n\n這次遇到的問題是這樣的，如果我們想要同時完成「搜尋」與「分頁」的需求，光靠 `filterBy` 與 `limitBy` 就不是那麼容易做到，還好 Vue.js 提供了[自訂 filter](http://vuejs.org/guide/custom-filter.html) 的功能：先用 filterBy 過濾，再透過自訂 recordLength 記錄過濾後的資料數量，最後再用 limitBy 搭配頁籤切換頁面。\n小心 filter 的順序，filter 會依序執行，然後再繼續下個 filter。\n\n\n``` html\n  <tr v-for=\" r in rows\n               | filterBy filter_name in 'name'\n               | recordLength 'filteredRowCount'\n               | limitBy countOfPage pageStart \">\n      <td>......</td>\n  </tr>\n```\n\n然後是自定的 filter `recordLength`：\nresult 代表傳入的資料， key 則是從 view 帶入的參數，這個範例是 `filteredRowCount`。\n\n這裡透過 `vm.$set` 來將過濾後的數量指定至 vue 實體，以便可以直接在 Vue 實體使用。\n\n``` javascript\n  Vue.filter('recordLength', function (result, key) {\n    this.$set(key, result.length);\n    return result;\n  });\n```\n\n最後在頁籤的部分，我們就可以簡單透過 `filter_name` 欄位是否空白來切換是否透過 `filteredRowCount` 計算總頁數:\n\n``` javascript\n  totalPage: function(){\n    if( this.filter_name.trim() === '' ) {\n      return Math.ceil(this.rows.length / this.countOfPage);\n    }\n    else{\n      return Math.ceil(this.filteredRowCount / this.countOfPage);\n    }\n  }\n```\n\n\n完整的 [demo](http://jsbin.com/bimawidora/1/edit?html,js,output) 如下:\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/bimawidora/embed?output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script>\n","source":"_posts/vuejs-in-v-for-through-the-filter-in-the-list-complete-search-and-page-functions.md","raw":"---\nlayout: post\ntitle: '[VueJS] 在 v-for 列表中透過 filter 完成搜尋與分頁的功能'\ndate: 2016-05-30 14:30\ncomments: true\ncategories: [vue.js]\ntags: [vue.js]\n---\n最近 [Vue.js](https://vuejs.org/) 正夯，所以手上幾個東西打算用這個來改寫，關於 Vue.js 的基本介紹可以參考小弟的投影片，這裡就不再贅述。\n\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/DLQDvLrRSNunsY\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:10px; max-width: 100%;\" allowfullscreen> </iframe>\n\n有用過 Vue.js 開發的朋友一定知道它提供的 filter 功能十分強大，在 `v-for` 列表中使用 `filterBy` 可以在一行內完成列表搜尋的功能：\n\n``` html\n  <div id=\"filter-by-example\">\n    <input v-model=\"n\">\n    <ul>\n      <!-- 透過 input 欄位的 v-model n 與 user.name 做模糊比對 -->\n      <li v-for=\"user in users | filterBy n in 'name'\">\n        {{ user.name }}\n      </li>\n    </ul>\n  </div>\n```\n\n若是要限制顯示的筆數也能用 `limitBy` 做到，進而完成分頁的功能。\n\n``` html\n  <!-- 只顯示前 10 個元素 -->\n  <div v-for=\"item in items | limitBy 10\"></div>\n\n  <!-- 顯示第 5 到 15 筆元素-->\n  <div v-for=\"item in items | limitBy 10 5\"></div>\n```\n\n這次遇到的問題是這樣的，如果我們想要同時完成「搜尋」與「分頁」的需求，光靠 `filterBy` 與 `limitBy` 就不是那麼容易做到，還好 Vue.js 提供了[自訂 filter](http://vuejs.org/guide/custom-filter.html) 的功能：先用 filterBy 過濾，再透過自訂 recordLength 記錄過濾後的資料數量，最後再用 limitBy 搭配頁籤切換頁面。\n小心 filter 的順序，filter 會依序執行，然後再繼續下個 filter。\n\n\n``` html\n  <tr v-for=\" r in rows\n               | filterBy filter_name in 'name'\n               | recordLength 'filteredRowCount'\n               | limitBy countOfPage pageStart \">\n      <td>......</td>\n  </tr>\n```\n\n然後是自定的 filter `recordLength`：\nresult 代表傳入的資料， key 則是從 view 帶入的參數，這個範例是 `filteredRowCount`。\n\n這裡透過 `vm.$set` 來將過濾後的數量指定至 vue 實體，以便可以直接在 Vue 實體使用。\n\n``` javascript\n  Vue.filter('recordLength', function (result, key) {\n    this.$set(key, result.length);\n    return result;\n  });\n```\n\n最後在頁籤的部分，我們就可以簡單透過 `filter_name` 欄位是否空白來切換是否透過 `filteredRowCount` 計算總頁數:\n\n``` javascript\n  totalPage: function(){\n    if( this.filter_name.trim() === '' ) {\n      return Math.ceil(this.rows.length / this.countOfPage);\n    }\n    else{\n      return Math.ceil(this.filteredRowCount / this.countOfPage);\n    }\n  }\n```\n\n\n完整的 [demo](http://jsbin.com/bimawidora/1/edit?html,js,output) 如下:\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/bimawidora/embed?output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script>\n","slug":"vuejs-in-v-for-through-the-filter-in-the-list-complete-search-and-page-functions","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjov001q2kt44ijr7qe2","content":"<p>最近 <a href=\"https://vuejs.org/\" target=\"_blank\" rel=\"external\">Vue.js</a> 正夯，所以手上幾個東西打算用這個來改寫，關於 Vue.js 的基本介紹可以參考小弟的投影片，這裡就不再贅述。</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/DLQDvLrRSNunsY\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:10px; max-width: 100%;\" allowfullscreen> </iframe>\n\n<p>有用過 Vue.js 開發的朋友一定知道它提供的 filter 功能十分強大，在 <code>v-for</code> 列表中使用 <code>filterBy</code> 可以在一行內完成列表搜尋的功能：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"filter-by-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"n\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 透過 input 欄位的 v-model n 與 user.name 做模糊比對 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | filterBy n in 'name'\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; user.name &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>若是要限制顯示的筆數也能用 <code>limitBy</code> 做到，進而完成分頁的功能。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 只顯示前 10 個元素 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 顯示第 5 到 15 筆元素--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10 5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這次遇到的問題是這樣的，如果我們想要同時完成「搜尋」與「分頁」的需求，光靠 <code>filterBy</code> 與 <code>limitBy</code> 就不是那麼容易做到，還好 Vue.js 提供了<a href=\"http://vuejs.org/guide/custom-filter.html\" target=\"_blank\" rel=\"external\">自訂 filter</a> 的功能：先用 filterBy 過濾，再透過自訂 recordLength 記錄過濾後的資料數量，最後再用 limitBy 搭配頁籤切換頁面。\n小心 filter 的順序，filter 會依序執行，然後再繼續下個 filter。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\" r in rows</span></span></div><div class=\"line\">             | filterBy filter_name in 'name'</div><div class=\"line\">             | recordLength 'filteredRowCount'</div><div class=\"line\">             | limitBy countOfPage pageStart \"&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>......<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後是自定的 filter <code>recordLength</code>：\nresult 代表傳入的資料， key 則是從 view 帶入的參數，這個範例是 <code>filteredRowCount</code>。</p>\n<p>這裡透過 <code>vm.$set</code> 來將過濾後的數量指定至 vue 實體，以便可以直接在 Vue 實體使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.filter(<span class=\"string\">'recordLength'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$set(key, result.length);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>最後在頁籤的部分，我們就可以簡單透過 <code>filter_name</code> 欄位是否空白來切換是否透過 <code>filteredRowCount</code> 計算總頁數:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">totalPage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.filter_name.trim() === <span class=\"string\">''</span> ) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.rows.length / <span class=\"keyword\">this</span>.countOfPage);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.filteredRowCount / <span class=\"keyword\">this</span>.countOfPage);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完整的 <a href=\"http://jsbin.com/bimawidora/1/edit?html,js,output\" target=\"_blank\" rel=\"external\">demo</a> 如下:</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimawidora/embed?output\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script></p>\n","excerpt":"","more":"<p>最近 <a href=\"https://vuejs.org/\">Vue.js</a> 正夯，所以手上幾個東西打算用這個來改寫，關於 Vue.js 的基本介紹可以參考小弟的投影片，這裡就不再贅述。</p>\n<iframe src=\"//www.slideshare.net/slideshow/embed_code/key/DLQDvLrRSNunsY\" width=\"476\" height=\"400\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:10px; max-width: 100%;\" allowfullscreen> </iframe>\n\n<p>有用過 Vue.js 開發的朋友一定知道它提供的 filter 功能十分強大，在 <code>v-for</code> 列表中使用 <code>filterBy</code> 可以在一行內完成列表搜尋的功能：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"filter-by-example\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"n\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 透過 input 欄位的 v-model n 與 user.name 做模糊比對 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"user in users | filterBy n in 'name'\"</span>&gt;</span></div><div class=\"line\">      &#123;&#123; user.name &#125;&#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>若是要限制顯示的筆數也能用 <code>limitBy</code> 做到，進而完成分頁的功能。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 只顯示前 10 個元素 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 顯示第 5 到 15 筆元素--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in items | limitBy 10 5\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>這次遇到的問題是這樣的，如果我們想要同時完成「搜尋」與「分頁」的需求，光靠 <code>filterBy</code> 與 <code>limitBy</code> 就不是那麼容易做到，還好 Vue.js 提供了<a href=\"http://vuejs.org/guide/custom-filter.html\">自訂 filter</a> 的功能：先用 filterBy 過濾，再透過自訂 recordLength 記錄過濾後的資料數量，最後再用 limitBy 搭配頁籤切換頁面。\n小心 filter 的順序，filter 會依序執行，然後再繼續下個 filter。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\" r in rows</div><div class=\"line\">             | filterBy filter_name in 'name'</div><div class=\"line\">             | recordLength 'filteredRowCount'</div><div class=\"line\">             | limitBy countOfPage pageStart \"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>......<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>然後是自定的 filter <code>recordLength</code>：\nresult 代表傳入的資料， key 則是從 view 帶入的參數，這個範例是 <code>filteredRowCount</code>。</p>\n<p>這裡透過 <code>vm.$set</code> 來將過濾後的數量指定至 vue 實體，以便可以直接在 Vue 實體使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.filter(<span class=\"string\">'recordLength'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.$set(key, result.length);</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>最後在頁籤的部分，我們就可以簡單透過 <code>filter_name</code> 欄位是否空白來切換是否透過 <code>filteredRowCount</code> 計算總頁數:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">totalPage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>( <span class=\"keyword\">this</span>.filter_name.trim() === <span class=\"string\">''</span> ) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.rows.length / <span class=\"keyword\">this</span>.countOfPage);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.filteredRowCount / <span class=\"keyword\">this</span>.countOfPage);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>完整的 <a href=\"http://jsbin.com/bimawidora/1/edit?html,js,output\">demo</a> 如下:</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/bimawidora/embed?output\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?3.35.12\"></script></p>\n"},{"layout":"post","title":"利用 Yarn 安裝 Vue-cli","date":"2016-10-13T03:49:07.000Z","comments":1,"_content":"\n這兩天 JavaScript 圈子的最大新聞應該就是 Facebook 發布了一套新的 JavaScript 套件管理工具 Yarn，感覺來勢洶洶勢不可擋。\n實際花了一點時間試用，表現的確也比過去 npm 好很多，尤其過去 `npm install` 速度過慢，套件相依衝突的問題，目前在 Yarn 還沒遇到。 即使是剛開始 `yarn run scripts` 無法帶入參數的問題，在發布的第二天也快速地更新 (v0.15.1) 解決了。 👍\n\n<img src=\"/static/img/yarn-logo.png\">\n\n有關 Yarn 介紹的部分，已經有其他前輩分享了，推薦可以看看這篇 [取代 npm 的新利器 Yarn](https://medium.com/@jackypan1989/%E5%8F%96%E4%BB%A3-npm-%E7%9A%84%E6%96%B0%E5%88%A9%E5%99%A8-yarn-7d97f2f409b9#.pu0jrdcc4)。\n\n既然 Yarn 號稱可以用來取代 npm，那麼身為 Vue 的愛好者，也想馬上來試試 [Vue-cli](https://github.com/vuejs/vue-cli) 這套 Vue 的樣板工具包是否也可以透過 yarn 來單獨執行。\n\n<del>既然要取代 npm，那麼第一件事情就是把 npm 整包幹掉</del>，關於刪掉 npm modules 的過程我是參考 stackoverflow 的這篇:\n[Command to remove all npm modules globally?](http://stackoverflow.com/questions/9283472/command-to-remove-all-npm-modules-globally)，但實際上 Yarn 與 npm 是可以和平共存的，不一定要把 npm 幹掉才能跑 Yarn ，這裡只是想簡單做個試驗，啾咪 ^.<\n\n然後安裝 Yarn。 執行 `curl -o- -L https://yarnpkg.com/install.sh | bash` 即可。\n\n<hr>\n\n### 第一步：安裝 vue-cli\n\n很簡單，把原本的  `npm install -g vue-cli` 改成 `yarn global add vue-cli` 就可以了。執行的時候像這樣：\n<img src=\"/static/img/yarn-vue-1.png\">\n\n而安裝完畢後，執行 `yarn vue` 應該可以看到這樣的畫面。\n<img src=\"/static/img/yarn-vue-2.png\">\n\n每執行完一個指令還會告訴你它跑了多久喔<del>，非常囂張 (誤)</del>。\n\n\n### 第二步：初始化 Vue 專案\n\n接著，就來初始化我們的 Vue 專案。 Vue-cli 這個 scaffolding 工具官方目前提供了幾種 template 讓開發者自行選擇，\n像是大家常見的 webpack、browserify 都有。當然也可以挑選什麼都沒有的 simple: 就是最基本的 Vue 專案這樣。\n如果想更詳細了解各種 template 細節的話，可以到 vue-templates 的 [Repo](https://github.com/vuejs-templates) 去看。\n\n這裡我就選擇拿「[webpack-simple](https://github.com/vuejs-templates/webpack-simple)」當範例。\n\n執行 `yarn vue init webpack-simple my-project`\n<img src=\"/static/img/yarn-vue-3.png\">\n\n因為 VueJS 目前已經發佈至 2.0 版了，所以你會看到 Vue-cli 很貼心地提醒你現在安裝的是<span style=\"color: red;\"> 2.0 的版本</span>。\n若你想安裝的是 1.x 版本的話，可以改成 <br> `yarn vue init webpack-simple#1.0 my-project` 即可。\n\n然後，Vue-cli 會幫我們建立一個新目錄 `my-project`。\n\n透過 `cd my-project` 切換到新專案目錄後，我們將原本的 `npm install` 改成直接執行 `yarn` 即可。\n<img src=\"/static/img/yarn-vue-4.png\">\n\n\n### 第三步：啟動並執行 vue 專案\n\n最後，直接執行 `yarn run dev` 應該會看到像這樣的畫面。\n<img src=\"/static/img/yarn-vue-5.png\">\n\n打開你的瀏覽器連到 `http://localhost:8080/` 看到 `Hello Vue!` 的字樣就代表成功執行囉！\n<img src=\"/static/img/yarn-vue-6.png\">\n\n","source":"_posts/利用-yarn-安裝-vue-cli.md","raw":"---\nlayout: post\ntitle: 利用 Yarn 安裝 Vue-cli\ndate: 2016-10-13 11:49:07\ncomments: true\ncategories: [vue.js]\ntags: [vue.js]\n---\n\n這兩天 JavaScript 圈子的最大新聞應該就是 Facebook 發布了一套新的 JavaScript 套件管理工具 Yarn，感覺來勢洶洶勢不可擋。\n實際花了一點時間試用，表現的確也比過去 npm 好很多，尤其過去 `npm install` 速度過慢，套件相依衝突的問題，目前在 Yarn 還沒遇到。 即使是剛開始 `yarn run scripts` 無法帶入參數的問題，在發布的第二天也快速地更新 (v0.15.1) 解決了。 👍\n\n<img src=\"/static/img/yarn-logo.png\">\n\n有關 Yarn 介紹的部分，已經有其他前輩分享了，推薦可以看看這篇 [取代 npm 的新利器 Yarn](https://medium.com/@jackypan1989/%E5%8F%96%E4%BB%A3-npm-%E7%9A%84%E6%96%B0%E5%88%A9%E5%99%A8-yarn-7d97f2f409b9#.pu0jrdcc4)。\n\n既然 Yarn 號稱可以用來取代 npm，那麼身為 Vue 的愛好者，也想馬上來試試 [Vue-cli](https://github.com/vuejs/vue-cli) 這套 Vue 的樣板工具包是否也可以透過 yarn 來單獨執行。\n\n<del>既然要取代 npm，那麼第一件事情就是把 npm 整包幹掉</del>，關於刪掉 npm modules 的過程我是參考 stackoverflow 的這篇:\n[Command to remove all npm modules globally?](http://stackoverflow.com/questions/9283472/command-to-remove-all-npm-modules-globally)，但實際上 Yarn 與 npm 是可以和平共存的，不一定要把 npm 幹掉才能跑 Yarn ，這裡只是想簡單做個試驗，啾咪 ^.<\n\n然後安裝 Yarn。 執行 `curl -o- -L https://yarnpkg.com/install.sh | bash` 即可。\n\n<hr>\n\n### 第一步：安裝 vue-cli\n\n很簡單，把原本的  `npm install -g vue-cli` 改成 `yarn global add vue-cli` 就可以了。執行的時候像這樣：\n<img src=\"/static/img/yarn-vue-1.png\">\n\n而安裝完畢後，執行 `yarn vue` 應該可以看到這樣的畫面。\n<img src=\"/static/img/yarn-vue-2.png\">\n\n每執行完一個指令還會告訴你它跑了多久喔<del>，非常囂張 (誤)</del>。\n\n\n### 第二步：初始化 Vue 專案\n\n接著，就來初始化我們的 Vue 專案。 Vue-cli 這個 scaffolding 工具官方目前提供了幾種 template 讓開發者自行選擇，\n像是大家常見的 webpack、browserify 都有。當然也可以挑選什麼都沒有的 simple: 就是最基本的 Vue 專案這樣。\n如果想更詳細了解各種 template 細節的話，可以到 vue-templates 的 [Repo](https://github.com/vuejs-templates) 去看。\n\n這裡我就選擇拿「[webpack-simple](https://github.com/vuejs-templates/webpack-simple)」當範例。\n\n執行 `yarn vue init webpack-simple my-project`\n<img src=\"/static/img/yarn-vue-3.png\">\n\n因為 VueJS 目前已經發佈至 2.0 版了，所以你會看到 Vue-cli 很貼心地提醒你現在安裝的是<span style=\"color: red;\"> 2.0 的版本</span>。\n若你想安裝的是 1.x 版本的話，可以改成 <br> `yarn vue init webpack-simple#1.0 my-project` 即可。\n\n然後，Vue-cli 會幫我們建立一個新目錄 `my-project`。\n\n透過 `cd my-project` 切換到新專案目錄後，我們將原本的 `npm install` 改成直接執行 `yarn` 即可。\n<img src=\"/static/img/yarn-vue-4.png\">\n\n\n### 第三步：啟動並執行 vue 專案\n\n最後，直接執行 `yarn run dev` 應該會看到像這樣的畫面。\n<img src=\"/static/img/yarn-vue-5.png\">\n\n打開你的瀏覽器連到 `http://localhost:8080/` 看到 `Hello Vue!` 的字樣就代表成功執行囉！\n<img src=\"/static/img/yarn-vue-6.png\">\n\n","slug":"利用-yarn-安裝-vue-cli","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjox001t2kt420ljmi1o","content":"<p>這兩天 JavaScript 圈子的最大新聞應該就是 Facebook 發布了一套新的 JavaScript 套件管理工具 Yarn，感覺來勢洶洶勢不可擋。\n實際花了一點時間試用，表現的確也比過去 npm 好很多，尤其過去 <code>npm install</code> 速度過慢，套件相依衝突的問題，目前在 Yarn 還沒遇到。 即使是剛開始 <code>yarn run scripts</code> 無法帶入參數的問題，在發布的第二天也快速地更新 (v0.15.1) 解決了。 👍</p>\n<p><img src=\"/static/img/yarn-logo.png\"></p>\n<p>有關 Yarn 介紹的部分，已經有其他前輩分享了，推薦可以看看這篇 <a href=\"https://medium.com/@jackypan1989/%E5%8F%96%E4%BB%A3-npm-%E7%9A%84%E6%96%B0%E5%88%A9%E5%99%A8-yarn-7d97f2f409b9#.pu0jrdcc4\" target=\"_blank\" rel=\"external\">取代 npm 的新利器 Yarn</a>。</p>\n<p>既然 Yarn 號稱可以用來取代 npm，那麼身為 Vue 的愛好者，也想馬上來試試 <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"external\">Vue-cli</a> 這套 Vue 的樣板工具包是否也可以透過 yarn 來單獨執行。</p>\n<p><del>既然要取代 npm，那麼第一件事情就是把 npm 整包幹掉</del>，關於刪掉 npm modules 的過程我是參考 stackoverflow 的這篇:\n<a href=\"http://stackoverflow.com/questions/9283472/command-to-remove-all-npm-modules-globally\" target=\"_blank\" rel=\"external\">Command to remove all npm modules globally?</a>，但實際上 Yarn 與 npm 是可以和平共存的，不一定要把 npm 幹掉才能跑 Yarn ，這裡只是想簡單做個試驗，啾咪 ^.&lt;</p>\n<p>然後安裝 Yarn。 執行 <code>curl -o- -L https://yarnpkg.com/install.sh | bash</code> 即可。</p>\n<hr>\n\n<h3 id=\"第一步：安裝-vue-cli\"><a href=\"#第一步：安裝-vue-cli\" class=\"headerlink\" title=\"第一步：安裝 vue-cli\"></a>第一步：安裝 vue-cli</h3><p>很簡單，把原本的  <code>npm install -g vue-cli</code> 改成 <code>yarn global add vue-cli</code> 就可以了。執行的時候像這樣：\n<img src=\"/static/img/yarn-vue-1.png\"></p>\n<p>而安裝完畢後，執行 <code>yarn vue</code> 應該可以看到這樣的畫面。\n<img src=\"/static/img/yarn-vue-2.png\"></p>\n<p>每執行完一個指令還會告訴你它跑了多久喔<del>，非常囂張 (誤)</del>。</p>\n<h3 id=\"第二步：初始化-Vue-專案\"><a href=\"#第二步：初始化-Vue-專案\" class=\"headerlink\" title=\"第二步：初始化 Vue 專案\"></a>第二步：初始化 Vue 專案</h3><p>接著，就來初始化我們的 Vue 專案。 Vue-cli 這個 scaffolding 工具官方目前提供了幾種 template 讓開發者自行選擇，\n像是大家常見的 webpack、browserify 都有。當然也可以挑選什麼都沒有的 simple: 就是最基本的 Vue 專案這樣。\n如果想更詳細了解各種 template 細節的話，可以到 vue-templates 的 <a href=\"https://github.com/vuejs-templates\" target=\"_blank\" rel=\"external\">Repo</a> 去看。</p>\n<p>這裡我就選擇拿「<a href=\"https://github.com/vuejs-templates/webpack-simple\" target=\"_blank\" rel=\"external\">webpack-simple</a>」當範例。</p>\n<p>執行 <code>yarn vue init webpack-simple my-project</code>\n<img src=\"/static/img/yarn-vue-3.png\"></p>\n<p>因為 VueJS 目前已經發佈至 2.0 版了，所以你會看到 Vue-cli 很貼心地提醒你現在安裝的是<span style=\"color: red;\"> 2.0 的版本</span>。\n若你想安裝的是 1.x 版本的話，可以改成 <br> <code>yarn vue init webpack-simple#1.0 my-project</code> 即可。</p>\n<p>然後，Vue-cli 會幫我們建立一個新目錄 <code>my-project</code>。</p>\n<p>透過 <code>cd my-project</code> 切換到新專案目錄後，我們將原本的 <code>npm install</code> 改成直接執行 <code>yarn</code> 即可。\n<img src=\"/static/img/yarn-vue-4.png\"></p>\n<h3 id=\"第三步：啟動並執行-vue-專案\"><a href=\"#第三步：啟動並執行-vue-專案\" class=\"headerlink\" title=\"第三步：啟動並執行 vue 專案\"></a>第三步：啟動並執行 vue 專案</h3><p>最後，直接執行 <code>yarn run dev</code> 應該會看到像這樣的畫面。\n<img src=\"/static/img/yarn-vue-5.png\"></p>\n<p>打開你的瀏覽器連到 <code>http://localhost:8080/</code> 看到 <code>Hello Vue!</code> 的字樣就代表成功執行囉！\n<img src=\"/static/img/yarn-vue-6.png\"></p>\n","excerpt":"","more":"<p>這兩天 JavaScript 圈子的最大新聞應該就是 Facebook 發布了一套新的 JavaScript 套件管理工具 Yarn，感覺來勢洶洶勢不可擋。\n實際花了一點時間試用，表現的確也比過去 npm 好很多，尤其過去 <code>npm install</code> 速度過慢，套件相依衝突的問題，目前在 Yarn 還沒遇到。 即使是剛開始 <code>yarn run scripts</code> 無法帶入參數的問題，在發布的第二天也快速地更新 (v0.15.1) 解決了。 👍</p>\n<p><img src=\"/static/img/yarn-logo.png\"></p>\n<p>有關 Yarn 介紹的部分，已經有其他前輩分享了，推薦可以看看這篇 <a href=\"https://medium.com/@jackypan1989/%E5%8F%96%E4%BB%A3-npm-%E7%9A%84%E6%96%B0%E5%88%A9%E5%99%A8-yarn-7d97f2f409b9#.pu0jrdcc4\">取代 npm 的新利器 Yarn</a>。</p>\n<p>既然 Yarn 號稱可以用來取代 npm，那麼身為 Vue 的愛好者，也想馬上來試試 <a href=\"https://github.com/vuejs/vue-cli\">Vue-cli</a> 這套 Vue 的樣板工具包是否也可以透過 yarn 來單獨執行。</p>\n<p><del>既然要取代 npm，那麼第一件事情就是把 npm 整包幹掉</del>，關於刪掉 npm modules 的過程我是參考 stackoverflow 的這篇:\n<a href=\"http://stackoverflow.com/questions/9283472/command-to-remove-all-npm-modules-globally\">Command to remove all npm modules globally?</a>，但實際上 Yarn 與 npm 是可以和平共存的，不一定要把 npm 幹掉才能跑 Yarn ，這裡只是想簡單做個試驗，啾咪 ^.&lt;</p>\n<p>然後安裝 Yarn。 執行 <code>curl -o- -L https://yarnpkg.com/install.sh | bash</code> 即可。</p>\n<hr>\n\n<h3 id=\"第一步：安裝-vue-cli\"><a href=\"#第一步：安裝-vue-cli\" class=\"headerlink\" title=\"第一步：安裝 vue-cli\"></a>第一步：安裝 vue-cli</h3><p>很簡單，把原本的  <code>npm install -g vue-cli</code> 改成 <code>yarn global add vue-cli</code> 就可以了。執行的時候像這樣：\n<img src=\"/static/img/yarn-vue-1.png\"></p>\n<p>而安裝完畢後，執行 <code>yarn vue</code> 應該可以看到這樣的畫面。\n<img src=\"/static/img/yarn-vue-2.png\"></p>\n<p>每執行完一個指令還會告訴你它跑了多久喔<del>，非常囂張 (誤)</del>。</p>\n<h3 id=\"第二步：初始化-Vue-專案\"><a href=\"#第二步：初始化-Vue-專案\" class=\"headerlink\" title=\"第二步：初始化 Vue 專案\"></a>第二步：初始化 Vue 專案</h3><p>接著，就來初始化我們的 Vue 專案。 Vue-cli 這個 scaffolding 工具官方目前提供了幾種 template 讓開發者自行選擇，\n像是大家常見的 webpack、browserify 都有。當然也可以挑選什麼都沒有的 simple: 就是最基本的 Vue 專案這樣。\n如果想更詳細了解各種 template 細節的話，可以到 vue-templates 的 <a href=\"https://github.com/vuejs-templates\">Repo</a> 去看。</p>\n<p>這裡我就選擇拿「<a href=\"https://github.com/vuejs-templates/webpack-simple\">webpack-simple</a>」當範例。</p>\n<p>執行 <code>yarn vue init webpack-simple my-project</code>\n<img src=\"/static/img/yarn-vue-3.png\"></p>\n<p>因為 VueJS 目前已經發佈至 2.0 版了，所以你會看到 Vue-cli 很貼心地提醒你現在安裝的是<span style=\"color: red;\"> 2.0 的版本</span>。\n若你想安裝的是 1.x 版本的話，可以改成 <br> <code>yarn vue init webpack-simple#1.0 my-project</code> 即可。</p>\n<p>然後，Vue-cli 會幫我們建立一個新目錄 <code>my-project</code>。</p>\n<p>透過 <code>cd my-project</code> 切換到新專案目錄後，我們將原本的 <code>npm install</code> 改成直接執行 <code>yarn</code> 即可。\n<img src=\"/static/img/yarn-vue-4.png\"></p>\n<h3 id=\"第三步：啟動並執行-vue-專案\"><a href=\"#第三步：啟動並執行-vue-專案\" class=\"headerlink\" title=\"第三步：啟動並執行 vue 專案\"></a>第三步：啟動並執行 vue 專案</h3><p>最後，直接執行 <code>yarn run dev</code> 應該會看到像這樣的畫面。\n<img src=\"/static/img/yarn-vue-5.png\"></p>\n<p>打開你的瀏覽器連到 <code>http://localhost:8080/</code> 看到 <code>Hello Vue!</code> 的字樣就代表成功執行囉！\n<img src=\"/static/img/yarn-vue-6.png\"></p>\n"},{"layout":"post","title":"透過 Vue-CLI 建置專案時，自動切換 devtools 的 debug 環境","date":"2016-12-08T03:40:00.000Z","comments":1,"_content":"\nVue 提供了相當好用的 debug 工具 (Chrome 套件)， [Vue.js devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)，在安裝之後當你用 Chrome 開啟 Vue 專案時，Chrome 的開發者工具會多出一個 Vue 的 Tab，然後把 Vue Instance 裡的屬性通通列出來：\n\n<img src=\"/static/img/vue-tool-screenshot.png\">\n\n在預設開啟 debug mode 時，按下 Vue devtools 的 icon 你會看到這樣畫面：\n<img src=\"/static/img/vue-tool-on.png\">\n\n這時候打開 Chrome 開發者工具， vue 專案中所有 Instance 的屬性資料通通一覽無遺。\n\n<hr>\n\n但是當專案完成要上線的時候，就應該要將 debug mode 關閉，尤其在屬性可能會存有較為機敏性資料的時候。\n關閉的方式也很簡單，加上這兩行就可以了：\n\n``` javascript\nVue.config.debug = false;\nVue.config.devtools = false;\n```\n關閉後，再開啟 Vue 專案，雖然 icon 偵測到 Vue.js 會亮起來，但是你會看到這樣訊息：\n<img src=\"/static/img/vue-tool-disabled.png\">\n\n這時候 Chrome 開發者工具的 Vue tab 就不會出現了。\n\n<hr>\n\n但是，在建置專案的時候，常常會忘記手動調整 debug mode，導致上線的專案會是開啟 debug mode 的版本，\n是否可以在 webpack 啟動的時候自動判斷目前環境呢？\n\n以 Vue-CLI 提供的 package.json 為例，他提供了兩個預設的 scripts， dev 用在開發專案時使用，而 build 則用於建置 production 使用：\n<img src=\"/static/img/vue-package-json.png\">\n\n圖中可以看到，在 build 模式下多了 `NODE_ENV=production` 這個參數。\n\n這時候我們就可以利用 `NODE_ENV` 這個參數來判斷使否開啟 debug mode：\n\n``` javascript\nimport Vue from 'vue'\nimport App from './App.vue'\n\nconst isDebug_mode = process.env.NODE_ENV !== 'production';\n\nVue.config.debug = isDebug_mode;\nVue.config.devtools = isDebug_mode;\n```\n\n這樣 `Vue.config.debug` 的版本就會自動依照執行階段的不同而有不同的設定了。\n\n\n","source":"_posts/透過-VueCLI-建置專案時，自動切換-devtools-的-debug-環境.md","raw":"---\nlayout: post\ntitle: 透過 Vue-CLI 建置專案時，自動切換 devtools 的 debug 環境\ndate: 2016-12-08 11:40:00\ncomments: true\ncategories: [vue.js]\ntags: [vue.js, webpack, devtools]\n---\n\nVue 提供了相當好用的 debug 工具 (Chrome 套件)， [Vue.js devtools](https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd)，在安裝之後當你用 Chrome 開啟 Vue 專案時，Chrome 的開發者工具會多出一個 Vue 的 Tab，然後把 Vue Instance 裡的屬性通通列出來：\n\n<img src=\"/static/img/vue-tool-screenshot.png\">\n\n在預設開啟 debug mode 時，按下 Vue devtools 的 icon 你會看到這樣畫面：\n<img src=\"/static/img/vue-tool-on.png\">\n\n這時候打開 Chrome 開發者工具， vue 專案中所有 Instance 的屬性資料通通一覽無遺。\n\n<hr>\n\n但是當專案完成要上線的時候，就應該要將 debug mode 關閉，尤其在屬性可能會存有較為機敏性資料的時候。\n關閉的方式也很簡單，加上這兩行就可以了：\n\n``` javascript\nVue.config.debug = false;\nVue.config.devtools = false;\n```\n關閉後，再開啟 Vue 專案，雖然 icon 偵測到 Vue.js 會亮起來，但是你會看到這樣訊息：\n<img src=\"/static/img/vue-tool-disabled.png\">\n\n這時候 Chrome 開發者工具的 Vue tab 就不會出現了。\n\n<hr>\n\n但是，在建置專案的時候，常常會忘記手動調整 debug mode，導致上線的專案會是開啟 debug mode 的版本，\n是否可以在 webpack 啟動的時候自動判斷目前環境呢？\n\n以 Vue-CLI 提供的 package.json 為例，他提供了兩個預設的 scripts， dev 用在開發專案時使用，而 build 則用於建置 production 使用：\n<img src=\"/static/img/vue-package-json.png\">\n\n圖中可以看到，在 build 模式下多了 `NODE_ENV=production` 這個參數。\n\n這時候我們就可以利用 `NODE_ENV` 這個參數來判斷使否開啟 debug mode：\n\n``` javascript\nimport Vue from 'vue'\nimport App from './App.vue'\n\nconst isDebug_mode = process.env.NODE_ENV !== 'production';\n\nVue.config.debug = isDebug_mode;\nVue.config.devtools = isDebug_mode;\n```\n\n這樣 `Vue.config.debug` 的版本就會自動依照執行階段的不同而有不同的設定了。\n\n\n","slug":"透過-VueCLI-建置專案時，自動切換-devtools-的-debug-環境","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjoz001y2kt46j7bmu1m","content":"<p>Vue 提供了相當好用的 debug 工具 (Chrome 套件)， <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\" target=\"_blank\" rel=\"external\">Vue.js devtools</a>，在安裝之後當你用 Chrome 開啟 Vue 專案時，Chrome 的開發者工具會多出一個 Vue 的 Tab，然後把 Vue Instance 裡的屬性通通列出來：</p>\n<p><img src=\"/static/img/vue-tool-screenshot.png\"></p>\n<p>在預設開啟 debug mode 時，按下 Vue devtools 的 icon 你會看到這樣畫面：\n<img src=\"/static/img/vue-tool-on.png\"></p>\n<p>這時候打開 Chrome 開發者工具， vue 專案中所有 Instance 的屬性資料通通一覽無遺。</p>\n<hr>\n\n<p>但是當專案完成要上線的時候，就應該要將 debug mode 關閉，尤其在屬性可能會存有較為機敏性資料的時候。\n關閉的方式也很簡單，加上這兩行就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.config.debug = <span class=\"literal\">false</span>;</div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">false</span>;</div></pre></td></tr></table></figure>\n<p>關閉後，再開啟 Vue 專案，雖然 icon 偵測到 Vue.js 會亮起來，但是你會看到這樣訊息：\n<img src=\"/static/img/vue-tool-disabled.png\"></p>\n<p>這時候 Chrome 開發者工具的 Vue tab 就不會出現了。</p>\n<hr>\n\n<p>但是，在建置專案的時候，常常會忘記手動調整 debug mode，導致上線的專案會是開啟 debug mode 的版本，\n是否可以在 webpack 啟動的時候自動判斷目前環境呢？</p>\n<p>以 Vue-CLI 提供的 package.json 為例，他提供了兩個預設的 scripts， dev 用在開發專案時使用，而 build 則用於建置 production 使用：\n<img src=\"/static/img/vue-package-json.png\"></p>\n<p>圖中可以看到，在 build 模式下多了 <code>NODE_ENV=production</code> 這個參數。</p>\n<p>這時候我們就可以利用 <code>NODE_ENV</code> 這個參數來判斷使否開啟 debug mode：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> isDebug_mode = process.env.NODE_ENV !== <span class=\"string\">'production'</span>;</div><div class=\"line\"></div><div class=\"line\">Vue.config.debug = isDebug_mode;</div><div class=\"line\">Vue.config.devtools = isDebug_mode;</div></pre></td></tr></table></figure>\n<p>這樣 <code>Vue.config.debug</code> 的版本就會自動依照執行階段的不同而有不同的設定了。</p>\n","excerpt":"","more":"<p>Vue 提供了相當好用的 debug 工具 (Chrome 套件)， <a href=\"https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd\">Vue.js devtools</a>，在安裝之後當你用 Chrome 開啟 Vue 專案時，Chrome 的開發者工具會多出一個 Vue 的 Tab，然後把 Vue Instance 裡的屬性通通列出來：</p>\n<p><img src=\"/static/img/vue-tool-screenshot.png\"></p>\n<p>在預設開啟 debug mode 時，按下 Vue devtools 的 icon 你會看到這樣畫面：\n<img src=\"/static/img/vue-tool-on.png\"></p>\n<p>這時候打開 Chrome 開發者工具， vue 專案中所有 Instance 的屬性資料通通一覽無遺。</p>\n<hr>\n\n<p>但是當專案完成要上線的時候，就應該要將 debug mode 關閉，尤其在屬性可能會存有較為機敏性資料的時候。\n關閉的方式也很簡單，加上這兩行就可以了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Vue.config.debug = <span class=\"literal\">false</span>;</div><div class=\"line\">Vue.config.devtools = <span class=\"literal\">false</span>;</div></pre></td></tr></table></figure>\n<p>關閉後，再開啟 Vue 專案，雖然 icon 偵測到 Vue.js 會亮起來，但是你會看到這樣訊息：\n<img src=\"/static/img/vue-tool-disabled.png\"></p>\n<p>這時候 Chrome 開發者工具的 Vue tab 就不會出現了。</p>\n<hr>\n\n<p>但是，在建置專案的時候，常常會忘記手動調整 debug mode，導致上線的專案會是開啟 debug mode 的版本，\n是否可以在 webpack 啟動的時候自動判斷目前環境呢？</p>\n<p>以 Vue-CLI 提供的 package.json 為例，他提供了兩個預設的 scripts， dev 用在開發專案時使用，而 build 則用於建置 production 使用：\n<img src=\"/static/img/vue-package-json.png\"></p>\n<p>圖中可以看到，在 build 模式下多了 <code>NODE_ENV=production</code> 這個參數。</p>\n<p>這時候我們就可以利用 <code>NODE_ENV</code> 這個參數來判斷使否開啟 debug mode：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></div><div class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> isDebug_mode = process.env.NODE_ENV !== <span class=\"string\">'production'</span>;</div><div class=\"line\"></div><div class=\"line\">Vue.config.debug = isDebug_mode;</div><div class=\"line\">Vue.config.devtools = isDebug_mode;</div></pre></td></tr></table></figure>\n<p>這樣 <code>Vue.config.debug</code> 的版本就會自動依照執行階段的不同而有不同的設定了。</p>\n"},{"layout":"post","title":"[筆記] 透過 Composition Events 增強非拉丁語系輸入法對輸入框的支援","date":"2016-10-11T04:57:30.000Z","comments":1,"_content":"\n最近在爬 Vue 的原始碼的時候，意外發現兩個沒看過的 event：`compositionstart` 與 `compositionend`。 查了一下 MDN 才發現這些叫做「[Composition Events](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent \"Composition Events\")」的 event 是從 DOM Level 3 之後才新增的。\n\n介紹 Composition Events 之前先來談談 DOM API 過去對輸入框偵測變化的幾個方式。\n\n一般來說，常見的表單輸入框如: `<input type=\"text\">` 如果要動態監聽輸入框的文字變化時，\n大多會透過監聽 `keydown`、`keypress`、`keyup` 等鍵盤事件來判斷 value 是否變動，但如果是透過複製貼上之類的操作，就無法透過鍵盤事件來判斷。\n\n而即使是 `change` 事件則是要在使用者改變內容，且<span style=\"color: red;\">焦點離開輸入框的前一刻才會被觸發</span>。\n所以後來有了 `input` 事件， input 事件會在<span style=\"color: red;\">輸入框的內容被改變時即時觸發</span>，確實也解決了過去在 onChange 以及鍵盤相關事件帶來的不少問題。\n\n新的問題來了！\n\n通常像這樣的搜尋框，我們會用類似 autocomplete 的方式給使用者搜尋建議 (以 google 為例)：\n<img src=\"/static/img/google-autocompleted.png\">\n\n如上圖，在輸入中文的時候，通常會需要透過注音之類的輸入法來做拼字，但是在大部分的情況下，自動給「注音符號」或是「拼音文字」搜尋建議是沒有太大意義的。\n\n回到主題。這個時候就需要透過 **Composition Events** 來為輸入框做增強。\n透過 Composition Events 我們可以觀察使用者在輸入框內開啟輸入法 (Input Method Editor, IME) 時，組字或選字的狀態。\n\n\nComposition Events 提供三個事件給開發者監聽：分別是 `compositionstart` 、 `compositionend` ，以及 `compositionupdate`。\n\n* `compositionstart`: 輸入框內開啟輸入法，且正在拼字時觸發。\n* `compositionupdate`:輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。\n* `compositionend`: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。\n\n<p></p>\n執行的時候像這樣：\n<img src=\"/static/img/composition-demo.png\">\n\n可以看到，如果要確認使用者輸入完成並送出文字時，可以透過 `compositionend` 來做最後確認。<br>\n附上 JSBin Demo: http://jsbin.com/mofepimiqo/1/edit?js,console,output\n\n最後則是大家都很關心的瀏覽器支援度。以目前來說，mobile 平台上可能還不太 ok，但是 Desktop 平台上表現看起來相當不錯，可以大膽地使用囉。\n<img src=\"/static/img/compositionEvent-compatibility.png\">\n\n<p class=\"no-space\" style=\"margin-bottom:0\">參考資料：</p>\n* [用 Composition Event 改進 CodeMirror 對輸入法的支援](http://blog.zhusee.in/post/146553/enhance-ime-support-of-codemirror-with-composition-events)\n* [MDN: Composition Events](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent \"Composition Events\")","source":"_posts/筆記-透過-Composition-Events-增強非拉丁語系輸入法對輸入框的支援.md","raw":"---\nlayout: post\ntitle: '[筆記] 透過 Composition Events 增強非拉丁語系輸入法對輸入框的支援'\ndate: 2016-10-11 12:57:30\ncomments: true\ncategories: [HTML]\ntags: [html, javascript, events]\n---\n\n最近在爬 Vue 的原始碼的時候，意外發現兩個沒看過的 event：`compositionstart` 與 `compositionend`。 查了一下 MDN 才發現這些叫做「[Composition Events](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent \"Composition Events\")」的 event 是從 DOM Level 3 之後才新增的。\n\n介紹 Composition Events 之前先來談談 DOM API 過去對輸入框偵測變化的幾個方式。\n\n一般來說，常見的表單輸入框如: `<input type=\"text\">` 如果要動態監聽輸入框的文字變化時，\n大多會透過監聽 `keydown`、`keypress`、`keyup` 等鍵盤事件來判斷 value 是否變動，但如果是透過複製貼上之類的操作，就無法透過鍵盤事件來判斷。\n\n而即使是 `change` 事件則是要在使用者改變內容，且<span style=\"color: red;\">焦點離開輸入框的前一刻才會被觸發</span>。\n所以後來有了 `input` 事件， input 事件會在<span style=\"color: red;\">輸入框的內容被改變時即時觸發</span>，確實也解決了過去在 onChange 以及鍵盤相關事件帶來的不少問題。\n\n新的問題來了！\n\n通常像這樣的搜尋框，我們會用類似 autocomplete 的方式給使用者搜尋建議 (以 google 為例)：\n<img src=\"/static/img/google-autocompleted.png\">\n\n如上圖，在輸入中文的時候，通常會需要透過注音之類的輸入法來做拼字，但是在大部分的情況下，自動給「注音符號」或是「拼音文字」搜尋建議是沒有太大意義的。\n\n回到主題。這個時候就需要透過 **Composition Events** 來為輸入框做增強。\n透過 Composition Events 我們可以觀察使用者在輸入框內開啟輸入法 (Input Method Editor, IME) 時，組字或選字的狀態。\n\n\nComposition Events 提供三個事件給開發者監聽：分別是 `compositionstart` 、 `compositionend` ，以及 `compositionupdate`。\n\n* `compositionstart`: 輸入框內開啟輸入法，且正在拼字時觸發。\n* `compositionupdate`:輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。\n* `compositionend`: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。\n\n<p></p>\n執行的時候像這樣：\n<img src=\"/static/img/composition-demo.png\">\n\n可以看到，如果要確認使用者輸入完成並送出文字時，可以透過 `compositionend` 來做最後確認。<br>\n附上 JSBin Demo: http://jsbin.com/mofepimiqo/1/edit?js,console,output\n\n最後則是大家都很關心的瀏覽器支援度。以目前來說，mobile 平台上可能還不太 ok，但是 Desktop 平台上表現看起來相當不錯，可以大膽地使用囉。\n<img src=\"/static/img/compositionEvent-compatibility.png\">\n\n<p class=\"no-space\" style=\"margin-bottom:0\">參考資料：</p>\n* [用 Composition Event 改進 CodeMirror 對輸入法的支援](http://blog.zhusee.in/post/146553/enhance-ime-support-of-codemirror-with-composition-events)\n* [MDN: Composition Events](https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent \"Composition Events\")","slug":"筆記-透過-Composition-Events-增強非拉丁語系輸入法對輸入框的支援","published":1,"updated":"2017-03-15T09:59:34.000Z","photos":[],"link":"","_id":"cj0assjp000212kt48tulgwxh","content":"<p>最近在爬 Vue 的原始碼的時候，意外發現兩個沒看過的 event：<code>compositionstart</code> 與 <code>compositionend</code>。 查了一下 MDN 才發現這些叫做「<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\" title=\"Composition Events\" target=\"_blank\" rel=\"external\">Composition Events</a>」的 event 是從 DOM Level 3 之後才新增的。</p>\n<p>介紹 Composition Events 之前先來談談 DOM API 過去對輸入框偵測變化的幾個方式。</p>\n<p>一般來說，常見的表單輸入框如: <code>&lt;input type=&quot;text&quot;&gt;</code> 如果要動態監聽輸入框的文字變化時，\n大多會透過監聽 <code>keydown</code>、<code>keypress</code>、<code>keyup</code> 等鍵盤事件來判斷 value 是否變動，但如果是透過複製貼上之類的操作，就無法透過鍵盤事件來判斷。</p>\n<p>而即使是 <code>change</code> 事件則是要在使用者改變內容，且<span style=\"color: red;\">焦點離開輸入框的前一刻才會被觸發</span>。\n所以後來有了 <code>input</code> 事件， input 事件會在<span style=\"color: red;\">輸入框的內容被改變時即時觸發</span>，確實也解決了過去在 onChange 以及鍵盤相關事件帶來的不少問題。</p>\n<p>新的問題來了！</p>\n<p>通常像這樣的搜尋框，我們會用類似 autocomplete 的方式給使用者搜尋建議 (以 google 為例)：\n<img src=\"/static/img/google-autocompleted.png\"></p>\n<p>如上圖，在輸入中文的時候，通常會需要透過注音之類的輸入法來做拼字，但是在大部分的情況下，自動給「注音符號」或是「拼音文字」搜尋建議是沒有太大意義的。</p>\n<p>回到主題。這個時候就需要透過 <strong>Composition Events</strong> 來為輸入框做增強。\n透過 Composition Events 我們可以觀察使用者在輸入框內開啟輸入法 (Input Method Editor, IME) 時，組字或選字的狀態。</p>\n<p>Composition Events 提供三個事件給開發者監聽：分別是 <code>compositionstart</code> 、 <code>compositionend</code> ，以及 <code>compositionupdate</code>。</p>\n<ul>\n<li><code>compositionstart</code>: 輸入框內開啟輸入法，且正在拼字時觸發。</li>\n<li><code>compositionupdate</code>:輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。</li>\n<li><code>compositionend</code>: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。</li>\n</ul>\n<p></p><p></p>\n執行的時候像這樣：\n<img src=\"/static/img/composition-demo.png\"><p></p>\n<p>可以看到，如果要確認使用者輸入完成並送出文字時，可以透過 <code>compositionend</code> 來做最後確認。<br>\n附上 JSBin Demo: <a href=\"http://jsbin.com/mofepimiqo/1/edit?js,console,output\" target=\"_blank\" rel=\"external\">http://jsbin.com/mofepimiqo/1/edit?js,console,output</a></p>\n<p>最後則是大家都很關心的瀏覽器支援度。以目前來說，mobile 平台上可能還不太 ok，但是 Desktop 平台上表現看起來相當不錯，可以大膽地使用囉。\n<img src=\"/static/img/compositionEvent-compatibility.png\"></p>\n<p></p><p class=\"no-space\" style=\"margin-bottom:0\">參考資料：</p><p></p>\n<ul>\n<li><a href=\"http://blog.zhusee.in/post/146553/enhance-ime-support-of-codemirror-with-composition-events\" target=\"_blank\" rel=\"external\">用 Composition Event 改進 CodeMirror 對輸入法的支援</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\" title=\"Composition Events\" target=\"_blank\" rel=\"external\">MDN: Composition Events</a></li>\n</ul>\n","excerpt":"","more":"<p>最近在爬 Vue 的原始碼的時候，意外發現兩個沒看過的 event：<code>compositionstart</code> 與 <code>compositionend</code>。 查了一下 MDN 才發現這些叫做「<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\" title=\"Composition Events\">Composition Events</a>」的 event 是從 DOM Level 3 之後才新增的。</p>\n<p>介紹 Composition Events 之前先來談談 DOM API 過去對輸入框偵測變化的幾個方式。</p>\n<p>一般來說，常見的表單輸入框如: <code>&lt;input type=&quot;text&quot;&gt;</code> 如果要動態監聽輸入框的文字變化時，\n大多會透過監聽 <code>keydown</code>、<code>keypress</code>、<code>keyup</code> 等鍵盤事件來判斷 value 是否變動，但如果是透過複製貼上之類的操作，就無法透過鍵盤事件來判斷。</p>\n<p>而即使是 <code>change</code> 事件則是要在使用者改變內容，且<span style=\"color: red;\">焦點離開輸入框的前一刻才會被觸發</span>。\n所以後來有了 <code>input</code> 事件， input 事件會在<span style=\"color: red;\">輸入框的內容被改變時即時觸發</span>，確實也解決了過去在 onChange 以及鍵盤相關事件帶來的不少問題。</p>\n<p>新的問題來了！</p>\n<p>通常像這樣的搜尋框，我們會用類似 autocomplete 的方式給使用者搜尋建議 (以 google 為例)：\n<img src=\"/static/img/google-autocompleted.png\"></p>\n<p>如上圖，在輸入中文的時候，通常會需要透過注音之類的輸入法來做拼字，但是在大部分的情況下，自動給「注音符號」或是「拼音文字」搜尋建議是沒有太大意義的。</p>\n<p>回到主題。這個時候就需要透過 <strong>Composition Events</strong> 來為輸入框做增強。\n透過 Composition Events 我們可以觀察使用者在輸入框內開啟輸入法 (Input Method Editor, IME) 時，組字或選字的狀態。</p>\n<p>Composition Events 提供三個事件給開發者監聽：分別是 <code>compositionstart</code> 、 <code>compositionend</code> ，以及 <code>compositionupdate</code>。</p>\n<ul>\n<li><code>compositionstart</code>: 輸入框內開啟輸入法，且正在拼字時觸發。</li>\n<li><code>compositionupdate</code>:輸入框內開啟輸入法，且正在拼字或選字時更改了內容時觸發。</li>\n<li><code>compositionend</code>: 輸入框內開啟輸入法，拼字或選字完成，正要送出至輸入框時觸發。</li>\n</ul>\n<p><p></p>\n執行的時候像這樣：\n<img src=\"/static/img/composition-demo.png\"></p>\n<p>可以看到，如果要確認使用者輸入完成並送出文字時，可以透過 <code>compositionend</code> 來做最後確認。<br>\n附上 JSBin Demo: <a href=\"http://jsbin.com/mofepimiqo/1/edit?js,console,output\">http://jsbin.com/mofepimiqo/1/edit?js,console,output</a></p>\n<p>最後則是大家都很關心的瀏覽器支援度。以目前來說，mobile 平台上可能還不太 ok，但是 Desktop 平台上表現看起來相當不錯，可以大膽地使用囉。\n<img src=\"/static/img/compositionEvent-compatibility.png\"></p>\n<p><p class=\"no-space\" style=\"margin-bottom:0\">參考資料：</p></p>\n<ul>\n<li><a href=\"http://blog.zhusee.in/post/146553/enhance-ime-support-of-codemirror-with-composition-events\">用 Composition Event 改進 CodeMirror 對輸入法的支援</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\" title=\"Composition Events\">MDN: Composition Events</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0assjnu00002kt4x1m03pt2","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjob000c2kt4fz9eaicd"},{"post_id":"cj0assjny00022kt4gw0r83p4","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjoe000i2kt49996c95f"},{"post_id":"cj0assjo200052kt4rbxodey9","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjog000o2kt4q3w3s8de"},{"post_id":"cj0assjo400062kt440lzovw2","category_id":"cj0assjof000k2kt42rc1bp40","_id":"cj0assjoi000u2kt4ehfli85l"},{"post_id":"cj0assjo600072kt4gtj79jwx","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjol00102kt44mf7c6xf"},{"post_id":"cj0assjoj000x2kt4fsijbhl6","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjon00152kt4ujyhuai4"},{"post_id":"cj0assjo9000b2kt4p15yegnw","category_id":"cj0assjof000k2kt42rc1bp40","_id":"cj0assjoo00182kt4b13rm3be"},{"post_id":"cj0assjob000d2kt40vvsqbxk","category_id":"cj0assjof000k2kt42rc1bp40","_id":"cj0assjor001d2kt4hpxha82j"},{"post_id":"cj0assjon00162kt4b3m06lkg","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjos001i2kt4iojrfnzf"},{"post_id":"cj0assjop001a2kt4uyi7brd7","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjot001k2kt4kfrqwsze"},{"post_id":"cj0assjoe000h2kt433xvy1e3","category_id":"cj0assjoo00172kt4yqwx46f8","_id":"cj0assjou001o2kt4cp7ptyog"},{"post_id":"cj0assjoq001c2kt44q89rbai","category_id":"cj0assjof000k2kt42rc1bp40","_id":"cj0assjow001r2kt46egpiy7k"},{"post_id":"cj0assjor001h2kt4wffd1mn5","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjoz001w2kt4drbjy8k6"},{"post_id":"cj0assjoe000j2kt456ilw2qa","category_id":"cj0assjoh000q2kt4yeayg1cp","_id":"cj0assjp0001z2kt4bhxz97hu"},{"post_id":"cj0assjot001m2kt4f62kv7st","category_id":"cj0assjof000k2kt42rc1bp40","_id":"cj0assjp100232kt49602ghvc"},{"post_id":"cj0assjov001q2kt44ijr7qe2","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjp200262kt4knsdpp0q"},{"post_id":"cj0assjof000n2kt426jwuem6","category_id":"cj0assjot001l2kt4mxlkhhny","_id":"cj0assjp300282kt487c5rc3e"},{"post_id":"cj0assjox001t2kt420ljmi1o","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjp3002b2kt4wusjgr5v"},{"post_id":"cj0assjoz001y2kt46j7bmu1m","category_id":"cj0assjo000032kt4xf8qnjtr","_id":"cj0assjp4002c2kt4lh25wmdf"},{"post_id":"cj0assjog000p2kt4uwl7ugmd","category_id":"cj0assjoz001u2kt4ym24jhhi","_id":"cj0assjp5002f2kt4qtlkhgz6"},{"post_id":"cj0assjoh000s2kt49l76t6j5","category_id":"cj0assjp100222kt4his7gpih","_id":"cj0assjp6002h2kt4ou5t760y"},{"post_id":"cj0assjoi000t2kt4ljtisjxs","category_id":"cj0assjp300292kt4t416rbci","_id":"cj0assjp6002l2kt4mg5r7hy9"},{"post_id":"cj0assjok000z2kt4yn6o68a8","category_id":"cj0assjp5002d2kt4iriwcc3k","_id":"cj0assjp6002m2kt4jxyoxobx"},{"post_id":"cj0assjom00142kt4wh8frhar","category_id":"cj0assjp6002k2kt481nkv5a6","_id":"cj0assjp7002r2kt4qsihusz7"},{"post_id":"cj0assjos001j2kt4x17me6cf","category_id":"cj0assjp6002o2kt4c5cbwp6q","_id":"cj0assjp7002u2kt4fcdmif51"},{"post_id":"cj0assjp000212kt48tulgwxh","category_id":"cj0assjp6002k2kt481nkv5a6","_id":"cj0assjp7002w2kt45hjcl4ox"}],"PostTag":[{"post_id":"cj0assjnu00002kt4x1m03pt2","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjo9000a2kt40d6tpl6y"},{"post_id":"cj0assjny00022kt4gw0r83p4","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjoe000g2kt4oexj777c"},{"post_id":"cj0assjo200052kt4rbxodey9","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjof000m2kt46hgmpm1k"},{"post_id":"cj0assjo400062kt440lzovw2","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjok000y2kt45jro6vn9"},{"post_id":"cj0assjo400062kt440lzovw2","tag_id":"cj0assjoh000r2kt4hcqr52ir","_id":"cj0assjol00112kt4ludvfxm1"},{"post_id":"cj0assjo600072kt4gtj79jwx","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjop001b2kt4sgya49h0"},{"post_id":"cj0assjo600072kt4gtj79jwx","tag_id":"cj0assjom00132kt46q5vm73i","_id":"cj0assjor001e2kt4e6nd2hmk"},{"post_id":"cj0assjo9000b2kt4p15yegnw","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjov001p2kt43enpon04"},{"post_id":"cj0assjo9000b2kt4p15yegnw","tag_id":"cj0assjor001g2kt4qnzaaoo0","_id":"cj0assjox001s2kt42fy0d371"},{"post_id":"cj0assjov001q2kt44ijr7qe2","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjoz001x2kt4ix1117cv"},{"post_id":"cj0assjox001t2kt420ljmi1o","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjp000202kt4amjlw729"},{"post_id":"cj0assjob000d2kt40vvsqbxk","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjp200252kt45ey1q69i"},{"post_id":"cj0assjob000d2kt40vvsqbxk","tag_id":"cj0assjoz001v2kt41kulv7zb","_id":"cj0assjp300272kt4u0d0fsf6"},{"post_id":"cj0assjoe000h2kt433xvy1e3","tag_id":"cj0assjp100242kt4pncgvpj2","_id":"cj0assjp5002g2kt45u1hi7ar"},{"post_id":"cj0assjoe000h2kt433xvy1e3","tag_id":"cj0assjp3002a2kt4wor580yd","_id":"cj0assjp6002i2kt4cvdwxmfc"},{"post_id":"cj0assjoe000j2kt456ilw2qa","tag_id":"cj0assjom00132kt46q5vm73i","_id":"cj0assjp6002p2kt4jvnm02rc"},{"post_id":"cj0assjoe000j2kt456ilw2qa","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjp7002q2kt4fp11p67e"},{"post_id":"cj0assjof000n2kt426jwuem6","tag_id":"cj0assjp6002n2kt4t5weoyn4","_id":"cj0assjp8002y2kt49sehebf1"},{"post_id":"cj0assjof000n2kt426jwuem6","tag_id":"cj0assjp7002s2kt4zf1ejoy0","_id":"cj0assjp8002z2kt4kk5doi7s"},{"post_id":"cj0assjof000n2kt426jwuem6","tag_id":"cj0assjp7002v2kt4xawrschw","_id":"cj0assjp800312kt4pbgdbr42"},{"post_id":"cj0assjog000p2kt4uwl7ugmd","tag_id":"cj0assjom00132kt46q5vm73i","_id":"cj0assjp800322kt4rwa2mv3w"},{"post_id":"cj0assjoh000s2kt49l76t6j5","tag_id":"cj0assjp800302kt431pk42uq","_id":"cj0assjp900362kt4c0s36xva"},{"post_id":"cj0assjoh000s2kt49l76t6j5","tag_id":"cj0assjp800332kt4jvg671qu","_id":"cj0assjp900372kt4150ts7eu"},{"post_id":"cj0assjoh000s2kt49l76t6j5","tag_id":"cj0assjp800342kt433g76nnb","_id":"cj0assjp900392kt4wyjdw1q5"},{"post_id":"cj0assjoi000t2kt4ljtisjxs","tag_id":"cj0assjp100242kt4pncgvpj2","_id":"cj0assjp9003a2kt4myam0dpz"},{"post_id":"cj0assjoj000x2kt4fsijbhl6","tag_id":"cj0assjp900382kt4lz5um3kr","_id":"cj0assjpa003d2kt4s4zm9amd"},{"post_id":"cj0assjoj000x2kt4fsijbhl6","tag_id":"cj0assjom00132kt46q5vm73i","_id":"cj0assjpa003e2kt41rwpxitt"},{"post_id":"cj0assjom00142kt4wh8frhar","tag_id":"cj0assjp9003c2kt40r3mqgbk","_id":"cj0assjpa003j2kt4iu3srzsw"},{"post_id":"cj0assjom00142kt4wh8frhar","tag_id":"cj0assjpa003f2kt4qb91d23p","_id":"cj0assjpa003k2kt4j8jlwc11"},{"post_id":"cj0assjom00142kt4wh8frhar","tag_id":"cj0assjpa003g2kt4imxhffzm","_id":"cj0assjpb003m2kt4kc1zr4me"},{"post_id":"cj0assjom00142kt4wh8frhar","tag_id":"cj0assjpa003h2kt4t8ixc42v","_id":"cj0assjpb003n2kt4floyv7bp"},{"post_id":"cj0assjon00162kt4b3m06lkg","tag_id":"cj0assjpa003i2kt4fjyi97s6","_id":"cj0assjpc003p2kt4iu7k1ueo"},{"post_id":"cj0assjon00162kt4b3m06lkg","tag_id":"cj0assjpa003l2kt4stywiokw","_id":"cj0assjpd003q2kt43tb56o7t"},{"post_id":"cj0assjop001a2kt4uyi7brd7","tag_id":"cj0assjpa003i2kt4fjyi97s6","_id":"cj0assjpe003t2kt4lpolwqwa"},{"post_id":"cj0assjop001a2kt4uyi7brd7","tag_id":"cj0assjp7002v2kt4xawrschw","_id":"cj0assjpe003u2kt4x8q4r8sa"},{"post_id":"cj0assjoq001c2kt44q89rbai","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjpf003w2kt4zfjbnrvm"},{"post_id":"cj0assjoq001c2kt44q89rbai","tag_id":"cj0assjpe003s2kt4e6mvfhz0","_id":"cj0assjpf003x2kt4hb6q1o1c"},{"post_id":"cj0assjor001h2kt4wffd1mn5","tag_id":"cj0assjom00132kt46q5vm73i","_id":"cj0assjpg003z2kt42yax5jpq"},{"post_id":"cj0assjor001h2kt4wffd1mn5","tag_id":"cj0assjpf003v2kt446jgvpll","_id":"cj0assjpg00402kt47pwugmtl"},{"post_id":"cj0assjos001j2kt4x17me6cf","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjph00422kt48p9ym4cd"},{"post_id":"cj0assjos001j2kt4x17me6cf","tag_id":"cj0assjp7002v2kt4xawrschw","_id":"cj0assjph00432kt4vtf3vntn"},{"post_id":"cj0assjot001m2kt4f62kv7st","tag_id":"cj0assjof000l2kt4nvqzbwxu","_id":"cj0assjph00452kt4urwrlwlq"},{"post_id":"cj0assjot001m2kt4f62kv7st","tag_id":"cj0assjpg00412kt4mbmrcznx","_id":"cj0assjph00462kt4btgd6mcf"},{"post_id":"cj0assjoz001y2kt46j7bmu1m","tag_id":"cj0assjo100042kt4q6wv0864","_id":"cj0assjpi00492kt4efg70p7s"},{"post_id":"cj0assjoz001y2kt46j7bmu1m","tag_id":"cj0assjph00442kt4mv4x97uh","_id":"cj0assjpi004a2kt4rvfx8tcm"},{"post_id":"cj0assjoz001y2kt46j7bmu1m","tag_id":"cj0assjph00472kt44p1nhyhp","_id":"cj0assjpi004c2kt41flcwg97"},{"post_id":"cj0assjp000212kt48tulgwxh","tag_id":"cj0assjp9003c2kt40r3mqgbk","_id":"cj0assjpj004e2kt4hq36w35w"},{"post_id":"cj0assjp000212kt48tulgwxh","tag_id":"cj0assjp100242kt4pncgvpj2","_id":"cj0assjpj004f2kt48m1vl0or"},{"post_id":"cj0assjp000212kt48tulgwxh","tag_id":"cj0assjpi004d2kt4mor8ouc1","_id":"cj0assjpj004g2kt4qiw9mbia"}],"Tag":[{"name":"vue.js","_id":"cj0assjo100042kt4q6wv0864"},{"name":"google map","_id":"cj0assjof000l2kt4nvqzbwxu"},{"name":"Heatmap","_id":"cj0assjoh000r2kt4hcqr52ir"},{"name":"d3.js","_id":"cj0assjom00132kt46q5vm73i"},{"name":"Geocoder","_id":"cj0assjor001g2kt4qnzaaoo0"},{"name":"infoWindow","_id":"cj0assjoz001v2kt41kulv7zb"},{"name":"javascript","_id":"cj0assjp100242kt4pncgvpj2"},{"name":"ecmascript","_id":"cj0assjp3002a2kt4wor580yd"},{"name":"twd97","_id":"cj0assjp6002n2kt4t5weoyn4"},{"name":"gis","_id":"cj0assjp7002s2kt4zf1ejoy0"},{"name":"opendata","_id":"cj0assjp7002v2kt4xawrschw"},{"name":"android","_id":"cj0assjp800302kt431pk42uq"},{"name":"chrome","_id":"cj0assjp800332kt4jvg671qu"},{"name":"mobile","_id":"cj0assjp800342kt433g76nnb"},{"name":"jQuery","_id":"cj0assjp900382kt4lz5um3kr"},{"name":"html","_id":"cj0assjp9003c2kt40r3mqgbk"},{"name":"html5","_id":"cj0assjpa003f2kt4qb91d23p"},{"name":"canvas","_id":"cj0assjpa003g2kt4imxhffzm"},{"name":"php","_id":"cj0assjpa003h2kt4t8ixc42v"},{"name":"D3.js","_id":"cj0assjpa003i2kt4fjyi97s6"},{"name":"donut chart","_id":"cj0assjpa003l2kt4stywiokw"},{"name":"GeoJSON","_id":"cj0assjpe003s2kt4e6mvfhz0"},{"name":"rwd","_id":"cj0assjpf003v2kt446jgvpll"},{"name":"Fusion Table","_id":"cj0assjpg00412kt4mbmrcznx"},{"name":"webpack","_id":"cj0assjph00442kt4mv4x97uh"},{"name":"devtools","_id":"cj0assjph00472kt44p1nhyhp"},{"name":"events","_id":"cj0assjpi004d2kt4mor8ouc1"}]}}